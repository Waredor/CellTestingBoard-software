
CTU_F103_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c844  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c958  0800c958  0001c958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce2c  0800ce2c  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce2c  0800ce2c  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce2c  0800ce2c  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce30  0800ce30  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800ce34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013bc  2000034c  0800d180  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001708  0800d180  00021708  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbbb  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003152  00000000  00000000  0002ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00033088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00033d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af32  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eb1  00000000  00000000  0004f812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b532  00000000  00000000  000606c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebbf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000ebc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c93c 	.word	0x0800c93c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800c93c 	.word	0x0800c93c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ffc:	b097      	sub	sp, #92	; 0x5c
 8000ffe:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
	TTransmit = HAL_GetTick();
 8001000:	f000 fc48 	bl	8001894 <HAL_GetTick>
 8001004:	4603      	mov	r3, r0
 8001006:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <main+0x1f0>)
 8001008:	6013      	str	r3, [r2, #0]
	TToggleCell = HAL_GetTick();
 800100a:	f000 fc43 	bl	8001894 <HAL_GetTick>
 800100e:	4603      	mov	r3, r0
 8001010:	4a76      	ldr	r2, [pc, #472]	; (80011ec <main+0x1f4>)
 8001012:	6013      	str	r3, [r2, #0]

	//float voltage1 = 3.2514;
	voltage2 = 2.5928;
 8001014:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <main+0x1f8>)
 8001016:	4a77      	ldr	r2, [pc, #476]	; (80011f4 <main+0x1fc>)
 8001018:	601a      	str	r2, [r3, #0]
	voltage3 = 2.2314;
 800101a:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <main+0x200>)
 800101c:	4a77      	ldr	r2, [pc, #476]	; (80011fc <main+0x204>)
 800101e:	601a      	str	r2, [r3, #0]
	voltage4 = 2.7889;
 8001020:	4b77      	ldr	r3, [pc, #476]	; (8001200 <main+0x208>)
 8001022:	4a78      	ldr	r2, [pc, #480]	; (8001204 <main+0x20c>)
 8001024:	601a      	str	r2, [r3, #0]
	voltage5 = 3.0456;
 8001026:	4b78      	ldr	r3, [pc, #480]	; (8001208 <main+0x210>)
 8001028:	4a78      	ldr	r2, [pc, #480]	; (800120c <main+0x214>)
 800102a:	601a      	str	r2, [r3, #0]

	cur1 = 1.1156;
 800102c:	4b78      	ldr	r3, [pc, #480]	; (8001210 <main+0x218>)
 800102e:	4a79      	ldr	r2, [pc, #484]	; (8001214 <main+0x21c>)
 8001030:	601a      	str	r2, [r3, #0]
	cur2 = 0.8928;
 8001032:	4b79      	ldr	r3, [pc, #484]	; (8001218 <main+0x220>)
 8001034:	4a79      	ldr	r2, [pc, #484]	; (800121c <main+0x224>)
 8001036:	601a      	str	r2, [r3, #0]
	cur3 = 2.2678;
 8001038:	4b79      	ldr	r3, [pc, #484]	; (8001220 <main+0x228>)
 800103a:	4a7a      	ldr	r2, [pc, #488]	; (8001224 <main+0x22c>)
 800103c:	601a      	str	r2, [r3, #0]
	cur4 = 1.5634;
 800103e:	4b7a      	ldr	r3, [pc, #488]	; (8001228 <main+0x230>)
 8001040:	4a7a      	ldr	r2, [pc, #488]	; (800122c <main+0x234>)
 8001042:	601a      	str	r2, [r3, #0]
	cur5 = 0.4290;
 8001044:	4b7a      	ldr	r3, [pc, #488]	; (8001230 <main+0x238>)
 8001046:	4a7b      	ldr	r2, [pc, #492]	; (8001234 <main+0x23c>)
 8001048:	601a      	str	r2, [r3, #0]


	char status1[] = "OFF  ";
 800104a:	4a7b      	ldr	r2, [pc, #492]	; (8001238 <main+0x240>)
 800104c:	f107 0320 	add.w	r3, r7, #32
 8001050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001054:	6018      	str	r0, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	8019      	strh	r1, [r3, #0]
	char status2[] = "OFF  ";
 800105a:	4a77      	ldr	r2, [pc, #476]	; (8001238 <main+0x240>)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001064:	6018      	str	r0, [r3, #0]
 8001066:	3304      	adds	r3, #4
 8001068:	8019      	strh	r1, [r3, #0]
	char status3[] = "OFF  ";
 800106a:	4a73      	ldr	r2, [pc, #460]	; (8001238 <main+0x240>)
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001074:	6018      	str	r0, [r3, #0]
 8001076:	3304      	adds	r3, #4
 8001078:	8019      	strh	r1, [r3, #0]
	char status4[] = "ERR  ";
 800107a:	4a70      	ldr	r2, [pc, #448]	; (800123c <main+0x244>)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001084:	6018      	str	r0, [r3, #0]
 8001086:	3304      	adds	r3, #4
 8001088:	8019      	strh	r1, [r3, #0]
	char status5[] = "ERR  ";
 800108a:	4a6c      	ldr	r2, [pc, #432]	; (800123c <main+0x244>)
 800108c:	463b      	mov	r3, r7
 800108e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001092:	6018      	str	r0, [r3, #0]
 8001094:	3304      	adds	r3, #4
 8001096:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001098:	f000 fba4 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109c:	f000 f8de 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a0:	f000 f998 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010a4:	f000 f978 	bl	8001398 <MX_DMA_Init>
  MX_ADC1_Init();
 80010a8:	f000 f938 	bl	800131c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80010ac:	f007 fe2e 	bl	8008d0c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80010b0:	4863      	ldr	r0, [pc, #396]	; (8001240 <main+0x248>)
 80010b2:	f000 fcd1 	bl	8001a58 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80010b6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ba:	4861      	ldr	r0, [pc, #388]	; (8001240 <main+0x248>)
 80010bc:	f000 fd7a 	bl	8001bb4 <HAL_ADC_PollForConversion>
	  adc = HAL_ADC_GetValue(&hadc1);
 80010c0:	485f      	ldr	r0, [pc, #380]	; (8001240 <main+0x248>)
 80010c2:	f000 fe7d 	bl	8001dc0 <HAL_ADC_GetValue>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <main+0x24c>)
 80010cc:	801a      	strh	r2, [r3, #0]
	  cell_selector((char *) receive_buf);
 80010ce:	485e      	ldr	r0, [pc, #376]	; (8001248 <main+0x250>)
 80010d0:	f007 fe4c 	bl	8008d6c <cell_selector>
	  if (HAL_GetTick() - TToggleCell >= 1000){ //Этот цикл срабатывает каждую секунду
 80010d4:	f000 fbde 	bl	8001894 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <main+0x1f4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e4:	d30e      	bcc.n	8001104 <main+0x10c>
		  TToggleCell = HAL_GetTick();
 80010e6:	f000 fbd5 	bl	8001894 <HAL_GetTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <main+0x1f4>)
 80010ee:	6013      	str	r3, [r2, #0]
		  cell_switch(flg, status1, status2, status3); //функция изменения состояния шим пина активной ячейки
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <main+0x254>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	f107 0218 	add.w	r2, r7, #24
 80010fc:	f107 0120 	add.w	r1, r7, #32
 8001100:	f007 fe92 	bl	8008e28 <cell_switch>
	  }

	  if (HAL_GetTick() - TTransmit >= 10000){ //Этот цикл срабатывает каждые 10 секунд
 8001104:	f000 fbc6 	bl	8001894 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <main+0x1f0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f242 720f 	movw	r2, #9999	; 0x270f
 8001114:	4293      	cmp	r3, r2
 8001116:	d9cb      	bls.n	80010b0 <main+0xb8>
		  TTransmit = HAL_GetTick();
 8001118:	f000 fbbc 	bl	8001894 <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <main+0x1f0>)
 8001120:	6013      	str	r3, [r2, #0]
	  	  voltage1 = ((float)adc / (float)4095) * 3.3;
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <main+0x24c>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fdbe 	bl	8000ca8 <__aeabi_ui2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4948      	ldr	r1, [pc, #288]	; (8001250 <main+0x258>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fec5 	bl	8000ec0 <__aeabi_fdiv>
 8001136:	4603      	mov	r3, r0
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f97f 	bl	800043c <__aeabi_f2d>
 800113e:	a328      	add	r3, pc, #160	; (adr r3, 80011e0 <main+0x1e8>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff f9d2 	bl	80004ec <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fca4 	bl	8000a9c <__aeabi_d2f>
 8001154:	4603      	mov	r3, r0
 8001156:	4a3f      	ldr	r2, [pc, #252]	; (8001254 <main+0x25c>)
 8001158:	6013      	str	r3, [r2, #0]
	  	  Buf_compile(Buf, status1, status2, status3, status4, status5, voltage1, voltage2, voltage3, voltage4, voltage5, cur1, cur2, cur3, cur4, cur5); //Составление единого буфера из информации о ячейках
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <main+0x25c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <main+0x1f8>)
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	4925      	ldr	r1, [pc, #148]	; (80011f8 <main+0x200>)
 8001164:	6809      	ldr	r1, [r1, #0]
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <main+0x208>)
 8001168:	6800      	ldr	r0, [r0, #0]
 800116a:	4c27      	ldr	r4, [pc, #156]	; (8001208 <main+0x210>)
 800116c:	6824      	ldr	r4, [r4, #0]
 800116e:	4d28      	ldr	r5, [pc, #160]	; (8001210 <main+0x218>)
 8001170:	682d      	ldr	r5, [r5, #0]
 8001172:	4e29      	ldr	r6, [pc, #164]	; (8001218 <main+0x220>)
 8001174:	6836      	ldr	r6, [r6, #0]
 8001176:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8001220 <main+0x228>
 800117a:	f8dc c000 	ldr.w	ip, [ip]
 800117e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8001228 <main+0x230>
 8001182:	f8de e000 	ldr.w	lr, [lr]
 8001186:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001230 <main+0x238>
 800118a:	f8d8 8000 	ldr.w	r8, [r8]
 800118e:	f107 0b10 	add.w	fp, r7, #16
 8001192:	f107 0a18 	add.w	sl, r7, #24
 8001196:	f107 0920 	add.w	r9, r7, #32
 800119a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800119e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80011a2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80011a6:	9608      	str	r6, [sp, #32]
 80011a8:	9507      	str	r5, [sp, #28]
 80011aa:	9406      	str	r4, [sp, #24]
 80011ac:	9005      	str	r0, [sp, #20]
 80011ae:	9104      	str	r1, [sp, #16]
 80011b0:	9203      	str	r2, [sp, #12]
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	463b      	mov	r3, r7
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	465b      	mov	r3, fp
 80011c0:	4652      	mov	r2, sl
 80011c2:	4649      	mov	r1, r9
 80011c4:	4824      	ldr	r0, [pc, #144]	; (8001258 <main+0x260>)
 80011c6:	f007 ff33 	bl	8009030 <Buf_compile>
	  	  CDC_Transmit_FS((uint8_t *) Buf, strlen (Buf));  //Отправка данных в COM Port каждые 10 секунд
 80011ca:	4823      	ldr	r0, [pc, #140]	; (8001258 <main+0x260>)
 80011cc:	f7fe ffca 	bl	8000164 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4619      	mov	r1, r3
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <main+0x260>)
 80011d8:	f008 f8b0 	bl	800933c <CDC_Transmit_FS>
	  HAL_ADC_Start(&hadc1);
 80011dc:	e768      	b.n	80010b0 <main+0xb8>
 80011de:	bf00      	nop
 80011e0:	66666666 	.word	0x66666666
 80011e4:	400a6666 	.word	0x400a6666
 80011e8:	200003e0 	.word	0x200003e0
 80011ec:	200003e4 	.word	0x200003e4
 80011f0:	200004e8 	.word	0x200004e8
 80011f4:	4025f06f 	.word	0x4025f06f
 80011f8:	200004ec 	.word	0x200004ec
 80011fc:	400ecf42 	.word	0x400ecf42
 8001200:	200004f0 	.word	0x200004f0
 8001204:	40327d56 	.word	0x40327d56
 8001208:	200004f4 	.word	0x200004f4
 800120c:	4042eb1c 	.word	0x4042eb1c
 8001210:	200004f8 	.word	0x200004f8
 8001214:	3f8ecbfb 	.word	0x3f8ecbfb
 8001218:	200004fc 	.word	0x200004fc
 800121c:	3f648e8a 	.word	0x3f648e8a
 8001220:	20000500 	.word	0x20000500
 8001224:	401123a3 	.word	0x401123a3
 8001228:	20000504 	.word	0x20000504
 800122c:	3fc81d7e 	.word	0x3fc81d7e
 8001230:	20000508 	.word	0x20000508
 8001234:	3edba5e3 	.word	0x3edba5e3
 8001238:	0800c958 	.word	0x0800c958
 800123c:	0800c960 	.word	0x0800c960
 8001240:	20000368 	.word	0x20000368
 8001244:	200003dc 	.word	0x200003dc
 8001248:	20000510 	.word	0x20000510
 800124c:	2000050c 	.word	0x2000050c
 8001250:	457ff000 	.word	0x457ff000
 8001254:	200004e4 	.word	0x200004e4
 8001258:	200003e8 	.word	0x200003e8

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	2228      	movs	r2, #40	; 0x28
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f008 fc7c 	bl	8009b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80012aa:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 f8b5 	bl	8004424 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80012c0:	f000 f8c8 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fb21 	bl	8004928 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ec:	f000 f8b2 	bl	8001454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80012f0:	2312      	movs	r3, #18
 80012f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80012f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fc8a 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800130e:	f000 f8a1 	bl	8001454 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_ADC1_Init+0x74>)
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <MX_ADC1_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_ADC1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_ADC1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_ADC1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_ADC1_Init+0x74>)
 8001346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800134a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_ADC1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_ADC1_Init+0x74>)
 8001354:	2201      	movs	r2, #1
 8001356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_ADC1_Init+0x74>)
 800135a:	f000 faa5 	bl	80018a8 <HAL_ADC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 f876 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800136c:	2301      	movs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001370:	2304      	movs	r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_ADC1_Init+0x74>)
 800137a:	f000 fd2d 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001384:	f000 f866 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000368 	.word	0x20000368
 8001394:	40012400 	.word	0x40012400

08001398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_DMA_Init+0x38>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <MX_DMA_Init+0x38>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6153      	str	r3, [r2, #20]
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_DMA_Init+0x38>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200b      	movs	r0, #11
 80013bc:	f000 ff77 	bl	80022ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013c0:	200b      	movs	r0, #11
 80013c2:	f000 ff90 	bl	80022e6 <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_GPIO_Init+0x78>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <MX_GPIO_Init+0x78>)
 80013ee:	f043 0320 	orr.w	r3, r3, #32
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_GPIO_Init+0x78>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_GPIO_Init+0x78>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a11      	ldr	r2, [pc, #68]	; (800144c <MX_GPIO_Init+0x78>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_GPIO_Init+0x78>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cell1_Pin|cell2_Pin|cell3_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_GPIO_Init+0x7c>)
 8001420:	f001 fa60 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cell1_Pin cell2_Pin cell3_Pin */
  GPIO_InitStruct.Pin = cell1_Pin|cell2_Pin|cell3_Pin;
 8001424:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_GPIO_Init+0x7c>)
 800143e:	f001 f8cd 	bl	80025dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_MspInit+0x5c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_MspInit+0x5c>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x5c>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x5c>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_MspInit+0x5c>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_MspInit+0x5c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_MspInit+0x60>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_MspInit+0x60>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000

080014c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_ADC_MspInit+0xbc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d149      	bne.n	8001578 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_ADC_MspInit+0xc0>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_ADC_MspInit+0xc0>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_ADC_MspInit+0xc0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_ADC_MspInit+0xc0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_ADC_MspInit+0xc0>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_ADC_MspInit+0xc0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	2303      	movs	r3, #3
 800151a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	4819      	ldr	r0, [pc, #100]	; (8001588 <HAL_ADC_MspInit+0xc4>)
 8001524:	f001 f85a 	bl	80025dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_ADC_MspInit+0xc8>)
 800152a:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_ADC_MspInit+0xcc>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_ADC_MspInit+0xc8>)
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001546:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_ADC_MspInit+0xc8>)
 800154a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <HAL_ADC_MspInit+0xc8>)
 800155e:	f000 fedd 	bl	800231c <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001568:	f7ff ff74 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001570:	621a      	str	r2, [r3, #32]
 8001572:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_ADC_MspInit+0xc8>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40012400 	.word	0x40012400
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800
 800158c:	20000398 	.word	0x20000398
 8001590:	40020008 	.word	0x40020008

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015da:	f000 f949 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA1_Channel1_IRQHandler+0x10>)
 80015ea:	f000 fef1 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000398 	.word	0x20000398

080015f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015fe:	f001 fac7 	bl	8002b90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200011e8 	.word	0x200011e8

0800160c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <_kill>:

int _kill(int pid, int sig)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001624:	f008 fa68 	bl	8009af8 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	2216      	movs	r2, #22
 800162c:	601a      	str	r2, [r3, #0]
  return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_exit>:

void _exit (int status)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001642:	f04f 31ff 	mov.w	r1, #4294967295
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffe7 	bl	800161a <_kill>
  while (1) {}    /* Make sure we hang here */
 800164c:	e7fe      	b.n	800164c <_exit+0x12>

0800164e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e00a      	b.n	8001676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001660:	f3af 8000 	nop.w
 8001664:	4601      	mov	r1, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	b2ca      	uxtb	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbf0      	blt.n	8001660 <_read+0x12>
  }

  return len;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e009      	b.n	80016ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	60ba      	str	r2, [r7, #8]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dbf1      	blt.n	800169a <_write+0x12>
  }
  return len;
 80016b6:	687b      	ldr	r3, [r7, #4]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_close>:

int _close(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e6:	605a      	str	r2, [r3, #4]
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <_isatty>:

int _isatty(int file)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f008 f9d2 	bl	8009af8 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20005000 	.word	0x20005000
 8001780:	00000400 	.word	0x00000400
 8001784:	20000518 	.word	0x20000518
 8001788:	20001708 	.word	0x20001708

0800178c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001798:	f7ff fff8 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800179e:	490c      	ldr	r1, [pc, #48]	; (80017d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b4:	4c09      	ldr	r4, [pc, #36]	; (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c2:	f008 f99f 	bl	8009b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c6:	f7ff fc17 	bl	8000ff8 <main>
  bx lr
 80017ca:	4770      	bx	lr
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80017d4:	0800ce34 	.word	0x0800ce34
  ldr r2, =_sbss
 80017d8:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80017dc:	20001708 	.word	0x20001708

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x28>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 fd4f 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fe2e 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fd67 	bl	8002302 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 fd2f 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000000 	.word	0x20000000
 8001868:	20000008 	.word	0x20000008
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x1c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x20>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a03      	ldr	r2, [pc, #12]	; (8001890 <HAL_IncTick+0x20>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000008 	.word	0x20000008
 8001890:	2000051c 	.word	0x2000051c

08001894 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_GetTick+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	2000051c 	.word	0x2000051c

080018a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0be      	b.n	8001a48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fdec 	bl	80014c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fbc5 	bl	800207c <ADC_ConversionStop_Disable>
 80018f2:	4603      	mov	r3, r0
 80018f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 8099 	bne.w	8001a36 <HAL_ADC_Init+0x18e>
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8095 	bne.w	8001a36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001914:	f023 0302 	bic.w	r3, r3, #2
 8001918:	f043 0202 	orr.w	r2, r3, #2
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001928:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7b1b      	ldrb	r3, [r3, #12]
 800192e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001930:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4313      	orrs	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001940:	d003      	beq.n	800194a <HAL_ADC_Init+0xa2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d102      	bne.n	8001950 <HAL_ADC_Init+0xa8>
 800194a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194e:	e000      	b.n	8001952 <HAL_ADC_Init+0xaa>
 8001950:	2300      	movs	r3, #0
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7d1b      	ldrb	r3, [r3, #20]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d119      	bne.n	8001994 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7b1b      	ldrb	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	3b01      	subs	r3, #1
 800196e:	035a      	lsls	r2, r3, #13
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e00b      	b.n	8001994 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_ADC_Init+0x1a8>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c4:	d003      	beq.n	80019ce <HAL_ADC_Init+0x126>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d104      	bne.n	80019d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_ADC_Init+0x1ac>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10b      	bne.n	8001a14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a12:	e018      	b.n	8001a46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f023 0312 	bic.w	r3, r3, #18
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	f043 0210 	orr.w	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	ffe1f7fd 	.word	0xffe1f7fd
 8001a54:	ff1f0efe 	.word	0xff1f0efe

08001a58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Start+0x1a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e098      	b.n	8001ba4 <HAL_ADC_Start+0x14c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 faa4 	bl	8001fc8 <ADC_Enable>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8087 	bne.w	8001b9a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a41      	ldr	r2, [pc, #260]	; (8001bac <HAL_ADC_Start+0x154>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d105      	bne.n	8001ab6 <HAL_ADC_Start+0x5e>
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d026      	beq.n	8001b1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae0:	e01d      	b.n	8001b1e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_Start+0xaa>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <HAL_ADC_Start+0x154>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10d      	bne.n	8001b1e <HAL_ADC_Start+0xc6>
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f023 0206 	bic.w	r2, r3, #6
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b36:	e002      	b.n	8001b3e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0202 	mvn.w	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b5e:	d113      	bne.n	8001b88 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b64:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_ADC_Start+0x154>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d105      	bne.n	8001b76 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	e00c      	b.n	8001ba2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e003      	b.n	8001ba2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40012800 	.word	0x40012800
 8001bb0:	40012400 	.word	0x40012400

08001bb4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bca:	f7ff fe63 	bl	8001894 <HAL_GetTick>
 8001bce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	f043 0220 	orr.w	r2, r3, #32
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0d3      	b.n	8001d9e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d131      	bne.n	8001c68 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12a      	bne.n	8001c68 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c12:	e021      	b.n	8001c58 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1a:	d01d      	beq.n	8001c58 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_PollForConversion+0x7e>
 8001c22:	f7ff fe37 	bl	8001894 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d212      	bcs.n	8001c58 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f043 0204 	orr.w	r2, r3, #4
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0a2      	b.n	8001d9e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0d6      	beq.n	8001c14 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c66:	e070      	b.n	8001d4a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c68:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <HAL_ADC_PollForConversion+0x1f4>)
 8001c6a:	681c      	ldr	r4, [r3, #0]
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f003 f88b 	bl	8004d88 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c72:	4603      	mov	r3, r0
 8001c74:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6919      	ldr	r1, [r3, #16]
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_ADC_PollForConversion+0x1f8>)
 8001c80:	400b      	ands	r3, r1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d118      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x104>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68d9      	ldr	r1, [r3, #12]
 8001c8c:	4b48      	ldr	r3, [pc, #288]	; (8001db0 <HAL_ADC_PollForConversion+0x1fc>)
 8001c8e:	400b      	ands	r3, r1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d111      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x104>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6919      	ldr	r1, [r3, #16]
 8001c9a:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_ADC_PollForConversion+0x200>)
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d108      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x100>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_ADC_PollForConversion+0x204>)
 8001caa:	400b      	ands	r3, r1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x100>
 8001cb0:	2314      	movs	r3, #20
 8001cb2:	e020      	b.n	8001cf6 <HAL_ADC_PollForConversion+0x142>
 8001cb4:	2329      	movs	r3, #41	; 0x29
 8001cb6:	e01e      	b.n	8001cf6 <HAL_ADC_PollForConversion+0x142>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6919      	ldr	r1, [r3, #16]
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_ADC_PollForConversion+0x200>)
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x120>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68d9      	ldr	r1, [r3, #12]
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <HAL_ADC_PollForConversion+0x204>)
 8001cce:	400b      	ands	r3, r1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_ADC_PollForConversion+0x13c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6919      	ldr	r1, [r3, #16]
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_ADC_PollForConversion+0x208>)
 8001cdc:	400b      	ands	r3, r1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d108      	bne.n	8001cf4 <HAL_ADC_PollForConversion+0x140>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68d9      	ldr	r1, [r3, #12]
 8001ce8:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <HAL_ADC_PollForConversion+0x208>)
 8001cea:	400b      	ands	r3, r1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_PollForConversion+0x140>
 8001cf0:	2354      	movs	r3, #84	; 0x54
 8001cf2:	e000      	b.n	8001cf6 <HAL_ADC_PollForConversion+0x142>
 8001cf4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cfc:	e021      	b.n	8001d42 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d01a      	beq.n	8001d3c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_ADC_PollForConversion+0x168>
 8001d0c:	f7ff fdc2 	bl	8001894 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d20f      	bcs.n	8001d3c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d90b      	bls.n	8001d3c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f043 0204 	orr.w	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e030      	b.n	8001d9e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d8d9      	bhi.n	8001cfe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0212 	mvn.w	r2, #18
 8001d52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d6e:	d115      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d111      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd90      	pop	{r4, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000
 8001dac:	24924924 	.word	0x24924924
 8001db0:	00924924 	.word	0x00924924
 8001db4:	12492492 	.word	0x12492492
 8001db8:	00492492 	.word	0x00492492
 8001dbc:	00249249 	.word	0x00249249

08001dc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x20>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0dc      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x1da>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d81c      	bhi.n	8001e42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	3b05      	subs	r3, #5
 8001e1a:	221f      	movs	r2, #31
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4019      	ands	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b05      	subs	r3, #5
 8001e34:	fa00 f203 	lsl.w	r2, r0, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e40:	e03c      	b.n	8001ebc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d81c      	bhi.n	8001e84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b23      	subs	r3, #35	; 0x23
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	4019      	ands	r1, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b23      	subs	r3, #35	; 0x23
 8001e76:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
 8001e82:	e01b      	b.n	8001ebc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3b41      	subs	r3, #65	; 0x41
 8001e96:	221f      	movs	r2, #31
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4019      	ands	r1, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b41      	subs	r3, #65	; 0x41
 8001eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d91c      	bls.n	8001efe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68d9      	ldr	r1, [r3, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b1e      	subs	r3, #30
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4019      	ands	r1, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	3b1e      	subs	r3, #30
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	e019      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6919      	ldr	r1, [r3, #16]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2207      	movs	r2, #7
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4019      	ands	r1, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6898      	ldr	r0, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d003      	beq.n	8001f42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f3e:	2b11      	cmp	r3, #17
 8001f40:	d132      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_ADC_ConfigChannel+0x1e4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d125      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d126      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d11a      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9a      	lsrs	r2, r3, #18
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1b2>
 8001f96:	e007      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40012400 	.word	0x40012400
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d040      	beq.n	8002068 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <ADC_Enable+0xac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <ADC_Enable+0xb0>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0c9b      	lsrs	r3, r3, #18
 8002002:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002004:	e002      	b.n	800200c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3b01      	subs	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002012:	f7ff fc3f 	bl	8001894 <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002018:	e01f      	b.n	800205a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800201a:	f7ff fc3b 	bl	8001894 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d918      	bls.n	800205a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d011      	beq.n	800205a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	f043 0210 	orr.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e007      	b.n	800206a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d1d8      	bne.n	800201a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000
 8002078:	431bde83 	.word	0x431bde83

0800207c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d12e      	bne.n	80020f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020a6:	f7ff fbf5 	bl	8001894 <HAL_GetTick>
 80020aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020ac:	e01b      	b.n	80020e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ae:	f7ff fbf1 	bl	8001894 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d914      	bls.n	80020e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10d      	bne.n	80020e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e007      	b.n	80020f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d0dc      	beq.n	80020ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800212c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002132:	4a04      	ldr	r2, [pc, #16]	; (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60d3      	str	r3, [r2, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4906      	ldr	r1, [pc, #24]	; (8002198 <__NVIC_EnableIRQ+0x34>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f7ff ff90 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff2d 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff42 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff90 	bl	80021f0 <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5f 	bl	800219c <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff35 	bl	8002164 <__NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffa2 	bl	8002254 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e043      	b.n	80023ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_DMA_Init+0xa8>)
 800233a:	4413      	add	r3, r2
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <HAL_DMA_Init+0xac>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	009a      	lsls	r2, r3, #2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_DMA_Init+0xb0>)
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002366:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800236a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	bffdfff8 	.word	0xbffdfff8
 80023c8:	cccccccd 	.word	0xcccccccd
 80023cc:	40020000 	.word	0x40020000

080023d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	2204      	movs	r2, #4
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d04f      	beq.n	8002498 <HAL_DMA_IRQHandler+0xc8>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d04a      	beq.n	8002498 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0204 	bic.w	r2, r2, #4
 800241e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <HAL_DMA_IRQHandler+0x1f0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d029      	beq.n	800247e <HAL_DMA_IRQHandler+0xae>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_DMA_IRQHandler+0x1f4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_IRQHandler+0xaa>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a63      	ldr	r2, [pc, #396]	; (80025c8 <HAL_DMA_IRQHandler+0x1f8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01a      	beq.n	8002474 <HAL_DMA_IRQHandler+0xa4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a62      	ldr	r2, [pc, #392]	; (80025cc <HAL_DMA_IRQHandler+0x1fc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d012      	beq.n	800246e <HAL_DMA_IRQHandler+0x9e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <HAL_DMA_IRQHandler+0x200>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00a      	beq.n	8002468 <HAL_DMA_IRQHandler+0x98>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a5f      	ldr	r2, [pc, #380]	; (80025d4 <HAL_DMA_IRQHandler+0x204>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d102      	bne.n	8002462 <HAL_DMA_IRQHandler+0x92>
 800245c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002460:	e00e      	b.n	8002480 <HAL_DMA_IRQHandler+0xb0>
 8002462:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002466:	e00b      	b.n	8002480 <HAL_DMA_IRQHandler+0xb0>
 8002468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800246c:	e008      	b.n	8002480 <HAL_DMA_IRQHandler+0xb0>
 800246e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002472:	e005      	b.n	8002480 <HAL_DMA_IRQHandler+0xb0>
 8002474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002478:	e002      	b.n	8002480 <HAL_DMA_IRQHandler+0xb0>
 800247a:	2340      	movs	r3, #64	; 0x40
 800247c:	e000      	b.n	8002480 <HAL_DMA_IRQHandler+0xb0>
 800247e:	2304      	movs	r3, #4
 8002480:	4a55      	ldr	r2, [pc, #340]	; (80025d8 <HAL_DMA_IRQHandler+0x208>)
 8002482:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8094 	beq.w	80025b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002496:	e08e      	b.n	80025b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2202      	movs	r2, #2
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d056      	beq.n	8002556 <HAL_DMA_IRQHandler+0x186>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d051      	beq.n	8002556 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 020a 	bic.w	r2, r2, #10
 80024ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a38      	ldr	r2, [pc, #224]	; (80025c0 <HAL_DMA_IRQHandler+0x1f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d029      	beq.n	8002536 <HAL_DMA_IRQHandler+0x166>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <HAL_DMA_IRQHandler+0x1f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_IRQHandler+0x162>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <HAL_DMA_IRQHandler+0x1f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01a      	beq.n	800252c <HAL_DMA_IRQHandler+0x15c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_DMA_IRQHandler+0x1fc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_IRQHandler+0x156>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_DMA_IRQHandler+0x200>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00a      	beq.n	8002520 <HAL_DMA_IRQHandler+0x150>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a31      	ldr	r2, [pc, #196]	; (80025d4 <HAL_DMA_IRQHandler+0x204>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <HAL_DMA_IRQHandler+0x14a>
 8002514:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002518:	e00e      	b.n	8002538 <HAL_DMA_IRQHandler+0x168>
 800251a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251e:	e00b      	b.n	8002538 <HAL_DMA_IRQHandler+0x168>
 8002520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002524:	e008      	b.n	8002538 <HAL_DMA_IRQHandler+0x168>
 8002526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800252a:	e005      	b.n	8002538 <HAL_DMA_IRQHandler+0x168>
 800252c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002530:	e002      	b.n	8002538 <HAL_DMA_IRQHandler+0x168>
 8002532:	2320      	movs	r3, #32
 8002534:	e000      	b.n	8002538 <HAL_DMA_IRQHandler+0x168>
 8002536:	2302      	movs	r3, #2
 8002538:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <HAL_DMA_IRQHandler+0x208>)
 800253a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d034      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002554:	e02f      	b.n	80025b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2208      	movs	r2, #8
 800255c:	409a      	lsls	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x1e8>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 020e 	bic.w	r2, r2, #14
 800257e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
    }
  }
  return;
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
}
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40020008 	.word	0x40020008
 80025c4:	4002001c 	.word	0x4002001c
 80025c8:	40020030 	.word	0x40020030
 80025cc:	40020044 	.word	0x40020044
 80025d0:	40020058 	.word	0x40020058
 80025d4:	4002006c 	.word	0x4002006c
 80025d8:	40020000 	.word	0x40020000

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b08b      	sub	sp, #44	; 0x2c
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ee:	e169      	b.n	80028c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025f0:	2201      	movs	r2, #1
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 8158 	bne.w	80028be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a9a      	ldr	r2, [pc, #616]	; (800287c <HAL_GPIO_Init+0x2a0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d05e      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002618:	4a98      	ldr	r2, [pc, #608]	; (800287c <HAL_GPIO_Init+0x2a0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d875      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 800261e:	4a98      	ldr	r2, [pc, #608]	; (8002880 <HAL_GPIO_Init+0x2a4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d058      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002624:	4a96      	ldr	r2, [pc, #600]	; (8002880 <HAL_GPIO_Init+0x2a4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d86f      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 800262a:	4a96      	ldr	r2, [pc, #600]	; (8002884 <HAL_GPIO_Init+0x2a8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d052      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002630:	4a94      	ldr	r2, [pc, #592]	; (8002884 <HAL_GPIO_Init+0x2a8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d869      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 8002636:	4a94      	ldr	r2, [pc, #592]	; (8002888 <HAL_GPIO_Init+0x2ac>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d04c      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 800263c:	4a92      	ldr	r2, [pc, #584]	; (8002888 <HAL_GPIO_Init+0x2ac>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d863      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 8002642:	4a92      	ldr	r2, [pc, #584]	; (800288c <HAL_GPIO_Init+0x2b0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d046      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002648:	4a90      	ldr	r2, [pc, #576]	; (800288c <HAL_GPIO_Init+0x2b0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d85d      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 800264e:	2b12      	cmp	r3, #18
 8002650:	d82a      	bhi.n	80026a8 <HAL_GPIO_Init+0xcc>
 8002652:	2b12      	cmp	r3, #18
 8002654:	d859      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_GPIO_Init+0x80>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	080026d7 	.word	0x080026d7
 8002660:	080026b1 	.word	0x080026b1
 8002664:	080026c3 	.word	0x080026c3
 8002668:	08002705 	.word	0x08002705
 800266c:	0800270b 	.word	0x0800270b
 8002670:	0800270b 	.word	0x0800270b
 8002674:	0800270b 	.word	0x0800270b
 8002678:	0800270b 	.word	0x0800270b
 800267c:	0800270b 	.word	0x0800270b
 8002680:	0800270b 	.word	0x0800270b
 8002684:	0800270b 	.word	0x0800270b
 8002688:	0800270b 	.word	0x0800270b
 800268c:	0800270b 	.word	0x0800270b
 8002690:	0800270b 	.word	0x0800270b
 8002694:	0800270b 	.word	0x0800270b
 8002698:	0800270b 	.word	0x0800270b
 800269c:	0800270b 	.word	0x0800270b
 80026a0:	080026b9 	.word	0x080026b9
 80026a4:	080026cd 	.word	0x080026cd
 80026a8:	4a79      	ldr	r2, [pc, #484]	; (8002890 <HAL_GPIO_Init+0x2b4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ae:	e02c      	b.n	800270a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	623b      	str	r3, [r7, #32]
          break;
 80026b6:	e029      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	3304      	adds	r3, #4
 80026be:	623b      	str	r3, [r7, #32]
          break;
 80026c0:	e024      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	3308      	adds	r3, #8
 80026c8:	623b      	str	r3, [r7, #32]
          break;
 80026ca:	e01f      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	330c      	adds	r3, #12
 80026d2:	623b      	str	r3, [r7, #32]
          break;
 80026d4:	e01a      	b.n	800270c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026de:	2304      	movs	r3, #4
 80026e0:	623b      	str	r3, [r7, #32]
          break;
 80026e2:	e013      	b.n	800270c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ec:	2308      	movs	r3, #8
 80026ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	611a      	str	r2, [r3, #16]
          break;
 80026f6:	e009      	b.n	800270c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f8:	2308      	movs	r3, #8
 80026fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	615a      	str	r2, [r3, #20]
          break;
 8002702:	e003      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x130>
          break;
 800270a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d801      	bhi.n	8002716 <HAL_GPIO_Init+0x13a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	e001      	b.n	800271a <HAL_GPIO_Init+0x13e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2bff      	cmp	r3, #255	; 0xff
 8002720:	d802      	bhi.n	8002728 <HAL_GPIO_Init+0x14c>
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x152>
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	3b08      	subs	r3, #8
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	210f      	movs	r1, #15
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80b1 	beq.w	80028be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800275c:	4b4d      	ldr	r3, [pc, #308]	; (8002894 <HAL_GPIO_Init+0x2b8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_GPIO_Init+0x2b8>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <HAL_GPIO_Init+0x2b8>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002774:	4a48      	ldr	r2, [pc, #288]	; (8002898 <HAL_GPIO_Init+0x2bc>)
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a40      	ldr	r2, [pc, #256]	; (800289c <HAL_GPIO_Init+0x2c0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d013      	beq.n	80027c8 <HAL_GPIO_Init+0x1ec>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00d      	beq.n	80027c4 <HAL_GPIO_Init+0x1e8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3e      	ldr	r2, [pc, #248]	; (80028a4 <HAL_GPIO_Init+0x2c8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_Init+0x1e4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <HAL_GPIO_Init+0x2cc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_GPIO_Init+0x1e0>
 80027b8:	2303      	movs	r3, #3
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027bc:	2304      	movs	r3, #4
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c8:	2300      	movs	r3, #0
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027da:	492f      	ldr	r1, [pc, #188]	; (8002898 <HAL_GPIO_Init+0x2bc>)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	492c      	ldr	r1, [pc, #176]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	43db      	mvns	r3, r3
 800280a:	4928      	ldr	r1, [pc, #160]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800280c:	4013      	ands	r3, r2
 800280e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	4922      	ldr	r1, [pc, #136]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	60cb      	str	r3, [r1, #12]
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	43db      	mvns	r3, r3
 8002832:	491e      	ldr	r1, [pc, #120]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002834:	4013      	ands	r3, r2
 8002836:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4918      	ldr	r1, [pc, #96]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	43db      	mvns	r3, r3
 800285a:	4914      	ldr	r1, [pc, #80]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800285c:	4013      	ands	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d021      	beq.n	80028b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e021      	b.n	80028be <HAL_GPIO_Init+0x2e2>
 800287a:	bf00      	nop
 800287c:	10320000 	.word	0x10320000
 8002880:	10310000 	.word	0x10310000
 8002884:	10220000 	.word	0x10220000
 8002888:	10210000 	.word	0x10210000
 800288c:	10120000 	.word	0x10120000
 8002890:	10110000 	.word	0x10110000
 8002894:	40021000 	.word	0x40021000
 8002898:	40010000 	.word	0x40010000
 800289c:	40010800 	.word	0x40010800
 80028a0:	40010c00 	.word	0x40010c00
 80028a4:	40011000 	.word	0x40011000
 80028a8:	40011400 	.word	0x40011400
 80028ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_GPIO_Init+0x304>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	4909      	ldr	r1, [pc, #36]	; (80028e0 <HAL_GPIO_Init+0x304>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	3301      	adds	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f47f ae8e 	bne.w	80025f0 <HAL_GPIO_Init+0x14>
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	372c      	adds	r7, #44	; 0x2c
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4013      	ands	r3, r2
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43d9      	mvns	r1, r3
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	400b      	ands	r3, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002948:	b08b      	sub	sp, #44	; 0x2c
 800294a:	af06      	add	r7, sp, #24
 800294c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0f1      	b.n	8002b3c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f006 fe19 	bl	80095a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fade 	bl	8004f40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	687e      	ldr	r6, [r7, #4]
 800298c:	466d      	mov	r5, sp
 800298e:	f106 0410 	add.w	r4, r6, #16
 8002992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	602b      	str	r3, [r5, #0]
 800299a:	1d33      	adds	r3, r6, #4
 800299c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	f002 faa8 	bl	8004ef4 <USB_CoreInit>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0c2      	b.n	8002b3c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fad9 	bl	8004f74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e040      	b.n	8002a4a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	3301      	adds	r3, #1
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3303      	adds	r3, #3
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3338      	adds	r3, #56	; 0x38
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	333c      	adds	r3, #60	; 0x3c
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3340      	adds	r3, #64	; 0x40
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	3301      	adds	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d3b9      	bcc.n	80029c8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e044      	b.n	8002ae4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d3b5      	bcc.n	8002a5a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	687e      	ldr	r6, [r7, #4]
 8002af6:	466d      	mov	r5, sp
 8002af8:	f106 0410 	add.w	r4, r6, #16
 8002afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	602b      	str	r3, [r5, #0]
 8002b04:	1d33      	adds	r3, r6, #4
 8002b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	f002 fa3f 	bl	8004f8c <USB_DevInit>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e00d      	b.n	8002b3c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fcc0 	bl	80074ba <USB_DevDisconnect>

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_PCD_Start+0x16>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e016      	b.n	8002b88 <HAL_PCD_Start+0x44>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 f9d4 	bl	8004f14 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f006 ff8b 	bl	8009a8a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fc94 	bl	80074a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 fc96 	bl	80074ce <USB_ReadInterrupts>
 8002ba2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fb1b 	bl	80031ea <PCD_EP_ISR_Handler>

    return;
 8002bb4:	e119      	b.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd2:	b292      	uxth	r2, r2
 8002bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f006 fd5e 	bl	800969a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bde:	2100      	movs	r1, #0
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f905 	bl	8002df0 <HAL_PCD_SetAddress>

    return;
 8002be6:	e100      	b.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002c0a:	e0ee      	b.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00c      	beq.n	8002c30 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002c2e:	e0dc      	b.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d027      	beq.n	8002c8a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0204 	bic.w	r2, r2, #4
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0208 	bic.w	r2, r2, #8
 8002c64:	b292      	uxth	r2, r2
 8002c66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f006 fd4e 	bl	800970c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c82:	b292      	uxth	r2, r2
 8002c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002c88:	e0af      	b.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8083 	beq.w	8002d9c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e010      	b.n	8002cbe <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	441a      	add	r2, r3
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
 8002caa:	8812      	ldrh	r2, [r2, #0]
 8002cac:	b292      	uxth	r2, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	443b      	add	r3, r7
 8002cb4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002cb8:	7ffb      	ldrb	r3, [r7, #31]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d9eb      	bls.n	8002c9c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002cf4:	bf00      	nop
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f6      	beq.n	8002cf6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1a:	b292      	uxth	r2, r2
 8002d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e00f      	b.n	8002d46 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	7ffa      	ldrb	r2, [r7, #31]
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	440a      	add	r2, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	3320      	adds	r3, #32
 8002d38:	443b      	add	r3, r7
 8002d3a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	3301      	adds	r3, #1
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d9ec      	bls.n	8002d26 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0208 	orr.w	r2, r2, #8
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d76:	b292      	uxth	r2, r2
 8002d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0204 	orr.w	r2, r2, #4
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f006 fc9f 	bl	80096d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d9a:	e026      	b.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00f      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f006 fc5d 	bl	800967e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002dc4:	e011      	b.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00c      	beq.n	8002dea <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de2:	b292      	uxth	r2, r2
 8002de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002de8:	bf00      	nop
  }
}
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_PCD_SetAddress+0x1a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e013      	b.n	8002e32 <HAL_PCD_SetAddress+0x42>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 fb2c 	bl	8007480 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	4608      	mov	r0, r1
 8002e44:	4611      	mov	r1, r2
 8002e46:	461a      	mov	r2, r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	70fb      	strb	r3, [r7, #3]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	803b      	strh	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da0e      	bge.n	8002e7e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
 8002e7c:	e00e      	b.n	8002e9c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 0207 	and.w	r2, r3, #7
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ea8:	883a      	ldrh	r2, [r7, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	78ba      	ldrb	r2, [r7, #2]
 8002eb2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eb4:	78bb      	ldrb	r3, [r7, #2]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d102      	bne.n	8002ec0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_PCD_EP_Open+0x94>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e00e      	b.n	8002eec <HAL_PCD_EP_Open+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 f875 	bl	8004fcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002eea:	7afb      	ldrb	r3, [r7, #11]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da0e      	bge.n	8002f26 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	705a      	strb	r2, [r3, #1]
 8002f24:	e00e      	b.n	8002f44 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	f003 0207 	and.w	r2, r3, #7
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_EP_Close+0x6a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e00e      	b.n	8002f7c <HAL_PCD_EP_Close+0x88>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 fbed 	bl	800574c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	460b      	mov	r3, r1
 8002f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f003 0207 	and.w	r2, r3, #7
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc4:	7afb      	ldrb	r3, [r7, #11]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6979      	ldr	r1, [r7, #20]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fda4 	bl	8005b24 <USB_EPStartXfer>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 0207 	and.w	r2, r3, #7
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003008:	681b      	ldr	r3, [r3, #0]
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003024:	7afb      	ldrb	r3, [r7, #11]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2201      	movs	r2, #1
 800305e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	b2da      	uxtb	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6979      	ldr	r1, [r7, #20]
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fd56 	bl	8005b24 <USB_EPStartXfer>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 0207 	and.w	r2, r3, #7
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	d901      	bls.n	80030a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04c      	b.n	800313a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da0e      	bge.n	80030c6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	705a      	strb	r2, [r3, #1]
 80030c4:	e00c      	b.n	80030e0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_EP_SetStall+0x7e>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e01c      	b.n	800313a <HAL_PCD_EP_SetStall+0xb8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	4618      	mov	r0, r3
 8003110:	f004 f8b9 	bl	8007286 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f004 f9de 	bl	80074ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d901      	bls.n	8003160 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e040      	b.n	80031e2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003164:	2b00      	cmp	r3, #0
 8003166:	da0e      	bge.n	8003186 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	705a      	strb	r2, [r3, #1]
 8003184:	e00e      	b.n	80031a4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 0207 	and.w	r2, r3, #7
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_EP_ClrStall+0x82>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e00e      	b.n	80031e2 <HAL_PCD_EP_ClrStall+0xa0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 f8a7 	bl	8007326 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b096      	sub	sp, #88	; 0x58
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031f2:	e3bf      	b.n	8003974 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003200:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800320e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 8179 	bne.w	800350a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003218:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d152      	bne.n	80032ca <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003234:	81fb      	strh	r3, [r7, #14]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003244:	b29b      	uxth	r3, r3
 8003246:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3328      	adds	r3, #40	; 0x28
 800324c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	3302      	adds	r3, #2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	441a      	add	r2, r3
 8003284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003286:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f006 f9dd 	bl	800964a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 836b 	beq.w	8003974 <PCD_EP_ISR_Handler+0x78a>
 800329e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8366 	bne.w	8003974 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b292      	uxth	r2, r2
 80032bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032c8:	e354      	b.n	8003974 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032d0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d034      	beq.n	8003352 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	3306      	adds	r3, #6
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003312:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800331e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003320:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003324:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003326:	b29b      	uxth	r3, r3
 8003328:	f004 f930 	bl	800758c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29a      	uxth	r2, r3
 8003334:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003338:	4013      	ands	r3, r2
 800333a:	823b      	strh	r3, [r7, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	8a3a      	ldrh	r2, [r7, #16]
 8003342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003346:	b292      	uxth	r2, r2
 8003348:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f006 f950 	bl	80095f0 <HAL_PCD_SetupStageCallback>
 8003350:	e310      	b.n	8003974 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003352:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003356:	2b00      	cmp	r3, #0
 8003358:	f280 830c 	bge.w	8003974 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29a      	uxth	r2, r3
 8003364:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003368:	4013      	ands	r3, r2
 800336a:	83fb      	strh	r3, [r7, #30]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	8bfa      	ldrh	r2, [r7, #30]
 8003372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003376:	b292      	uxth	r2, r2
 8003378:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	3306      	adds	r3, #6
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <PCD_EP_ISR_Handler+0x1f8>
 80033ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033bc:	6959      	ldr	r1, [r3, #20]
 80033be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80033c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f004 f8e0 	bl	800758c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80033cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	441a      	add	r2, r3
 80033d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033da:	2100      	movs	r1, #0
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f006 f919 	bl	8009614 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80033ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 82bd 	bne.w	8003974 <PCD_EP_ISR_Handler+0x78a>
 80033fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003402:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003406:	f000 82b5 	beq.w	8003974 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003418:	b29b      	uxth	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	4413      	add	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003434:	b29a      	uxth	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	801a      	strh	r2, [r3, #0]
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b3e      	cmp	r3, #62	; 0x3e
 8003440:	d91d      	bls.n	800347e <PCD_EP_ISR_Handler+0x294>
 8003442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
 800344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <PCD_EP_ISR_Handler+0x272>
 8003456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003458:	3b01      	subs	r3, #1
 800345a:	647b      	str	r3, [r7, #68]	; 0x44
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29a      	uxth	r2, r3
 8003462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003464:	b29b      	uxth	r3, r3
 8003466:	029b      	lsls	r3, r3, #10
 8003468:	b29b      	uxth	r3, r3
 800346a:	4313      	orrs	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003476:	b29a      	uxth	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	801a      	strh	r2, [r3, #0]
 800347c:	e026      	b.n	80034cc <PCD_EP_ISR_Handler+0x2e2>
 800347e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <PCD_EP_ISR_Handler+0x2b2>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003494:	b29a      	uxth	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	801a      	strh	r2, [r3, #0]
 800349a:	e017      	b.n	80034cc <PCD_EP_ISR_Handler+0x2e2>
 800349c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <PCD_EP_ISR_Handler+0x2cc>
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	3301      	adds	r3, #1
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	b29b      	uxth	r3, r3
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	827b      	strh	r3, [r7, #18]
 80034de:	8a7b      	ldrh	r3, [r7, #18]
 80034e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034e4:	827b      	strh	r3, [r7, #18]
 80034e6:	8a7b      	ldrh	r3, [r7, #18]
 80034e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034ec:	827b      	strh	r3, [r7, #18]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	8a7b      	ldrh	r3, [r7, #18]
 80034f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003504:	b29b      	uxth	r3, r3
 8003506:	8013      	strh	r3, [r2, #0]
 8003508:	e234      	b.n	8003974 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800351e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003522:	2b00      	cmp	r3, #0
 8003524:	f280 80fc 	bge.w	8003720 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29a      	uxth	r2, r3
 800353a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800353e:	4013      	ands	r3, r2
 8003540:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003556:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800355a:	b292      	uxth	r2, r2
 800355c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800355e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003576:	7b1b      	ldrb	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d125      	bne.n	80035c8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	3306      	adds	r3, #6
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80035a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8092 	beq.w	80036d6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b8:	6959      	ldr	r1, [r3, #20]
 80035ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035bc:	88da      	ldrh	r2, [r3, #6]
 80035be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035c2:	f003 ffe3 	bl	800758c <USB_ReadPMA>
 80035c6:	e086      	b.n	80036d6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80035c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ca:	78db      	ldrb	r3, [r3, #3]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d10a      	bne.n	80035e6 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035d4:	461a      	mov	r2, r3
 80035d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9d9 	bl	8003990 <HAL_PCD_EP_DB_Receive>
 80035de:	4603      	mov	r3, r0
 80035e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80035e4:	e077      	b.n	80036d6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003626:	b29b      	uxth	r3, r3
 8003628:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d024      	beq.n	800368e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800364c:	b29b      	uxth	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	3302      	adds	r3, #2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003670:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02e      	beq.n	80036d6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	6959      	ldr	r1, [r3, #20]
 8003680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003682:	891a      	ldrh	r2, [r3, #8]
 8003684:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003688:	f003 ff80 	bl	800758c <USB_ReadPMA>
 800368c:	e023      	b.n	80036d6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	3306      	adds	r3, #6
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80036ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c8:	6959      	ldr	r1, [r3, #20]
 80036ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036cc:	895a      	ldrh	r2, [r3, #10]
 80036ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036d2:	f003 ff5b 	bl	800758c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036de:	441a      	add	r2, r3
 80036e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80036e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036ec:	441a      	add	r2, r3
 80036ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <PCD_EP_ISR_Handler+0x51c>
 80036fa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80036fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d206      	bcs.n	8003714 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f005 ff81 	bl	8009614 <HAL_PCD_DataOutStageCallback>
 8003712:	e005      	b.n	8003720 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800371a:	4618      	mov	r0, r3
 800371c:	f002 fa02 	bl	8005b24 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003720:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8123 	beq.w	8003974 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800372e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	2b01      	cmp	r3, #1
 8003784:	f040 80a2 	bne.w	80038cc <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003790:	7b1b      	ldrb	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8093 	beq.w	80038be <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003798:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d046      	beq.n	8003832 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d126      	bne.n	80037fa <PCD_EP_ISR_Handler+0x610>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	4413      	add	r3, r2
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
 80037c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	011a      	lsls	r2, r3, #4
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	4413      	add	r3, r2
 80037ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037de:	b29a      	uxth	r2, r3
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	e061      	b.n	80038be <PCD_EP_ISR_Handler+0x6d4>
 80037fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fc:	785b      	ldrb	r3, [r3, #1]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d15d      	bne.n	80038be <PCD_EP_ISR_Handler+0x6d4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	4413      	add	r3, r2
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	011a      	lsls	r2, r3, #4
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	4413      	add	r3, r2
 8003824:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2200      	movs	r2, #0
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	e045      	b.n	80038be <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d126      	bne.n	800388e <PCD_EP_ISR_Handler+0x6a4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	4413      	add	r3, r2
 8003856:	637b      	str	r3, [r7, #52]	; 0x34
 8003858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	011a      	lsls	r2, r3, #4
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	4413      	add	r3, r2
 8003862:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003866:	633b      	str	r3, [r7, #48]	; 0x30
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003872:	b29a      	uxth	r2, r3
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003886:	b29a      	uxth	r2, r3
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	e017      	b.n	80038be <PCD_EP_ISR_Handler+0x6d4>
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d113      	bne.n	80038be <PCD_EP_ISR_Handler+0x6d4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	4413      	add	r3, r2
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	011a      	lsls	r2, r3, #4
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	4413      	add	r3, r2
 80038b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	2200      	movs	r2, #0
 80038bc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f005 fec0 	bl	800964a <HAL_PCD_DataInStageCallback>
 80038ca:	e053      	b.n	8003974 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80038cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d146      	bne.n	8003966 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	3302      	adds	r3, #2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003900:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800390c:	429a      	cmp	r2, r3
 800390e:	d907      	bls.n	8003920 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003918:	1ad2      	subs	r2, r2, r3
 800391a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391c:	619a      	str	r2, [r3, #24]
 800391e:	e002      	b.n	8003926 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003922:	2200      	movs	r2, #0
 8003924:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800392e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f005 fe88 	bl	800964a <HAL_PCD_DataInStageCallback>
 800393a:	e01b      	b.n	8003974 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003944:	441a      	add	r2, r3
 8003946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003948:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800394a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003952:	441a      	add	r2, r3
 8003954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003956:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800395e:	4618      	mov	r0, r3
 8003960:	f002 f8e0 	bl	8005b24 <USB_EPStartXfer>
 8003964:	e006      	b.n	8003974 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003966:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800396a:	461a      	mov	r2, r3
 800396c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f91b 	bl	8003baa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800397c:	b29b      	uxth	r3, r3
 800397e:	b21b      	sxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	f6ff ac37 	blt.w	80031f4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3758      	adds	r7, #88	; 0x58
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d07e      	beq.n	8003aa6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	3302      	adds	r3, #2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	8b7b      	ldrh	r3, [r7, #26]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d306      	bcc.n	80039ea <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	8b7b      	ldrh	r3, [r7, #26]
 80039e2:	1ad2      	subs	r2, r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	619a      	str	r2, [r3, #24]
 80039e8:	e002      	b.n	80039f0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d123      	bne.n	8003a40 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	833b      	strh	r3, [r7, #24]
 8003a14:	8b3b      	ldrh	r3, [r7, #24]
 8003a16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a1a:	833b      	strh	r3, [r7, #24]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	8b3b      	ldrh	r3, [r7, #24]
 8003a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01f      	beq.n	8003a8a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	82fb      	strh	r3, [r7, #22]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	8afb      	ldrh	r3, [r7, #22]
 8003a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a8a:	8b7b      	ldrh	r3, [r7, #26]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8087 	beq.w	8003ba0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6959      	ldr	r1, [r3, #20]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	891a      	ldrh	r2, [r3, #8]
 8003a9e:	8b7b      	ldrh	r3, [r7, #26]
 8003aa0:	f003 fd74 	bl	800758c <USB_ReadPMA>
 8003aa4:	e07c      	b.n	8003ba0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3306      	adds	r3, #6
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ace:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	8b7b      	ldrh	r3, [r7, #26]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d306      	bcc.n	8003ae8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	8b7b      	ldrh	r3, [r7, #26]
 8003ae0:	1ad2      	subs	r2, r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	619a      	str	r2, [r3, #24]
 8003ae6:	e002      	b.n	8003aee <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d123      	bne.n	8003b3e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b10:	83fb      	strh	r3, [r7, #30]
 8003b12:	8bfb      	ldrh	r3, [r7, #30]
 8003b14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b18:	83fb      	strh	r3, [r7, #30]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	441a      	add	r2, r3
 8003b28:	8bfb      	ldrh	r3, [r7, #30]
 8003b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11f      	bne.n	8003b88 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	83bb      	strh	r3, [r7, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	441a      	add	r2, r3
 8003b72:	8bbb      	ldrh	r3, [r7, #28]
 8003b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b88:	8b7b      	ldrh	r3, [r7, #26]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6959      	ldr	r1, [r3, #20]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	895a      	ldrh	r2, [r3, #10]
 8003b9a:	8b7b      	ldrh	r3, [r7, #26]
 8003b9c:	f003 fcf6 	bl	800758c <USB_ReadPMA>
    }
  }

  return count;
 8003ba0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b0a4      	sub	sp, #144	; 0x90
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 81dd 	beq.w	8003f7e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d907      	bls.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c04:	1ad2      	subs	r2, r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	619a      	str	r2, [r3, #24]
 8003c0a:	e002      	b.n	8003c12 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 80b9 	bne.w	8003d8e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d126      	bne.n	8003c72 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	4413      	add	r3, r2
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	011a      	lsls	r2, r3, #4
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	4413      	add	r3, r2
 8003c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e01a      	b.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d116      	bne.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	4413      	add	r3, r2
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	011a      	lsls	r2, r3, #4
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d126      	bne.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e017      	b.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d113      	bne.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	4413      	add	r3, r2
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	011a      	lsls	r2, r3, #4
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	4413      	add	r3, r2
 8003d28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2200      	movs	r2, #0
 8003d32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f005 fc85 	bl	800964a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 82fc 	beq.w	8004344 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	82fb      	strh	r3, [r7, #22]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	8afb      	ldrh	r3, [r7, #22]
 8003d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	8013      	strh	r3, [r2, #0]
 8003d8c:	e2da      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d021      	beq.n	8003ddc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	f040 82ae 	bne.w	8004344 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003df0:	441a      	add	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003dfe:	441a      	add	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d30b      	bcc.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e20:	1ad2      	subs	r2, r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	621a      	str	r2, [r3, #32]
 8003e26:	e017      	b.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e40:	e00a      	b.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d165      	bne.n	8003f2c <HAL_PCD_EP_DB_Transmit+0x382>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	4413      	add	r3, r2
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	011a      	lsls	r2, r3, #4
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e80:	4413      	add	r3, r2
 8003e82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e9e:	d91d      	bls.n	8003edc <HAL_PCD_EP_DB_Transmit+0x332>
 8003ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <HAL_PCD_EP_DB_Transmit+0x310>
 8003eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	e044      	b.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <HAL_PCD_EP_DB_Transmit+0x350>
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	801a      	strh	r2, [r3, #0]
 8003ef8:	e035      	b.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	3301      	adds	r3, #1
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	4313      	orrs	r3, r2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	e01c      	b.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d118      	bne.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f48:	4413      	add	r3, r2
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	011a      	lsls	r2, r3, #4
 8003f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f64:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6959      	ldr	r1, [r3, #20]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	891a      	ldrh	r2, [r3, #8]
 8003f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f003 fac3 	bl	8007502 <USB_WritePMA>
 8003f7c:	e1e2      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	3306      	adds	r3, #6
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d307      	bcc.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fbe:	1ad2      	subs	r2, r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	619a      	str	r2, [r3, #24]
 8003fc4:	e002      	b.n	8003fcc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f040 80c0 	bne.w	8004156 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d126      	bne.n	800402c <HAL_PCD_EP_DB_Transmit+0x482>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff2:	4413      	add	r3, r2
 8003ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	011a      	lsls	r2, r3, #4
 8003ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ffe:	4413      	add	r3, r2
 8004000:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004004:	67bb      	str	r3, [r7, #120]	; 0x78
 8004006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004010:	b29a      	uxth	r2, r3
 8004012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004024:	b29a      	uxth	r2, r3
 8004026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	e01a      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d116      	bne.n	8004062 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	667b      	str	r3, [r7, #100]	; 0x64
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004048:	4413      	add	r3, r2
 800404a:	667b      	str	r3, [r7, #100]	; 0x64
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	011a      	lsls	r2, r3, #4
 8004052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004054:	4413      	add	r3, r2
 8004056:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800405a:	663b      	str	r3, [r7, #96]	; 0x60
 800405c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405e:	2200      	movs	r2, #0
 8004060:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	677b      	str	r3, [r7, #116]	; 0x74
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d12b      	bne.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407e:	b29b      	uxth	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004084:	4413      	add	r3, r2
 8004086:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	011a      	lsls	r2, r3, #4
 800408e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004090:	4413      	add	r3, r2
 8004092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800409a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040be:	b29a      	uxth	r2, r3
 80040c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e017      	b.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d113      	bne.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d8:	b29b      	uxth	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040de:	4413      	add	r3, r2
 80040e0:	677b      	str	r3, [r7, #116]	; 0x74
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	011a      	lsls	r2, r3, #4
 80040e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ea:	4413      	add	r3, r2
 80040ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040f0:	673b      	str	r3, [r7, #112]	; 0x70
 80040f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f4:	2200      	movs	r2, #0
 80040f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f005 faa3 	bl	800964a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 811a 	bne.w	8004344 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800414c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004150:	b29b      	uxth	r3, r3
 8004152:	8013      	strh	r3, [r2, #0]
 8004154:	e0f6      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d121      	bne.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800419c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	f040 80ca 	bne.w	8004344 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041b8:	441a      	add	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041c6:	441a      	add	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6a1a      	ldr	r2, [r3, #32]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d30b      	bcc.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e8:	1ad2      	subs	r2, r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	621a      	str	r2, [r3, #32]
 80041ee:	e017      	b.n	8004220 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80041f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004208:	e00a      	b.n	8004220 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2200      	movs	r2, #0
 8004216:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	657b      	str	r3, [r7, #84]	; 0x54
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d165      	bne.n	80042fa <HAL_PCD_EP_DB_Transmit+0x750>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423c:	b29b      	uxth	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004242:	4413      	add	r3, r2
 8004244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	011a      	lsls	r2, r3, #4
 800424c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424e:	4413      	add	r3, r2
 8004250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004254:	65bb      	str	r3, [r7, #88]	; 0x58
 8004256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004260:	b29a      	uxth	r2, r3
 8004262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800426a:	2b3e      	cmp	r3, #62	; 0x3e
 800426c:	d91d      	bls.n	80042aa <HAL_PCD_EP_DB_Transmit+0x700>
 800426e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	66bb      	str	r3, [r7, #104]	; 0x68
 8004276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004284:	3b01      	subs	r3, #1
 8004286:	66bb      	str	r3, [r7, #104]	; 0x68
 8004288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29a      	uxth	r2, r3
 800428e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004290:	b29b      	uxth	r3, r3
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	b29b      	uxth	r3, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	b29b      	uxth	r3, r3
 800429a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	e041      	b.n	800432e <HAL_PCD_EP_DB_Transmit+0x784>
 80042aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80042b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	e032      	b.n	800432e <HAL_PCD_EP_DB_Transmit+0x784>
 80042c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x738>
 80042dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042de:	3301      	adds	r3, #1
 80042e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e019      	b.n	800432e <HAL_PCD_EP_DB_Transmit+0x784>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d115      	bne.n	800432e <HAL_PCD_EP_DB_Transmit+0x784>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004310:	4413      	add	r3, r2
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	011a      	lsls	r2, r3, #4
 800431a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800431c:	4413      	add	r3, r2
 800431e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004322:	653b      	str	r3, [r7, #80]	; 0x50
 8004324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004328:	b29a      	uxth	r2, r3
 800432a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800432c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6959      	ldr	r1, [r3, #20]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	895a      	ldrh	r2, [r3, #10]
 800433a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800433e:	b29b      	uxth	r3, r3
 8004340:	f003 f8df 	bl	8007502 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435e:	82bb      	strh	r3, [r7, #20]
 8004360:	8abb      	ldrh	r3, [r7, #20]
 8004362:	f083 0310 	eor.w	r3, r3, #16
 8004366:	82bb      	strh	r3, [r7, #20]
 8004368:	8abb      	ldrh	r3, [r7, #20]
 800436a:	f083 0320 	eor.w	r3, r3, #32
 800436e:	82bb      	strh	r3, [r7, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	8abb      	ldrh	r3, [r7, #20]
 8004380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3790      	adds	r7, #144	; 0x90
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	817b      	strh	r3, [r7, #10]
 80043ac:	4613      	mov	r3, r2
 80043ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	897b      	ldrh	r3, [r7, #10]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e009      	b.n	80043e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043d4:	897a      	ldrh	r2, [r7, #10]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043e8:	893b      	ldrh	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2200      	movs	r2, #0
 80043f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	80da      	strh	r2, [r3, #6]
 80043fc:	e00b      	b.n	8004416 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2201      	movs	r2, #1
 8004402:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	b29a      	uxth	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0c1b      	lsrs	r3, r3, #16
 8004410:	b29a      	uxth	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
	...

08004424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e272      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8087 	beq.w	8004552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004444:	4b92      	ldr	r3, [pc, #584]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b04      	cmp	r3, #4
 800444e:	d00c      	beq.n	800446a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004450:	4b8f      	ldr	r3, [pc, #572]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d112      	bne.n	8004482 <HAL_RCC_OscConfig+0x5e>
 800445c:	4b8c      	ldr	r3, [pc, #560]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d10b      	bne.n	8004482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446a:	4b89      	ldr	r3, [pc, #548]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d06c      	beq.n	8004550 <HAL_RCC_OscConfig+0x12c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d168      	bne.n	8004550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e24c      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x76>
 800448c:	4b80      	ldr	r3, [pc, #512]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a7f      	ldr	r2, [pc, #508]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 8004492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e02e      	b.n	80044f8 <HAL_RCC_OscConfig+0xd4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0x98>
 80044a2:	4b7b      	ldr	r3, [pc, #492]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a7a      	ldr	r2, [pc, #488]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b78      	ldr	r3, [pc, #480]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a77      	ldr	r2, [pc, #476]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e01d      	b.n	80044f8 <HAL_RCC_OscConfig+0xd4>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0xbc>
 80044c6:	4b72      	ldr	r3, [pc, #456]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a71      	ldr	r2, [pc, #452]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b6f      	ldr	r3, [pc, #444]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6e      	ldr	r2, [pc, #440]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0xd4>
 80044e0:	4b6b      	ldr	r3, [pc, #428]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6a      	ldr	r2, [pc, #424]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b68      	ldr	r3, [pc, #416]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a67      	ldr	r2, [pc, #412]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fd f9c8 	bl	8001894 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fd f9c4 	bl	8001894 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e200      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	4b5d      	ldr	r3, [pc, #372]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0xe4>
 8004526:	e014      	b.n	8004552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd f9b4 	bl	8001894 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fd f9b0 	bl	8001894 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e1ec      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004542:	4b53      	ldr	r3, [pc, #332]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x10c>
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d063      	beq.n	8004626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800455e:	4b4c      	ldr	r3, [pc, #304]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800456a:	4b49      	ldr	r3, [pc, #292]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d11c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x18c>
 8004576:	4b46      	ldr	r3, [pc, #280]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d116      	bne.n	80045b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	4b43      	ldr	r3, [pc, #268]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_RCC_OscConfig+0x176>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e1c0      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459a:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4939      	ldr	r1, [pc, #228]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	e03a      	b.n	8004626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b8:	4b36      	ldr	r3, [pc, #216]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7fd f969 	bl	8001894 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c6:	f7fd f965 	bl	8001894 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e1a1      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d8:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e4:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4927      	ldr	r1, [pc, #156]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]
 80045f8:	e015      	b.n	8004626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fa:	4b26      	ldr	r3, [pc, #152]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fd f948 	bl	8001894 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004608:	f7fd f944 	bl	8001894 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e180      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d03a      	beq.n	80046a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d019      	beq.n	800466e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <HAL_RCC_OscConfig+0x274>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004640:	f7fd f928 	bl	8001894 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004648:	f7fd f924 	bl	8001894 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e160      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <HAL_RCC_OscConfig+0x26c>)
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004666:	2001      	movs	r0, #1
 8004668:	f000 faba 	bl	8004be0 <RCC_Delay>
 800466c:	e01c      	b.n	80046a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCC_OscConfig+0x274>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004674:	f7fd f90e 	bl	8001894 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467a:	e00f      	b.n	800469c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467c:	f7fd f90a 	bl	8001894 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d908      	bls.n	800469c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e146      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	42420000 	.word	0x42420000
 8004698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469c:	4b92      	ldr	r3, [pc, #584]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e9      	bne.n	800467c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80a6 	beq.w	8004802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ba:	4b8b      	ldr	r3, [pc, #556]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10d      	bne.n	80046e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c6:	4b88      	ldr	r3, [pc, #544]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	4a87      	ldr	r2, [pc, #540]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d0:	61d3      	str	r3, [r2, #28]
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e2:	4b82      	ldr	r3, [pc, #520]	; (80048ec <HAL_RCC_OscConfig+0x4c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d118      	bne.n	8004720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ee:	4b7f      	ldr	r3, [pc, #508]	; (80048ec <HAL_RCC_OscConfig+0x4c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7e      	ldr	r2, [pc, #504]	; (80048ec <HAL_RCC_OscConfig+0x4c8>)
 80046f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fa:	f7fd f8cb 	bl	8001894 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004702:	f7fd f8c7 	bl	8001894 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b64      	cmp	r3, #100	; 0x64
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e103      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004714:	4b75      	ldr	r3, [pc, #468]	; (80048ec <HAL_RCC_OscConfig+0x4c8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d106      	bne.n	8004736 <HAL_RCC_OscConfig+0x312>
 8004728:	4b6f      	ldr	r3, [pc, #444]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	4a6e      	ldr	r2, [pc, #440]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6213      	str	r3, [r2, #32]
 8004734:	e02d      	b.n	8004792 <HAL_RCC_OscConfig+0x36e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x334>
 800473e:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4a69      	ldr	r2, [pc, #420]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	6213      	str	r3, [r2, #32]
 800474a:	4b67      	ldr	r3, [pc, #412]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	4a66      	ldr	r2, [pc, #408]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	6213      	str	r3, [r2, #32]
 8004756:	e01c      	b.n	8004792 <HAL_RCC_OscConfig+0x36e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d10c      	bne.n	800477a <HAL_RCC_OscConfig+0x356>
 8004760:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4a60      	ldr	r2, [pc, #384]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004766:	f043 0304 	orr.w	r3, r3, #4
 800476a:	6213      	str	r3, [r2, #32]
 800476c:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a5d      	ldr	r2, [pc, #372]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	e00b      	b.n	8004792 <HAL_RCC_OscConfig+0x36e>
 800477a:	4b5b      	ldr	r3, [pc, #364]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	4a5a      	ldr	r2, [pc, #360]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	f023 0301 	bic.w	r3, r3, #1
 8004784:	6213      	str	r3, [r2, #32]
 8004786:	4b58      	ldr	r3, [pc, #352]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a57      	ldr	r2, [pc, #348]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d015      	beq.n	80047c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479a:	f7fd f87b 	bl	8001894 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f7fd f877 	bl	8001894 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e0b1      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ee      	beq.n	80047a2 <HAL_RCC_OscConfig+0x37e>
 80047c4:	e014      	b.n	80047f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c6:	f7fd f865 	bl	8001894 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fd f861 	bl	8001894 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e09b      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e4:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ee      	bne.n	80047ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d105      	bne.n	8004802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f6:	4b3c      	ldr	r3, [pc, #240]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4a3b      	ldr	r2, [pc, #236]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8087 	beq.w	800491a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800480c:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d061      	beq.n	80048dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d146      	bne.n	80048ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <HAL_RCC_OscConfig+0x4cc>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fd f835 	bl	8001894 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fd f831 	bl	8001894 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e06d      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d108      	bne.n	8004868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4921      	ldr	r1, [pc, #132]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 8004864:	4313      	orrs	r3, r2
 8004866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a19      	ldr	r1, [r3, #32]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	430b      	orrs	r3, r1
 800487a:	491b      	ldr	r1, [pc, #108]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004880:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <HAL_RCC_OscConfig+0x4cc>)
 8004882:	2201      	movs	r2, #1
 8004884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fd f805 	bl	8001894 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488e:	f7fd f801 	bl	8001894 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e03d      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0x46a>
 80048ac:	e035      	b.n	800491a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <HAL_RCC_OscConfig+0x4cc>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fc ffee 	bl	8001894 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fc ffea 	bl	8001894 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e026      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x498>
 80048da:	e01e      	b.n	800491a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e019      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
 80048f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_OscConfig+0x500>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	429a      	cmp	r2, r3
 8004906:	d106      	bne.n	8004916 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000

08004928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0d0      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b6a      	ldr	r3, [pc, #424]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d910      	bls.n	800496c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b67      	ldr	r3, [pc, #412]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 0207 	bic.w	r2, r3, #7
 8004952:	4965      	ldr	r1, [pc, #404]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0b8      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004984:	4b59      	ldr	r3, [pc, #356]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a58      	ldr	r2, [pc, #352]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800498e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800499c:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4a52      	ldr	r2, [pc, #328]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	494d      	ldr	r1, [pc, #308]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d040      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d115      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d107      	bne.n	80049f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e6:	4b41      	ldr	r3, [pc, #260]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e073      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f6:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06b      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a06:	4b39      	ldr	r3, [pc, #228]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f023 0203 	bic.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4936      	ldr	r1, [pc, #216]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a18:	f7fc ff3c 	bl	8001894 <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fc ff38 	bl	8001894 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e053      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 020c 	and.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d1eb      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d210      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 0207 	bic.w	r2, r3, #7
 8004a5e:	4922      	ldr	r1, [pc, #136]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e032      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4916      	ldr	r1, [pc, #88]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	490e      	ldr	r1, [pc, #56]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ab6:	f000 f821 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	490a      	ldr	r1, [pc, #40]	; (8004af0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac8:	5ccb      	ldrb	r3, [r1, r3]
 8004aca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <HAL_RCC_ClockConfig+0x1cc>)
 8004ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_ClockConfig+0x1d0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fc fe9a 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40022000 	.word	0x40022000
 8004aec:	40021000 	.word	0x40021000
 8004af0:	0800ca14 	.word	0x0800ca14
 8004af4:	20000000 	.word	0x20000000
 8004af8:	20000004 	.word	0x20000004

08004afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b16:	4b1e      	ldr	r3, [pc, #120]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x30>
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x36>
 8004b2a:	e027      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b2e:	613b      	str	r3, [r7, #16]
      break;
 8004b30:	e027      	b.n	8004b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	0c9b      	lsrs	r3, r3, #18
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0c5b      	lsrs	r3, r3, #17
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b56:	5cd3      	ldrb	r3, [r2, r3]
 8004b58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a0d      	ldr	r2, [pc, #52]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b5e:	fb03 f202 	mul.w	r2, r3, r2
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e004      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	613b      	str	r3, [r7, #16]
      break;
 8004b7a:	e002      	b.n	8004b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b7e:	613b      	str	r3, [r7, #16]
      break;
 8004b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b82:	693b      	ldr	r3, [r7, #16]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
 8004b94:	007a1200 	.word	0x007a1200
 8004b98:	0800ca2c 	.word	0x0800ca2c
 8004b9c:	0800ca3c 	.word	0x0800ca3c
 8004ba0:	003d0900 	.word	0x003d0900

08004ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba8:	4b02      	ldr	r3, [pc, #8]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	20000000 	.word	0x20000000

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bbc:	f7ff fff2 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	0adb      	lsrs	r3, r3, #11
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	0800ca24 	.word	0x0800ca24

08004be0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <RCC_Delay+0x34>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <RCC_Delay+0x38>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0a5b      	lsrs	r3, r3, #9
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bfc:	bf00      	nop
  }
  while (Delay --);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1e5a      	subs	r2, r3, #1
 8004c02:	60fa      	str	r2, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f9      	bne.n	8004bfc <RCC_Delay+0x1c>
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	20000000 	.word	0x20000000
 8004c18:	10624dd3 	.word	0x10624dd3

08004c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d07d      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10d      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c48:	4b4c      	ldr	r3, [pc, #304]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	4a4b      	ldr	r2, [pc, #300]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c52:	61d3      	str	r3, [r2, #28]
 8004c54:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c64:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d118      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c70:	4b43      	ldr	r3, [pc, #268]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a42      	ldr	r2, [pc, #264]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7c:	f7fc fe0a 	bl	8001894 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c84:	f7fc fe06 	bl	8001894 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	; 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e06d      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	4b3a      	ldr	r3, [pc, #232]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca2:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004caa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d02e      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d027      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc0:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cca:	4b2e      	ldr	r3, [pc, #184]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd0:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cd6:	4a29      	ldr	r2, [pc, #164]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d014      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fc fdd5 	bl	8001894 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fc fdd1 	bl	8001894 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e036      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0ee      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4917      	ldr	r1, [pc, #92]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	490b      	ldr	r1, [pc, #44]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4904      	ldr	r1, [pc, #16]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40007000 	.word	0x40007000
 8004d84:	42420440 	.word	0x42420440

08004d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	2300      	movs	r3, #0
 8004da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d00a      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	f200 808a 	bhi.w	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d045      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d075      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004dbe:	e082      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004dc0:	4b46      	ldr	r3, [pc, #280]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004dc6:	4b45      	ldr	r3, [pc, #276]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d07b      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0c9b      	lsrs	r3, r3, #18
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004ddc:	5cd3      	ldrb	r3, [r2, r3]
 8004dde:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d015      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dea:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	0c5b      	lsrs	r3, r3, #17
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004df6:	5cd3      	ldrb	r3, [r2, r3]
 8004df8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e04:	4a38      	ldr	r2, [pc, #224]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	e004      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4a34      	ldr	r2, [pc, #208]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e20:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	61bb      	str	r3, [r7, #24]
      break;
 8004e32:	e04a      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	61bb      	str	r3, [r7, #24]
      break;
 8004e42:	e042      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e44:	4b25      	ldr	r3, [pc, #148]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e54:	d108      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	e01f      	b.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e72:	d109      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004e80:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e00f      	b.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e92:	d11c      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004e94:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d016      	beq.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ea0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ea4:	61bb      	str	r3, [r7, #24]
      break;
 8004ea6:	e012      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ea8:	e011      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eaa:	f7ff fe85 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	0b9b      	lsrs	r3, r3, #14
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec2:	61bb      	str	r3, [r7, #24]
      break;
 8004ec4:	e004      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ece:	bf00      	nop
    }
  }
  return (frequency);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	0800ca40 	.word	0x0800ca40
 8004ee4:	0800ca50 	.word	0x0800ca50
 8004ee8:	007a1200 	.word	0x007a1200
 8004eec:	003d0900 	.word	0x003d0900
 8004ef0:	aaaaaaab 	.word	0xaaaaaaab

08004ef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	f107 0014 	add.w	r0, r7, #20
 8004f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	b004      	add	sp, #16
 8004f12:	4770      	bx	lr

08004f14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4013      	ands	r3, r2
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr

08004f74 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	f107 0014 	add.w	r0, r7, #20
 8004f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	b004      	add	sp, #16
 8004fca:	4770      	bx	lr

08004fcc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b09d      	sub	sp, #116	; 0x74
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	78db      	ldrb	r3, [r3, #3]
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d81f      	bhi.n	800503e <USB_ActivateEndpoint+0x72>
 8004ffe:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <USB_ActivateEndpoint+0x38>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	08005015 	.word	0x08005015
 8005008:	08005031 	.word	0x08005031
 800500c:	08005047 	.word	0x08005047
 8005010:	08005023 	.word	0x08005023
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005014:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800501c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005020:	e012      	b.n	8005048 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005022:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005026:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800502a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800502e:	e00b      	b.n	8005048 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005030:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005034:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005038:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800503c:	e004      	b.n	8005048 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005044:	e000      	b.n	8005048 <USB_ActivateEndpoint+0x7c>
      break;
 8005046:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005080:	b29a      	uxth	r2, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	4313      	orrs	r3, r2
 800508a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	7b1b      	ldrb	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 8178 	bne.w	80053aa <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8084 	beq.w	80051cc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	4413      	add	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	011a      	lsls	r2, r3, #4
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	88db      	ldrh	r3, [r3, #6]
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	827b      	strh	r3, [r7, #18]
 8005106:	8a7b      	ldrh	r3, [r7, #18]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01b      	beq.n	8005148 <USB_ActivateEndpoint+0x17c>
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	823b      	strh	r3, [r7, #16]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	8a3b      	ldrh	r3, [r7, #16]
 8005134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005144:	b29b      	uxth	r3, r3
 8005146:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	78db      	ldrb	r3, [r3, #3]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d020      	beq.n	8005192 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005166:	81bb      	strh	r3, [r7, #12]
 8005168:	89bb      	ldrh	r3, [r7, #12]
 800516a:	f083 0320 	eor.w	r3, r3, #32
 800516e:	81bb      	strh	r3, [r7, #12]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	89bb      	ldrh	r3, [r7, #12]
 800517c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518c:	b29b      	uxth	r3, r3
 800518e:	8013      	strh	r3, [r2, #0]
 8005190:	e2d5      	b.n	800573e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a8:	81fb      	strh	r3, [r7, #14]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	89fb      	ldrh	r3, [r7, #14]
 80051b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]
 80051ca:	e2b8      	b.n	800573e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	633b      	str	r3, [r7, #48]	; 0x30
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	4413      	add	r3, r2
 80051de:	633b      	str	r3, [r7, #48]	; 0x30
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	011a      	lsls	r2, r3, #4
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	88db      	ldrh	r3, [r3, #6]
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	4413      	add	r3, r2
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	011a      	lsls	r2, r3, #4
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	4413      	add	r3, r2
 800521e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800522e:	b29a      	uxth	r2, r3
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b3e      	cmp	r3, #62	; 0x3e
 800523a:	d91d      	bls.n	8005278 <USB_ActivateEndpoint+0x2ac>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	66bb      	str	r3, [r7, #104]	; 0x68
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <USB_ActivateEndpoint+0x28a>
 8005250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005252:	3b01      	subs	r3, #1
 8005254:	66bb      	str	r3, [r7, #104]	; 0x68
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29a      	uxth	r2, r3
 800525c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525e:	b29b      	uxth	r3, r3
 8005260:	029b      	lsls	r3, r3, #10
 8005262:	b29b      	uxth	r3, r3
 8005264:	4313      	orrs	r3, r2
 8005266:	b29b      	uxth	r3, r3
 8005268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005270:	b29a      	uxth	r2, r3
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	e026      	b.n	80052c6 <USB_ActivateEndpoint+0x2fa>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <USB_ActivateEndpoint+0x2ca>
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528e:	b29a      	uxth	r2, r3
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e017      	b.n	80052c6 <USB_ActivateEndpoint+0x2fa>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	66bb      	str	r3, [r7, #104]	; 0x68
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <USB_ActivateEndpoint+0x2e4>
 80052aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052ac:	3301      	adds	r3, #1
 80052ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4313      	orrs	r3, r2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80052d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01b      	beq.n	8005316 <USB_ActivateEndpoint+0x34a>
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	843b      	strh	r3, [r7, #32]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	8c3b      	ldrh	r3, [r7, #32]
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d124      	bne.n	8005368 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	83bb      	strh	r3, [r7, #28]
 8005336:	8bbb      	ldrh	r3, [r7, #28]
 8005338:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800533c:	83bb      	strh	r3, [r7, #28]
 800533e:	8bbb      	ldrh	r3, [r7, #28]
 8005340:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005344:	83bb      	strh	r3, [r7, #28]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	8bbb      	ldrh	r3, [r7, #28]
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]
 8005366:	e1ea      	b.n	800573e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	83fb      	strh	r3, [r7, #30]
 8005380:	8bfb      	ldrh	r3, [r7, #30]
 8005382:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005386:	83fb      	strh	r3, [r7, #30]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	441a      	add	r2, r3
 8005392:	8bfb      	ldrh	r3, [r7, #30]
 8005394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	8013      	strh	r3, [r2, #0]
 80053a8:	e1c9      	b.n	800573e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	78db      	ldrb	r3, [r3, #3]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d11e      	bne.n	80053f0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80053e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	8013      	strh	r3, [r2, #0]
 80053ee:	e01d      	b.n	800542c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005428:	b29b      	uxth	r3, r3
 800542a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800543c:	4413      	add	r3, r2
 800543e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005448:	4413      	add	r3, r2
 800544a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	891b      	ldrh	r3, [r3, #8]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	b29b      	uxth	r3, r3
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	657b      	str	r3, [r7, #84]	; 0x54
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005470:	4413      	add	r3, r2
 8005472:	657b      	str	r3, [r7, #84]	; 0x54
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	011a      	lsls	r2, r3, #4
 800547a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547c:	4413      	add	r3, r2
 800547e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005482:	653b      	str	r3, [r7, #80]	; 0x50
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	895b      	ldrh	r3, [r3, #10]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005492:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 8093 	bne.w	80055c4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01b      	beq.n	80054f2 <USB_ActivateEndpoint+0x526>
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	441a      	add	r2, r3
 80054dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005500:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <USB_ActivateEndpoint+0x576>
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	873b      	strh	r3, [r7, #56]	; 0x38
 800555a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800555c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005560:	873b      	strh	r3, [r7, #56]	; 0x38
 8005562:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005564:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005568:	873b      	strh	r3, [r7, #56]	; 0x38
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	441a      	add	r2, r3
 8005574:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]
 80055c2:	e0bc      	b.n	800573e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80055d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01d      	beq.n	800561c <USB_ActivateEndpoint+0x650>
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	441a      	add	r2, r3
 8005604:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005618:	b29b      	uxth	r3, r3
 800561a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800562c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01d      	beq.n	8005674 <USB_ActivateEndpoint+0x6a8>
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005670:	b29b      	uxth	r3, r3
 8005672:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	78db      	ldrb	r3, [r3, #3]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d024      	beq.n	80056c6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005692:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005696:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800569a:	f083 0320 	eor.w	r3, r3, #32
 800569e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
 80056c4:	e01d      	b.n	8005702 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	441a      	add	r2, r3
 8005726:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800573e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005742:	4618      	mov	r0, r3
 8005744:	3774      	adds	r7, #116	; 0x74
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800574c:	b480      	push	{r7}
 800574e:	b08d      	sub	sp, #52	; 0x34
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	7b1b      	ldrb	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 808e 	bne.w	800587c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d044      	beq.n	80057f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	81bb      	strh	r3, [r7, #12]
 8005776:	89bb      	ldrh	r3, [r7, #12]
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <USB_DeactivateEndpoint+0x6c>
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	817b      	strh	r3, [r7, #10]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	897b      	ldrh	r3, [r7, #10]
 80057a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ce:	813b      	strh	r3, [r7, #8]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	893b      	ldrh	r3, [r7, #8]
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
 80057f0:	e192      	b.n	8005b18 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	827b      	strh	r3, [r7, #18]
 8005800:	8a7b      	ldrh	r3, [r7, #18]
 8005802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01b      	beq.n	8005842 <USB_DeactivateEndpoint+0xf6>
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	823b      	strh	r3, [r7, #16]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	8a3b      	ldrh	r3, [r7, #16]
 800582e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800583a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005858:	81fb      	strh	r3, [r7, #14]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	441a      	add	r2, r3
 8005864:	89fb      	ldrh	r3, [r7, #14]
 8005866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005876:	b29b      	uxth	r3, r3
 8005878:	8013      	strh	r3, [r2, #0]
 800587a:	e14d      	b.n	8005b18 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 80a5 	bne.w	80059d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	843b      	strh	r3, [r7, #32]
 8005894:	8c3b      	ldrh	r3, [r7, #32]
 8005896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01b      	beq.n	80058d6 <USB_DeactivateEndpoint+0x18a>
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b4:	83fb      	strh	r3, [r7, #30]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	441a      	add	r2, r3
 80058c0:	8bfb      	ldrh	r3, [r7, #30]
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	83bb      	strh	r3, [r7, #28]
 80058e4:	8bbb      	ldrh	r3, [r7, #28]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01b      	beq.n	8005926 <USB_DeactivateEndpoint+0x1da>
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005904:	837b      	strh	r3, [r7, #26]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	8b7b      	ldrh	r3, [r7, #26]
 8005912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005922:	b29b      	uxth	r3, r3
 8005924:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	833b      	strh	r3, [r7, #24]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	8b3b      	ldrh	r3, [r7, #24]
 800594a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	82fb      	strh	r3, [r7, #22]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	8afb      	ldrh	r3, [r7, #22]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	82bb      	strh	r3, [r7, #20]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	8abb      	ldrh	r3, [r7, #20]
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e0a3      	b.n	8005b18 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01b      	beq.n	8005a20 <USB_DeactivateEndpoint+0x2d4>
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01b      	beq.n	8005a70 <USB_DeactivateEndpoint+0x324>
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	441a      	add	r2, r3
 8005a92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	847b      	strh	r3, [r7, #34]	; 0x22
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3734      	adds	r7, #52	; 0x34
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b0c2      	sub	sp, #264	; 0x108
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b32:	6018      	str	r0, [r3, #0]
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	f040 86b7 	bne.w	80068be <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d908      	bls.n	8005b7e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b7c:	e007      	b.n	8005b8e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	7b1b      	ldrb	r3, [r3, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d13a      	bne.n	8005c14 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6959      	ldr	r1, [r3, #20]
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	88da      	ldrh	r2, [r3, #6]
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bc4:	6800      	ldr	r0, [r0, #0]
 8005bc6:	f001 fc9c 	bl	8007502 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011a      	lsls	r2, r3, #4
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	f000 be1f 	b.w	8006852 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	f040 8462 	bne.w	80064ea <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6a1a      	ldr	r2, [r3, #32]
 8005c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	f240 83df 	bls.w	8006402 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c94:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6a1a      	ldr	r2, [r3, #32]
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb0:	1ad2      	subs	r2, r2, r3
 8005cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 81c7 	beq.w	8006074 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8005cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d177      	bne.n	8005df2 <USB_EPStartXfer+0x2ce>
 8005d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	4413      	add	r3, r2
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	011a      	lsls	r2, r3, #4
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	4413      	add	r3, r2
 8005d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d52:	2b3e      	cmp	r3, #62	; 0x3e
 8005d54:	d921      	bls.n	8005d9a <USB_EPStartXfer+0x276>
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <USB_EPStartXfer+0x252>
 8005d6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d70:	3b01      	subs	r3, #1
 8005d72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e050      	b.n	8005e3c <USB_EPStartXfer+0x318>
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <USB_EPStartXfer+0x294>
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e041      	b.n	8005e3c <USB_EPStartXfer+0x318>
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <USB_EPStartXfer+0x2b4>
 8005dce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	029b      	lsls	r3, r3, #10
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4313      	orrs	r3, r2
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e024      	b.n	8005e3c <USB_EPStartXfer+0x318>
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d11c      	bne.n	8005e3c <USB_EPStartXfer+0x318>
 8005e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	4413      	add	r3, r2
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30
 8005e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	011a      	lsls	r2, r3, #4
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	895b      	ldrh	r3, [r3, #10]
 8005e48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6959      	ldr	r1, [r3, #20]
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e6a:	6800      	ldr	r0, [r0, #0]
 8005e6c:	f001 fb49 	bl	8007502 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e80:	441a      	add	r2, r3
 8005e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90f      	bls.n	8005eca <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	621a      	str	r2, [r3, #32]
 8005ec8:	e00e      	b.n	8005ee8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d177      	bne.n	8005fe8 <USB_EPStartXfer+0x4c4>
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	4413      	add	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	011a      	lsls	r2, r3, #4
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f48:	2b3e      	cmp	r3, #62	; 0x3e
 8005f4a:	d921      	bls.n	8005f90 <USB_EPStartXfer+0x46c>
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d104      	bne.n	8005f6c <USB_EPStartXfer+0x448>
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f66:	3b01      	subs	r3, #1
 8005f68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	801a      	strh	r2, [r3, #0]
 8005f8e:	e056      	b.n	800603e <USB_EPStartXfer+0x51a>
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <USB_EPStartXfer+0x48a>
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e047      	b.n	800603e <USB_EPStartXfer+0x51a>
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <USB_EPStartXfer+0x4aa>
 8005fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	029b      	lsls	r3, r3, #10
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	e02a      	b.n	800603e <USB_EPStartXfer+0x51a>
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d122      	bne.n	800603e <USB_EPStartXfer+0x51a>
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	623b      	str	r3, [r7, #32]
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	4413      	add	r3, r2
 800601a:	623b      	str	r3, [r7, #32]
 800601c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	011a      	lsls	r2, r3, #4
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	4413      	add	r3, r2
 800602e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006038:	b29a      	uxth	r2, r3
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800603e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	891b      	ldrh	r3, [r3, #8]
 800604a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6959      	ldr	r1, [r3, #20]
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605e:	b29b      	uxth	r3, r3
 8006060:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006064:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006068:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800606c:	6800      	ldr	r0, [r0, #0]
 800606e:	f001 fa48 	bl	8007502 <USB_WritePMA>
 8006072:	e3ee      	b.n	8006852 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d177      	bne.n	8006174 <USB_EPStartXfer+0x650>
 8006084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a4:	4413      	add	r3, r2
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	011a      	lsls	r2, r3, #4
 80060b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060be:	647b      	str	r3, [r7, #68]	; 0x44
 80060c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d4:	2b3e      	cmp	r3, #62	; 0x3e
 80060d6:	d921      	bls.n	800611c <USB_EPStartXfer+0x5f8>
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <USB_EPStartXfer+0x5d4>
 80060ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060f2:	3b01      	subs	r3, #1
 80060f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006102:	b29b      	uxth	r3, r3
 8006104:	029b      	lsls	r3, r3, #10
 8006106:	b29b      	uxth	r3, r3
 8006108:	4313      	orrs	r3, r2
 800610a:	b29b      	uxth	r3, r3
 800610c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006114:	b29a      	uxth	r2, r3
 8006116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e056      	b.n	80061ca <USB_EPStartXfer+0x6a6>
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <USB_EPStartXfer+0x616>
 8006124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e047      	b.n	80061ca <USB_EPStartXfer+0x6a6>
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613e:	085b      	lsrs	r3, r3, #1
 8006140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <USB_EPStartXfer+0x636>
 8006150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006154:	3301      	adds	r3, #1
 8006156:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800615a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29a      	uxth	r2, r3
 8006160:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006164:	b29b      	uxth	r3, r3
 8006166:	029b      	lsls	r3, r3, #10
 8006168:	b29b      	uxth	r3, r3
 800616a:	4313      	orrs	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	e02a      	b.n	80061ca <USB_EPStartXfer+0x6a6>
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d122      	bne.n	80061ca <USB_EPStartXfer+0x6a6>
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	653b      	str	r3, [r7, #80]	; 0x50
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	4413      	add	r3, r2
 80061a6:	653b      	str	r3, [r7, #80]	; 0x50
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011a      	lsls	r2, r3, #4
 80061b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b8:	4413      	add	r3, r2
 80061ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	891b      	ldrh	r3, [r3, #8]
 80061d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6959      	ldr	r1, [r3, #20]
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061f8:	6800      	ldr	r0, [r0, #0]
 80061fa:	f001 f982 	bl	8007502 <USB_WritePMA>
            ep->xfer_buff += len;
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620e:	441a      	add	r2, r3
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	429a      	cmp	r2, r3
 8006236:	d90f      	bls.n	8006258 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006248:	1ad2      	subs	r2, r2, r3
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	621a      	str	r2, [r3, #32]
 8006256:	e00e      	b.n	8006276 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2200      	movs	r2, #0
 8006274:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	643b      	str	r3, [r7, #64]	; 0x40
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d177      	bne.n	8006382 <USB_EPStartXfer+0x85e>
 8006292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	63bb      	str	r3, [r7, #56]	; 0x38
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	4413      	add	r3, r2
 80062b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	011a      	lsls	r2, r3, #4
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d8:	b29a      	uxth	r2, r3
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	2b3e      	cmp	r3, #62	; 0x3e
 80062e4:	d921      	bls.n	800632a <USB_EPStartXfer+0x806>
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <USB_EPStartXfer+0x7e2>
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	3b01      	subs	r3, #1
 8006302:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29a      	uxth	r2, r3
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	b29b      	uxth	r3, r3
 8006312:	029b      	lsls	r3, r3, #10
 8006314:	b29b      	uxth	r3, r3
 8006316:	4313      	orrs	r3, r2
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e050      	b.n	80063cc <USB_EPStartXfer+0x8a8>
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <USB_EPStartXfer+0x824>
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006340:	b29a      	uxth	r2, r3
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	e041      	b.n	80063cc <USB_EPStartXfer+0x8a8>
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <USB_EPStartXfer+0x844>
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006362:	3301      	adds	r3, #1
 8006364:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006372:	b29b      	uxth	r3, r3
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	b29b      	uxth	r3, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	b29a      	uxth	r2, r3
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e024      	b.n	80063cc <USB_EPStartXfer+0x8a8>
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d11c      	bne.n	80063cc <USB_EPStartXfer+0x8a8>
 8006392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a6:	4413      	add	r3, r2
 80063a8:	643b      	str	r3, [r7, #64]	; 0x40
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	011a      	lsls	r2, r3, #4
 80063b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	895b      	ldrh	r3, [r3, #10]
 80063d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6959      	ldr	r1, [r3, #20]
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063fa:	6800      	ldr	r0, [r0, #0]
 80063fc:	f001 f881 	bl	8007502 <USB_WritePMA>
 8006400:	e227      	b.n	8006852 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800645a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	b29b      	uxth	r3, r3
 800646c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800648e:	4413      	add	r3, r2
 8006490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	011a      	lsls	r2, r3, #4
 80064a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a2:	4413      	add	r3, r2
 80064a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80064aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	891b      	ldrh	r3, [r3, #8]
 80064c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6959      	ldr	r1, [r3, #20]
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064e2:	6800      	ldr	r0, [r0, #0]
 80064e4:	f001 f80d 	bl	8007502 <USB_WritePMA>
 80064e8:	e1b3      	b.n	8006852 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 80c6 	beq.w	80066bc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
 800653c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d177      	bne.n	800663c <USB_EPStartXfer+0xb18>
 800654c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	66bb      	str	r3, [r7, #104]	; 0x68
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800656c:	4413      	add	r3, r2
 800656e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006580:	4413      	add	r3, r2
 8006582:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006586:	667b      	str	r3, [r7, #100]	; 0x64
 8006588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006592:	b29a      	uxth	r2, r3
 8006594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659c:	2b3e      	cmp	r3, #62	; 0x3e
 800659e:	d921      	bls.n	80065e4 <USB_EPStartXfer+0xac0>
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	f003 031f 	and.w	r3, r3, #31
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <USB_EPStartXfer+0xa9c>
 80065b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065ba:	3b01      	subs	r3, #1
 80065bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	029b      	lsls	r3, r3, #10
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	4313      	orrs	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065dc:	b29a      	uxth	r2, r3
 80065de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e050      	b.n	8006686 <USB_EPStartXfer+0xb62>
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <USB_EPStartXfer+0xade>
 80065ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e041      	b.n	8006686 <USB_EPStartXfer+0xb62>
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d004      	beq.n	8006622 <USB_EPStartXfer+0xafe>
 8006618:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800661c:	3301      	adds	r3, #1
 800661e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29a      	uxth	r2, r3
 8006628:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800662c:	b29b      	uxth	r3, r3
 800662e:	029b      	lsls	r3, r3, #10
 8006630:	b29b      	uxth	r3, r3
 8006632:	4313      	orrs	r3, r2
 8006634:	b29a      	uxth	r2, r3
 8006636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e024      	b.n	8006686 <USB_EPStartXfer+0xb62>
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d11c      	bne.n	8006686 <USB_EPStartXfer+0xb62>
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006660:	4413      	add	r3, r2
 8006662:	673b      	str	r3, [r7, #112]	; 0x70
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	011a      	lsls	r2, r3, #4
 8006672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006674:	4413      	add	r3, r2
 8006676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800667a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006680:	b29a      	uxth	r2, r3
 8006682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006684:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	895b      	ldrh	r3, [r3, #10]
 8006692:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6959      	ldr	r1, [r3, #20]
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066b4:	6800      	ldr	r0, [r0, #0]
 80066b6:	f000 ff24 	bl	8007502 <USB_WritePMA>
 80066ba:	e0ca      	b.n	8006852 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d177      	bne.n	80067bc <USB_EPStartXfer+0xc98>
 80066cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066ec:	4413      	add	r3, r2
 80066ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	011a      	lsls	r2, r3, #4
 80066fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006700:	4413      	add	r3, r2
 8006702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006706:	67bb      	str	r3, [r7, #120]	; 0x78
 8006708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006712:	b29a      	uxth	r2, r3
 8006714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	2b3e      	cmp	r3, #62	; 0x3e
 800671e:	d921      	bls.n	8006764 <USB_EPStartXfer+0xc40>
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <USB_EPStartXfer+0xc1c>
 8006736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800673a:	3b01      	subs	r3, #1
 800673c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29a      	uxth	r2, r3
 8006746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29b      	uxth	r3, r3
 8006750:	4313      	orrs	r3, r2
 8006752:	b29b      	uxth	r3, r3
 8006754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675c:	b29a      	uxth	r2, r3
 800675e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e05c      	b.n	800681e <USB_EPStartXfer+0xcfa>
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <USB_EPStartXfer+0xc5e>
 800676c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677a:	b29a      	uxth	r2, r3
 800677c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e04d      	b.n	800681e <USB_EPStartXfer+0xcfa>
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <USB_EPStartXfer+0xc7e>
 8006798:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800679c:	3301      	adds	r3, #1
 800679e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	029b      	lsls	r3, r3, #10
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e030      	b.n	800681e <USB_EPStartXfer+0xcfa>
 80067bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d128      	bne.n	800681e <USB_EPStartXfer+0xcfa>
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067f0:	4413      	add	r3, r2
 80067f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	011a      	lsls	r2, r3, #4
 8006804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006808:	4413      	add	r3, r2
 800680a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800680e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006816:	b29a      	uxth	r2, r3
 8006818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800681c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800681e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	891b      	ldrh	r3, [r3, #8]
 800682a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6959      	ldr	r1, [r3, #20]
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683e:	b29b      	uxth	r3, r3
 8006840:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006844:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006848:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f000 fe58 	bl	8007502 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006878:	817b      	strh	r3, [r7, #10]
 800687a:	897b      	ldrh	r3, [r7, #10]
 800687c:	f083 0310 	eor.w	r3, r3, #16
 8006880:	817b      	strh	r3, [r7, #10]
 8006882:	897b      	ldrh	r3, [r7, #10]
 8006884:	f083 0320 	eor.w	r3, r3, #32
 8006888:	817b      	strh	r3, [r7, #10]
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	441a      	add	r2, r3
 80068a4:	897b      	ldrh	r3, [r7, #10]
 80068a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	8013      	strh	r3, [r2, #0]
 80068ba:	f000 bcde 	b.w	800727a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	7b1b      	ldrb	r3, [r3, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 80bb 	bne.w	8006a46 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d917      	bls.n	800691c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690c:	1ad2      	subs	r2, r2, r3
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	619a      	str	r2, [r3, #24]
 800691a:	e00e      	b.n	800693a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2200      	movs	r2, #0
 8006938:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800693a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800695e:	4413      	add	r3, r2
 8006960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	011a      	lsls	r2, r3, #4
 8006972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006976:	4413      	add	r3, r2
 8006978:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800697c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698c:	b29a      	uxth	r2, r3
 800698e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006992:	801a      	strh	r2, [r3, #0]
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006998:	2b3e      	cmp	r3, #62	; 0x3e
 800699a:	d924      	bls.n	80069e6 <USB_EPStartXfer+0xec2>
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <USB_EPStartXfer+0xe98>
 80069b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069b6:	3b01      	subs	r3, #1
 80069b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	029b      	lsls	r3, r3, #10
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	4313      	orrs	r3, r2
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069da:	b29a      	uxth	r2, r3
 80069dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069e0:	801a      	strh	r2, [r3, #0]
 80069e2:	f000 bc10 	b.w	8007206 <USB_EPStartXfer+0x16e2>
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10c      	bne.n	8006a08 <USB_EPStartXfer+0xee4>
 80069ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	e3fe      	b.n	8007206 <USB_EPStartXfer+0x16e2>
 8006a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <USB_EPStartXfer+0xf04>
 8006a1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a22:	3301      	adds	r3, #1
 8006a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	029b      	lsls	r3, r3, #10
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	e3df      	b.n	8007206 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	78db      	ldrb	r3, [r3, #3]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	f040 8218 	bne.w	8006e88 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f040 809d 	bne.w	8006ba4 <USB_EPStartXfer+0x1080>
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a8e:	4413      	add	r3, r2
 8006a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	011a      	lsls	r2, r3, #4
 8006aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ad2:	d92b      	bls.n	8006b2c <USB_EPStartXfer+0x1008>
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 031f 	and.w	r3, r3, #31
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <USB_EPStartXfer+0xfe0>
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	3b01      	subs	r3, #1
 8006b00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	029b      	lsls	r3, r3, #10
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	4313      	orrs	r3, r2
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	e070      	b.n	8006c0e <USB_EPStartXfer+0x10ea>
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10c      	bne.n	8006b56 <USB_EPStartXfer+0x1032>
 8006b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e05b      	b.n	8006c0e <USB_EPStartXfer+0x10ea>
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <USB_EPStartXfer+0x1062>
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b80:	3301      	adds	r3, #1
 8006b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e034      	b.n	8006c0e <USB_EPStartXfer+0x10ea>
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d12c      	bne.n	8006c0e <USB_EPStartXfer+0x10ea>
 8006bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bd8:	4413      	add	r3, r2
 8006bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	011a      	lsls	r2, r3, #4
 8006bec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c0c:	801a      	strh	r2, [r3, #0]
 8006c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f040 809d 	bne.w	8006d68 <USB_EPStartXfer+0x1244>
 8006c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c52:	4413      	add	r3, r2
 8006c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	011a      	lsls	r2, r3, #4
 8006c66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b3e      	cmp	r3, #62	; 0x3e
 8006c96:	d92b      	bls.n	8006cf0 <USB_EPStartXfer+0x11cc>
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <USB_EPStartXfer+0x11a4>
 8006cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	029b      	lsls	r3, r3, #10
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	e069      	b.n	8006dc4 <USB_EPStartXfer+0x12a0>
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10c      	bne.n	8006d1a <USB_EPStartXfer+0x11f6>
 8006d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	e054      	b.n	8006dc4 <USB_EPStartXfer+0x12a0>
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <USB_EPStartXfer+0x1226>
 8006d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d44:	3301      	adds	r3, #1
 8006d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	e02d      	b.n	8006dc4 <USB_EPStartXfer+0x12a0>
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d125      	bne.n	8006dc4 <USB_EPStartXfer+0x12a0>
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d8e:	4413      	add	r3, r2
 8006d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	011a      	lsls	r2, r3, #4
 8006da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006da6:	4413      	add	r3, r2
 8006da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dc2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8218 	beq.w	8007206 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006df6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d005      	beq.n	8006e0e <USB_EPStartXfer+0x12ea>
 8006e02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10d      	bne.n	8006e2a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 81f5 	bne.w	8007206 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f040 81ee 	bne.w	8007206 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e50:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]
 8006e86:	e1be      	b.n	8007206 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	78db      	ldrb	r3, [r3, #3]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	f040 81b4 	bne.w	8007202 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d917      	bls.n	8006ee6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	619a      	str	r2, [r3, #24]
 8006ee4:	e00e      	b.n	8006f04 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2200      	movs	r2, #0
 8006f02:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f040 8085 	bne.w	8007020 <USB_EPStartXfer+0x14fc>
 8006f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	011a      	lsls	r2, r3, #4
 8006f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f52:	4413      	add	r3, r2
 8006f54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f6e:	801a      	strh	r2, [r3, #0]
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f74:	2b3e      	cmp	r3, #62	; 0x3e
 8006f76:	d923      	bls.n	8006fc0 <USB_EPStartXfer+0x149c>
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <USB_EPStartXfer+0x1474>
 8006f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f92:	3b01      	subs	r3, #1
 8006f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	4313      	orrs	r3, r2
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e060      	b.n	8007082 <USB_EPStartXfer+0x155e>
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10c      	bne.n	8006fe2 <USB_EPStartXfer+0x14be>
 8006fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fde:	801a      	strh	r2, [r3, #0]
 8006fe0:	e04f      	b.n	8007082 <USB_EPStartXfer+0x155e>
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <USB_EPStartXfer+0x14de>
 8006ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29a      	uxth	r2, r3
 800700a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800700e:	b29b      	uxth	r3, r3
 8007010:	029b      	lsls	r3, r3, #10
 8007012:	b29b      	uxth	r3, r3
 8007014:	4313      	orrs	r3, r2
 8007016:	b29a      	uxth	r2, r3
 8007018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	e030      	b.n	8007082 <USB_EPStartXfer+0x155e>
 8007020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d128      	bne.n	8007082 <USB_EPStartXfer+0x155e>
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704c:	b29b      	uxth	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007054:	4413      	add	r3, r2
 8007056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	011a      	lsls	r2, r3, #4
 8007068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800706c:	4413      	add	r3, r2
 800706e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007072:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707a:	b29a      	uxth	r2, r3
 800707c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f040 8085 	bne.w	80071ac <USB_EPStartXfer+0x1688>
 80070a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070c6:	4413      	add	r3, r2
 80070c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	011a      	lsls	r2, r3, #4
 80070da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070de:	4413      	add	r3, r2
 80070e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007100:	2b3e      	cmp	r3, #62	; 0x3e
 8007102:	d923      	bls.n	800714c <USB_EPStartXfer+0x1628>
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <USB_EPStartXfer+0x1600>
 800711a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800711e:	3b01      	subs	r3, #1
 8007120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007124:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007130:	b29b      	uxth	r3, r3
 8007132:	029b      	lsls	r3, r3, #10
 8007134:	b29b      	uxth	r3, r3
 8007136:	4313      	orrs	r3, r2
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e05c      	b.n	8007206 <USB_EPStartXfer+0x16e2>
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10c      	bne.n	800716e <USB_EPStartXfer+0x164a>
 8007154:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e04b      	b.n	8007206 <USB_EPStartXfer+0x16e2>
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <USB_EPStartXfer+0x166a>
 8007184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007188:	3301      	adds	r3, #1
 800718a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800718e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800719a:	b29b      	uxth	r3, r3
 800719c:	029b      	lsls	r3, r3, #10
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4313      	orrs	r3, r2
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e02c      	b.n	8007206 <USB_EPStartXfer+0x16e2>
 80071ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	785b      	ldrb	r3, [r3, #1]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d124      	bne.n	8007206 <USB_EPStartXfer+0x16e2>
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071d2:	4413      	add	r3, r2
 80071d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	011a      	lsls	r2, r3, #4
 80071e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071ea:	4413      	add	r3, r2
 80071ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e001      	b.n	8007206 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e03a      	b.n	800727c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007230:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007234:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007238:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800723c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007240:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007244:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007286:	b480      	push	{r7}
 8007288:	b085      	sub	sp, #20
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d020      	beq.n	80072da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ae:	81bb      	strh	r3, [r7, #12]
 80072b0:	89bb      	ldrh	r3, [r7, #12]
 80072b2:	f083 0310 	eor.w	r3, r3, #16
 80072b6:	81bb      	strh	r3, [r7, #12]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	89bb      	ldrh	r3, [r7, #12]
 80072c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
 80072d8:	e01f      	b.n	800731a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	81fb      	strh	r3, [r7, #14]
 80072f2:	89fb      	ldrh	r3, [r7, #14]
 80072f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072f8:	81fb      	strh	r3, [r7, #14]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	441a      	add	r2, r3
 8007304:	89fb      	ldrh	r3, [r7, #14]
 8007306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	b29b      	uxth	r3, r3
 8007318:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007326:	b480      	push	{r7}
 8007328:	b087      	sub	sp, #28
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	7b1b      	ldrb	r3, [r3, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 809d 	bne.w	8007474 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d04c      	beq.n	80073dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	823b      	strh	r3, [r7, #16]
 8007350:	8a3b      	ldrh	r3, [r7, #16]
 8007352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01b      	beq.n	8007392 <USB_EPClearStall+0x6c>
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007370:	81fb      	strh	r3, [r7, #14]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	441a      	add	r2, r3
 800737c:	89fb      	ldrh	r3, [r7, #14]
 800737e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800738e:	b29b      	uxth	r3, r3
 8007390:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	78db      	ldrb	r3, [r3, #3]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d06c      	beq.n	8007474 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b0:	81bb      	strh	r3, [r7, #12]
 80073b2:	89bb      	ldrh	r3, [r7, #12]
 80073b4:	f083 0320 	eor.w	r3, r3, #32
 80073b8:	81bb      	strh	r3, [r7, #12]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	441a      	add	r2, r3
 80073c4:	89bb      	ldrh	r3, [r7, #12]
 80073c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	8013      	strh	r3, [r2, #0]
 80073da:	e04b      	b.n	8007474 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	82fb      	strh	r3, [r7, #22]
 80073ea:	8afb      	ldrh	r3, [r7, #22]
 80073ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <USB_EPClearStall+0x106>
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	82bb      	strh	r3, [r7, #20]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	441a      	add	r2, r3
 8007416:	8abb      	ldrh	r3, [r7, #20]
 8007418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007428:	b29b      	uxth	r3, r3
 800742a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800743e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007442:	827b      	strh	r3, [r7, #18]
 8007444:	8a7b      	ldrh	r3, [r7, #18]
 8007446:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800744a:	827b      	strh	r3, [r7, #18]
 800744c:	8a7b      	ldrh	r3, [r7, #18]
 800744e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007452:	827b      	strh	r3, [r7, #18]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	8a7b      	ldrh	r3, [r7, #18]
 8007460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	b29b      	uxth	r3, r3
 8007472:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2280      	movs	r2, #128	; 0x80
 8007496:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr

080074ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr

080074ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074dc:	b29b      	uxth	r3, r3
 80074de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074e0:	68fb      	ldr	r3, [r7, #12]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007502:	b480      	push	{r7}
 8007504:	b08b      	sub	sp, #44	; 0x2c
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	4611      	mov	r1, r2
 800750e:	461a      	mov	r2, r3
 8007510:	460b      	mov	r3, r1
 8007512:	80fb      	strh	r3, [r7, #6]
 8007514:	4613      	mov	r3, r2
 8007516:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007518:	88bb      	ldrh	r3, [r7, #4]
 800751a:	3301      	adds	r3, #1
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	005a      	lsls	r2, r3, #1
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007534:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
 800753a:	e01e      	b.n	800757a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	3301      	adds	r3, #1
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	b21a      	sxth	r2, r3
 800754c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007550:	4313      	orrs	r3, r2
 8007552:	b21b      	sxth	r3, r3
 8007554:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	8a7a      	ldrh	r2, [r7, #18]
 800755a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	3302      	adds	r3, #2
 8007560:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	3302      	adds	r3, #2
 8007566:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	3301      	adds	r3, #1
 800756c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	3301      	adds	r3, #1
 8007572:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	3b01      	subs	r3, #1
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1dd      	bne.n	800753c <USB_WritePMA+0x3a>
  }
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	372c      	adds	r7, #44	; 0x2c
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr

0800758c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800758c:	b480      	push	{r7}
 800758e:	b08b      	sub	sp, #44	; 0x2c
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4611      	mov	r1, r2
 8007598:	461a      	mov	r2, r3
 800759a:	460b      	mov	r3, r1
 800759c:	80fb      	strh	r3, [r7, #6]
 800759e:	4613      	mov	r3, r2
 80075a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075a2:	88bb      	ldrh	r3, [r7, #4]
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	005a      	lsls	r2, r3, #1
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
 80075c4:	e01b      	b.n	80075fe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	3302      	adds	r3, #2
 80075d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	3301      	adds	r3, #1
 80075f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	3302      	adds	r3, #2
 80075f6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	3b01      	subs	r3, #1
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e0      	bne.n	80075c6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007604:	88bb      	ldrh	r3, [r7, #4]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d007      	beq.n	8007620 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	701a      	strb	r2, [r3, #0]
  }
}
 8007620:	bf00      	nop
 8007622:	372c      	adds	r7, #44	; 0x2c
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7c1b      	ldrb	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d115      	bne.n	800766e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007646:	2202      	movs	r2, #2
 8007648:	2181      	movs	r1, #129	; 0x81
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f002 f8e1 	bl	8009812 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800765a:	2202      	movs	r2, #2
 800765c:	2101      	movs	r1, #1
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f002 f8d7 	bl	8009812 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800766c:	e012      	b.n	8007694 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800766e:	2340      	movs	r3, #64	; 0x40
 8007670:	2202      	movs	r2, #2
 8007672:	2181      	movs	r1, #129	; 0x81
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f002 f8cc 	bl	8009812 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007680:	2340      	movs	r3, #64	; 0x40
 8007682:	2202      	movs	r2, #2
 8007684:	2101      	movs	r1, #1
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f002 f8c3 	bl	8009812 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007694:	2308      	movs	r3, #8
 8007696:	2203      	movs	r2, #3
 8007698:	2182      	movs	r1, #130	; 0x82
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f002 f8b9 	bl	8009812 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80076aa:	f002 f9d9 	bl	8009a60 <USBD_static_malloc>
 80076ae:	4602      	mov	r2, r0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
 80076c4:	e026      	b.n	8007714 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7c1b      	ldrb	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d109      	bne.n	8007704 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076fa:	2101      	movs	r1, #1
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f002 f979 	bl	80099f4 <USBD_LL_PrepareReceive>
 8007702:	e007      	b.n	8007714 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800770a:	2340      	movs	r3, #64	; 0x40
 800770c:	2101      	movs	r1, #1
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f002 f970 	bl	80099f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800772e:	2181      	movs	r1, #129	; 0x81
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f002 f894 	bl	800985e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800773c:	2101      	movs	r1, #1
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f002 f88d 	bl	800985e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800774c:	2182      	movs	r1, #130	; 0x82
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f002 f885 	bl	800985e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00e      	beq.n	8007782 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007774:	4618      	mov	r0, r3
 8007776:	f002 f97f 	bl	8009a78 <USBD_static_free>
    pdev->pClassData = NULL;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d039      	beq.n	800782a <USBD_CDC_Setup+0x9e>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d17f      	bne.n	80078ba <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	88db      	ldrh	r3, [r3, #6]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d029      	beq.n	8007816 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b25b      	sxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da11      	bge.n	80077f0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80077d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	88d2      	ldrh	r2, [r2, #6]
 80077de:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077e0:	6939      	ldr	r1, [r7, #16]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	461a      	mov	r2, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fa0a 	bl	8008c02 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80077ee:	e06b      	b.n	80078c8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	785a      	ldrb	r2, [r3, #1]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007806:	6939      	ldr	r1, [r7, #16]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	461a      	mov	r2, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fa25 	bl	8008c5e <USBD_CtlPrepareRx>
      break;
 8007814:	e058      	b.n	80078c8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	7850      	ldrb	r0, [r2, #1]
 8007822:	2200      	movs	r2, #0
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	4798      	blx	r3
      break;
 8007828:	e04e      	b.n	80078c8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	2b0b      	cmp	r3, #11
 8007830:	d02e      	beq.n	8007890 <USBD_CDC_Setup+0x104>
 8007832:	2b0b      	cmp	r3, #11
 8007834:	dc38      	bgt.n	80078a8 <USBD_CDC_Setup+0x11c>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <USBD_CDC_Setup+0xb4>
 800783a:	2b0a      	cmp	r3, #10
 800783c:	d014      	beq.n	8007868 <USBD_CDC_Setup+0xdc>
 800783e:	e033      	b.n	80078a8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007846:	2b03      	cmp	r3, #3
 8007848:	d107      	bne.n	800785a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800784a:	f107 030c 	add.w	r3, r7, #12
 800784e:	2202      	movs	r2, #2
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f9d5 	bl	8008c02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007858:	e02e      	b.n	80078b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f966 	bl	8008b2e <USBD_CtlError>
            ret = USBD_FAIL;
 8007862:	2302      	movs	r3, #2
 8007864:	75fb      	strb	r3, [r7, #23]
          break;
 8007866:	e027      	b.n	80078b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786e:	2b03      	cmp	r3, #3
 8007870:	d107      	bne.n	8007882 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007872:	f107 030f 	add.w	r3, r7, #15
 8007876:	2201      	movs	r2, #1
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 f9c1 	bl	8008c02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007880:	e01a      	b.n	80078b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f952 	bl	8008b2e <USBD_CtlError>
            ret = USBD_FAIL;
 800788a:	2302      	movs	r3, #2
 800788c:	75fb      	strb	r3, [r7, #23]
          break;
 800788e:	e013      	b.n	80078b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007896:	2b03      	cmp	r3, #3
 8007898:	d00d      	beq.n	80078b6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f946 	bl	8008b2e <USBD_CtlError>
            ret = USBD_FAIL;
 80078a2:	2302      	movs	r3, #2
 80078a4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078a6:	e006      	b.n	80078b6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 f93f 	bl	8008b2e <USBD_CtlError>
          ret = USBD_FAIL;
 80078b0:	2302      	movs	r3, #2
 80078b2:	75fb      	strb	r3, [r7, #23]
          break;
 80078b4:	e000      	b.n	80078b8 <USBD_CDC_Setup+0x12c>
          break;
 80078b6:	bf00      	nop
      }
      break;
 80078b8:	e006      	b.n	80078c8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f936 	bl	8008b2e <USBD_CtlError>
      ret = USBD_FAIL;
 80078c2:	2302      	movs	r3, #2
 80078c4:	75fb      	strb	r3, [r7, #23]
      break;
 80078c6:	bf00      	nop
  }

  return ret;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d03a      	beq.n	800796e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	331c      	adds	r3, #28
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d029      	beq.n	8007962 <USBD_CDC_DataIn+0x90>
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	331c      	adds	r3, #28
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	78f9      	ldrb	r1, [r7, #3]
 8007922:	68b8      	ldr	r0, [r7, #8]
 8007924:	460b      	mov	r3, r1
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4403      	add	r3, r0
 800792e:	3338      	adds	r3, #56	; 0x38
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	fbb2 f1f3 	udiv	r1, r2, r3
 8007936:	fb01 f303 	mul.w	r3, r1, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d110      	bne.n	8007962 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	331c      	adds	r3, #28
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007954:	78f9      	ldrb	r1, [r7, #3]
 8007956:	2300      	movs	r3, #0
 8007958:	2200      	movs	r2, #0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f002 f827 	bl	80099ae <USBD_LL_Transmit>
 8007960:	e003      	b.n	800796a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	e000      	b.n	8007970 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800796e:	2302      	movs	r3, #2
  }
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f002 f852 	bl	8009a3a <USBD_LL_GetRxDataSize>
 8007996:	4602      	mov	r2, r0
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00d      	beq.n	80079c4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079bc:	4611      	mov	r1, r2
 80079be:	4798      	blx	r3

    return USBD_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	e000      	b.n	80079c6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80079c4:	2302      	movs	r3, #2
  }
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d015      	beq.n	8007a14 <USBD_CDC_EP0_RxReady+0x46>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079ee:	2bff      	cmp	r3, #255	; 0xff
 80079f0:	d010      	beq.n	8007a14 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007a00:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a08:	b292      	uxth	r2, r2
 8007a0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	22ff      	movs	r2, #255	; 0xff
 8007a10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2243      	movs	r2, #67	; 0x43
 8007a2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a2e:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000094 	.word	0x20000094

08007a40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2243      	movs	r2, #67	; 0x43
 8007a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a4e:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000050 	.word	0x20000050

08007a60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2243      	movs	r2, #67	; 0x43
 8007a6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a6e:	4b03      	ldr	r3, [pc, #12]	; (8007a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	200000d8 	.word	0x200000d8

08007a80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	220a      	movs	r2, #10
 8007a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	2000000c 	.word	0x2000000c

08007aa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr

08007afe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b085      	sub	sp, #20
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01c      	beq.n	8007b78 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d115      	bne.n	8007b74 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2181      	movs	r1, #129	; 0x81
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 ff1f 	bl	80099ae <USBD_LL_Transmit>

      return USBD_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	e002      	b.n	8007b7a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d017      	beq.n	8007bcc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	7c1b      	ldrb	r3, [r3, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bae:	2101      	movs	r1, #1
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 ff1f 	bl	80099f4 <USBD_LL_PrepareReceive>
 8007bb6:	e007      	b.n	8007bc8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bbe:	2340      	movs	r3, #64	; 0x40
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 ff16 	bl	80099f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e000      	b.n	8007bce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007bcc:	2302      	movs	r3, #2
  }
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	4613      	mov	r3, r2
 8007be2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bea:	2302      	movs	r3, #2
 8007bec:	e01a      	b.n	8007c24 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	79fa      	ldrb	r2, [r7, #7]
 8007c1a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f001 fd83 	bl	8009728 <USBD_LL_Init>

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d006      	beq.n	8007c4e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e001      	b.n	8007c52 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr

08007c5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fdb8 	bl	80097dc <USBD_LL_Start>

  return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr

08007c8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c96:	2302      	movs	r3, #2
 8007c98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00c      	beq.n	8007cbe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3

  return USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fed8 	bl	8008ab6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d016      	beq.n	8007d58 <USBD_LL_SetupStage+0x6a>
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d81c      	bhi.n	8007d68 <USBD_LL_SetupStage+0x7a>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <USBD_LL_SetupStage+0x4a>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d008      	beq.n	8007d48 <USBD_LL_SetupStage+0x5a>
 8007d36:	e017      	b.n	8007d68 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f9cb 	bl	80080dc <USBD_StdDevReq>
      break;
 8007d46:	e01a      	b.n	8007d7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fa2d 	bl	80081b0 <USBD_StdItfReq>
      break;
 8007d56:	e012      	b.n	8007d7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa6d 	bl	8008240 <USBD_StdEPReq>
      break;
 8007d66:	e00a      	b.n	8007d7e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fd90 	bl	800989c <USBD_LL_StallEP>
      break;
 8007d7c:	bf00      	nop
  }

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	460b      	mov	r3, r1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d14b      	bne.n	8007e34 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007da2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d134      	bne.n	8007e18 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d919      	bls.n	8007dee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d203      	bcs.n	8007ddc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	e002      	b.n	8007de2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 ff57 	bl	8008c9a <USBD_CtlContinueRx>
 8007dec:	e038      	b.n	8007e60 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d105      	bne.n	8007e10 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 ff54 	bl	8008cbe <USBD_CtlSendStatus>
 8007e16:	e023      	b.n	8007e60 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	d11e      	bne.n	8007e60 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f001 fd35 	bl	800989c <USBD_LL_StallEP>
 8007e32:	e015      	b.n	8007e60 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00d      	beq.n	8007e5c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d108      	bne.n	8007e5c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	7afa      	ldrb	r2, [r7, #11]
 8007e54:	4611      	mov	r1, r2
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	4798      	blx	r3
 8007e5a:	e001      	b.n	8007e60 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e000      	b.n	8007e62 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b086      	sub	sp, #24
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	460b      	mov	r3, r1
 8007e74:	607a      	str	r2, [r7, #4]
 8007e76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d17f      	bne.n	8007f7e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3314      	adds	r3, #20
 8007e82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d15c      	bne.n	8007f48 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d915      	bls.n	8007ec6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 fec1 	bl	8008c3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f001 fd98 	bl	80099f4 <USBD_LL_PrepareReceive>
 8007ec4:	e04e      	b.n	8007f64 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	6912      	ldr	r2, [r2, #16]
 8007ece:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ed2:	fb01 f202 	mul.w	r2, r1, r2
 8007ed6:	1a9b      	subs	r3, r3, r2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d11c      	bne.n	8007f16 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d316      	bcc.n	8007f16 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d20f      	bcs.n	8007f16 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 fe9d 	bl	8008c3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f001 fd70 	bl	80099f4 <USBD_LL_PrepareReceive>
 8007f14:	e026      	b.n	8007f64 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d105      	bne.n	8007f38 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f38:	2180      	movs	r1, #128	; 0x80
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f001 fcae 	bl	800989c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fecf 	bl	8008ce4 <USBD_CtlReceiveStatus>
 8007f46:	e00d      	b.n	8007f64 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d004      	beq.n	8007f5c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f001 fc9c 	bl	800989c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d11d      	bne.n	8007faa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7ff fe81 	bl	8007c76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f7c:	e015      	b.n	8007faa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00d      	beq.n	8007fa6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d108      	bne.n	8007fa6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	7afa      	ldrb	r2, [r7, #11]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	4798      	blx	r3
 8007fa4:	e001      	b.n	8007faa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e000      	b.n	8007fac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fc25 	bl	8009812 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2240      	movs	r2, #64	; 0x40
 8007fd4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2180      	movs	r1, #128	; 0x80
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fc17 	bl	8009812 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2240      	movs	r2, #64	; 0x40
 8007fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d009      	beq.n	800802c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6852      	ldr	r2, [r2, #4]
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	4611      	mov	r1, r2
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
  }

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	78fa      	ldrb	r2, [r7, #3]
 8008046:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr

08008054 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2204      	movs	r2, #4
 800806c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr

0800807c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	2b04      	cmp	r3, #4
 800808c:	d105      	bne.n	800809a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d10b      	bne.n	80080d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	d005      	beq.n	8008102 <USBD_StdDevReq+0x26>
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d84f      	bhi.n	800819a <USBD_StdDevReq+0xbe>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <USBD_StdDevReq+0x36>
 80080fe:	2b20      	cmp	r3, #32
 8008100:	d14b      	bne.n	800819a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
      break;
 8008110:	e048      	b.n	80081a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	2b09      	cmp	r3, #9
 8008118:	d839      	bhi.n	800818e <USBD_StdDevReq+0xb2>
 800811a:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <USBD_StdDevReq+0x44>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	08008171 	.word	0x08008171
 8008124:	08008185 	.word	0x08008185
 8008128:	0800818f 	.word	0x0800818f
 800812c:	0800817b 	.word	0x0800817b
 8008130:	0800818f 	.word	0x0800818f
 8008134:	08008153 	.word	0x08008153
 8008138:	08008149 	.word	0x08008149
 800813c:	0800818f 	.word	0x0800818f
 8008140:	08008167 	.word	0x08008167
 8008144:	0800815d 	.word	0x0800815d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9dc 	bl	8008508 <USBD_GetDescriptor>
          break;
 8008150:	e022      	b.n	8008198 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fb3f 	bl	80087d8 <USBD_SetAddress>
          break;
 800815a:	e01d      	b.n	8008198 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb7e 	bl	8008860 <USBD_SetConfig>
          break;
 8008164:	e018      	b.n	8008198 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fc07 	bl	800897c <USBD_GetConfig>
          break;
 800816e:	e013      	b.n	8008198 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fc37 	bl	80089e6 <USBD_GetStatus>
          break;
 8008178:	e00e      	b.n	8008198 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc65 	bl	8008a4c <USBD_SetFeature>
          break;
 8008182:	e009      	b.n	8008198 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fc74 	bl	8008a74 <USBD_ClrFeature>
          break;
 800818c:	e004      	b.n	8008198 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fccc 	bl	8008b2e <USBD_CtlError>
          break;
 8008196:	bf00      	nop
      }
      break;
 8008198:	e004      	b.n	80081a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fcc6 	bl	8008b2e <USBD_CtlError>
      break;
 80081a2:	bf00      	nop
  }

  return ret;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop

080081b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081c6:	2b40      	cmp	r3, #64	; 0x40
 80081c8:	d005      	beq.n	80081d6 <USBD_StdItfReq+0x26>
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d82e      	bhi.n	800822c <USBD_StdItfReq+0x7c>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <USBD_StdItfReq+0x26>
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	d12a      	bne.n	800822c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081dc:	3b01      	subs	r3, #1
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d81d      	bhi.n	800821e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	889b      	ldrh	r3, [r3, #4]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d813      	bhi.n	8008214 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d110      	bne.n	8008228 <USBD_StdItfReq+0x78>
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10d      	bne.n	8008228 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fd56 	bl	8008cbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008212:	e009      	b.n	8008228 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fc89 	bl	8008b2e <USBD_CtlError>
          break;
 800821c:	e004      	b.n	8008228 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fc84 	bl	8008b2e <USBD_CtlError>
          break;
 8008226:	e000      	b.n	800822a <USBD_StdItfReq+0x7a>
          break;
 8008228:	bf00      	nop
      }
      break;
 800822a:	e004      	b.n	8008236 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fc7d 	bl	8008b2e <USBD_CtlError>
      break;
 8008234:	bf00      	nop
  }

  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	889b      	ldrh	r3, [r3, #4]
 8008252:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d007      	beq.n	8008270 <USBD_StdEPReq+0x30>
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	f200 8146 	bhi.w	80084f2 <USBD_StdEPReq+0x2b2>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <USBD_StdEPReq+0x40>
 800826a:	2b20      	cmp	r3, #32
 800826c:	f040 8141 	bne.w	80084f2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
      break;
 800827e:	e13d      	b.n	80084fc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008288:	2b20      	cmp	r3, #32
 800828a:	d10a      	bne.n	80082a2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	e12d      	b.n	80084fe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d007      	beq.n	80082ba <USBD_StdEPReq+0x7a>
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	f300 811b 	bgt.w	80084e6 <USBD_StdEPReq+0x2a6>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d072      	beq.n	800839a <USBD_StdEPReq+0x15a>
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d03a      	beq.n	800832e <USBD_StdEPReq+0xee>
 80082b8:	e115      	b.n	80084e6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d002      	beq.n	80082ca <USBD_StdEPReq+0x8a>
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d015      	beq.n	80082f4 <USBD_StdEPReq+0xb4>
 80082c8:	e02b      	b.n	8008322 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <USBD_StdEPReq+0xaa>
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	2b80      	cmp	r3, #128	; 0x80
 80082d4:	d009      	beq.n	80082ea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 fade 	bl	800989c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082e0:	2180      	movs	r1, #128	; 0x80
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fada 	bl	800989c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082e8:	e020      	b.n	800832c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc1e 	bl	8008b2e <USBD_CtlError>
              break;
 80082f2:	e01b      	b.n	800832c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10e      	bne.n	800831a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <USBD_StdEPReq+0xda>
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b80      	cmp	r3, #128	; 0x80
 8008306:	d008      	beq.n	800831a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	88db      	ldrh	r3, [r3, #6]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fac1 	bl	800989c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fccf 	bl	8008cbe <USBD_CtlSendStatus>

              break;
 8008320:	e004      	b.n	800832c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc02 	bl	8008b2e <USBD_CtlError>
              break;
 800832a:	bf00      	nop
          }
          break;
 800832c:	e0e0      	b.n	80084f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008334:	2b02      	cmp	r3, #2
 8008336:	d002      	beq.n	800833e <USBD_StdEPReq+0xfe>
 8008338:	2b03      	cmp	r3, #3
 800833a:	d015      	beq.n	8008368 <USBD_StdEPReq+0x128>
 800833c:	e026      	b.n	800838c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00c      	beq.n	800835e <USBD_StdEPReq+0x11e>
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b80      	cmp	r3, #128	; 0x80
 8008348:	d009      	beq.n	800835e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 faa4 	bl	800989c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008354:	2180      	movs	r1, #128	; 0x80
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 faa0 	bl	800989c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800835c:	e01c      	b.n	8008398 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fbe4 	bl	8008b2e <USBD_CtlError>
              break;
 8008366:	e017      	b.n	8008398 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	885b      	ldrh	r3, [r3, #2]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d112      	bne.n	8008396 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 faab 	bl	80098da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fc9a 	bl	8008cbe <USBD_CtlSendStatus>
              }
              break;
 800838a:	e004      	b.n	8008396 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fbcd 	bl	8008b2e <USBD_CtlError>
              break;
 8008394:	e000      	b.n	8008398 <USBD_StdEPReq+0x158>
              break;
 8008396:	bf00      	nop
          }
          break;
 8008398:	e0aa      	b.n	80084f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d002      	beq.n	80083aa <USBD_StdEPReq+0x16a>
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d032      	beq.n	800840e <USBD_StdEPReq+0x1ce>
 80083a8:	e097      	b.n	80084da <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <USBD_StdEPReq+0x180>
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	2b80      	cmp	r3, #128	; 0x80
 80083b4:	d004      	beq.n	80083c0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fbb8 	bl	8008b2e <USBD_CtlError>
                break;
 80083be:	e091      	b.n	80084e4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da0b      	bge.n	80083e0 <USBD_StdEPReq+0x1a0>
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	3310      	adds	r3, #16
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	3304      	adds	r3, #4
 80083de:	e00b      	b.n	80083f8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	4413      	add	r3, r2
 80083f6:	3304      	adds	r3, #4
 80083f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2202      	movs	r2, #2
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fbfb 	bl	8008c02 <USBD_CtlSendData>
              break;
 800840c:	e06a      	b.n	80084e4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800840e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da11      	bge.n	800843a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3318      	adds	r3, #24
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d117      	bne.n	8008460 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fb7b 	bl	8008b2e <USBD_CtlError>
                  break;
 8008438:	e054      	b.n	80084e4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	f003 020f 	and.w	r2, r3, #15
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d104      	bne.n	8008460 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fb68 	bl	8008b2e <USBD_CtlError>
                  break;
 800845e:	e041      	b.n	80084e4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008464:	2b00      	cmp	r3, #0
 8008466:	da0b      	bge.n	8008480 <USBD_StdEPReq+0x240>
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	3310      	adds	r3, #16
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	3304      	adds	r3, #4
 800847e:	e00b      	b.n	8008498 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	4413      	add	r3, r2
 8008496:	3304      	adds	r3, #4
 8008498:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <USBD_StdEPReq+0x266>
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d103      	bne.n	80084ae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	e00e      	b.n	80084cc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fa30 	bl	8009918 <USBD_LL_IsStallEP>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e002      	b.n	80084cc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2202      	movs	r2, #2
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fb95 	bl	8008c02 <USBD_CtlSendData>
              break;
 80084d8:	e004      	b.n	80084e4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fb26 	bl	8008b2e <USBD_CtlError>
              break;
 80084e2:	bf00      	nop
          }
          break;
 80084e4:	e004      	b.n	80084f0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fb20 	bl	8008b2e <USBD_CtlError>
          break;
 80084ee:	bf00      	nop
      }
      break;
 80084f0:	e004      	b.n	80084fc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb1a 	bl	8008b2e <USBD_CtlError>
      break;
 80084fa:	bf00      	nop
  }

  return ret;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	885b      	ldrh	r3, [r3, #2]
 8008522:	0a1b      	lsrs	r3, r3, #8
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	2b06      	cmp	r3, #6
 800852a:	f200 8128 	bhi.w	800877e <USBD_GetDescriptor+0x276>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <USBD_GetDescriptor+0x2c>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008551 	.word	0x08008551
 8008538:	08008569 	.word	0x08008569
 800853c:	080085a9 	.word	0x080085a9
 8008540:	0800877f 	.word	0x0800877f
 8008544:	0800877f 	.word	0x0800877f
 8008548:	0800871f 	.word	0x0800871f
 800854c:	0800874b 	.word	0x0800874b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	7c12      	ldrb	r2, [r2, #16]
 800855c:	f107 0108 	add.w	r1, r7, #8
 8008560:	4610      	mov	r0, r2
 8008562:	4798      	blx	r3
 8008564:	60f8      	str	r0, [r7, #12]
      break;
 8008566:	e112      	b.n	800878e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7c1b      	ldrb	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10d      	bne.n	800858c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	f107 0208 	add.w	r2, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	2202      	movs	r2, #2
 8008588:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800858a:	e100      	b.n	800878e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	f107 0208 	add.w	r2, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	2202      	movs	r2, #2
 80085a4:	701a      	strb	r2, [r3, #0]
      break;
 80085a6:	e0f2      	b.n	800878e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	885b      	ldrh	r3, [r3, #2]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b05      	cmp	r3, #5
 80085b0:	f200 80ac 	bhi.w	800870c <USBD_GetDescriptor+0x204>
 80085b4:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <USBD_GetDescriptor+0xb4>)
 80085b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ba:	bf00      	nop
 80085bc:	080085d5 	.word	0x080085d5
 80085c0:	08008609 	.word	0x08008609
 80085c4:	0800863d 	.word	0x0800863d
 80085c8:	08008671 	.word	0x08008671
 80085cc:	080086a5 	.word	0x080086a5
 80085d0:	080086d9 	.word	0x080086d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 0108 	add.w	r1, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f6:	e091      	b.n	800871c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa97 	bl	8008b2e <USBD_CtlError>
            err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
          break;
 8008606:	e089      	b.n	800871c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7c12      	ldrb	r2, [r2, #16]
 8008620:	f107 0108 	add.w	r1, r7, #8
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862a:	e077      	b.n	800871c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa7d 	bl	8008b2e <USBD_CtlError>
            err++;
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	3301      	adds	r3, #1
 8008638:	72fb      	strb	r3, [r7, #11]
          break;
 800863a:	e06f      	b.n	800871c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	7c12      	ldrb	r2, [r2, #16]
 8008654:	f107 0108 	add.w	r1, r7, #8
 8008658:	4610      	mov	r0, r2
 800865a:	4798      	blx	r3
 800865c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865e:	e05d      	b.n	800871c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa63 	bl	8008b2e <USBD_CtlError>
            err++;
 8008668:	7afb      	ldrb	r3, [r7, #11]
 800866a:	3301      	adds	r3, #1
 800866c:	72fb      	strb	r3, [r7, #11]
          break;
 800866e:	e055      	b.n	800871c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	7c12      	ldrb	r2, [r2, #16]
 8008688:	f107 0108 	add.w	r1, r7, #8
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
 8008690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008692:	e043      	b.n	800871c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa49 	bl	8008b2e <USBD_CtlError>
            err++;
 800869c:	7afb      	ldrb	r3, [r7, #11]
 800869e:	3301      	adds	r3, #1
 80086a0:	72fb      	strb	r3, [r7, #11]
          break;
 80086a2:	e03b      	b.n	800871c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	7c12      	ldrb	r2, [r2, #16]
 80086bc:	f107 0108 	add.w	r1, r7, #8
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c6:	e029      	b.n	800871c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa2f 	bl	8008b2e <USBD_CtlError>
            err++;
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	3301      	adds	r3, #1
 80086d4:	72fb      	strb	r3, [r7, #11]
          break;
 80086d6:	e021      	b.n	800871c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7c12      	ldrb	r2, [r2, #16]
 80086f0:	f107 0108 	add.w	r1, r7, #8
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fa:	e00f      	b.n	800871c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa15 	bl	8008b2e <USBD_CtlError>
            err++;
 8008704:	7afb      	ldrb	r3, [r7, #11]
 8008706:	3301      	adds	r3, #1
 8008708:	72fb      	strb	r3, [r7, #11]
          break;
 800870a:	e007      	b.n	800871c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa0d 	bl	8008b2e <USBD_CtlError>
          err++;
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	3301      	adds	r3, #1
 8008718:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800871a:	e038      	b.n	800878e <USBD_GetDescriptor+0x286>
 800871c:	e037      	b.n	800878e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	7c1b      	ldrb	r3, [r3, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	f107 0208 	add.w	r2, r7, #8
 8008732:	4610      	mov	r0, r2
 8008734:	4798      	blx	r3
 8008736:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008738:	e029      	b.n	800878e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9f6 	bl	8008b2e <USBD_CtlError>
        err++;
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	3301      	adds	r3, #1
 8008746:	72fb      	strb	r3, [r7, #11]
      break;
 8008748:	e021      	b.n	800878e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7c1b      	ldrb	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10d      	bne.n	800876e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875a:	f107 0208 	add.w	r2, r7, #8
 800875e:	4610      	mov	r0, r2
 8008760:	4798      	blx	r3
 8008762:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	2207      	movs	r2, #7
 800876a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800876c:	e00f      	b.n	800878e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f9dc 	bl	8008b2e <USBD_CtlError>
        err++;
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	3301      	adds	r3, #1
 800877a:	72fb      	strb	r3, [r7, #11]
      break;
 800877c:	e007      	b.n	800878e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f9d4 	bl	8008b2e <USBD_CtlError>
      err++;
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	3301      	adds	r3, #1
 800878a:	72fb      	strb	r3, [r7, #11]
      break;
 800878c:	bf00      	nop
  }

  if (err != 0U)
 800878e:	7afb      	ldrb	r3, [r7, #11]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d11c      	bne.n	80087ce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008794:	893b      	ldrh	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d011      	beq.n	80087be <USBD_GetDescriptor+0x2b6>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	88db      	ldrh	r3, [r3, #6]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00d      	beq.n	80087be <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	88da      	ldrh	r2, [r3, #6]
 80087a6:	893b      	ldrh	r3, [r7, #8]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	bf28      	it	cs
 80087ac:	4613      	movcs	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087b2:	893b      	ldrh	r3, [r7, #8]
 80087b4:	461a      	mov	r2, r3
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fa22 	bl	8008c02 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88db      	ldrh	r3, [r3, #6]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa79 	bl	8008cbe <USBD_CtlSendStatus>
 80087cc:	e000      	b.n	80087d0 <USBD_GetDescriptor+0x2c8>
    return;
 80087ce:	bf00      	nop
    }
  }
}
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop

080087d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	889b      	ldrh	r3, [r3, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d130      	bne.n	800884c <USBD_SetAddress+0x74>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d12c      	bne.n	800884c <USBD_SetAddress+0x74>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	885b      	ldrh	r3, [r3, #2]
 80087f6:	2b7f      	cmp	r3, #127	; 0x7f
 80087f8:	d828      	bhi.n	800884c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008804:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880c:	2b03      	cmp	r3, #3
 800880e:	d104      	bne.n	800881a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f98b 	bl	8008b2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008818:	e01d      	b.n	8008856 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	7bfa      	ldrb	r2, [r7, #15]
 800881e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 f8a2 	bl	8009970 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa46 	bl	8008cbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008840:	e009      	b.n	8008856 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	e004      	b.n	8008856 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f96d 	bl	8008b2e <USBD_CtlError>
  }
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	b2da      	uxtb	r2, r3
 8008870:	4b41      	ldr	r3, [pc, #260]	; (8008978 <USBD_SetConfig+0x118>)
 8008872:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008874:	4b40      	ldr	r3, [pc, #256]	; (8008978 <USBD_SetConfig+0x118>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d904      	bls.n	8008886 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f955 	bl	8008b2e <USBD_CtlError>
 8008884:	e075      	b.n	8008972 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888c:	2b02      	cmp	r3, #2
 800888e:	d002      	beq.n	8008896 <USBD_SetConfig+0x36>
 8008890:	2b03      	cmp	r3, #3
 8008892:	d023      	beq.n	80088dc <USBD_SetConfig+0x7c>
 8008894:	e062      	b.n	800895c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008896:	4b38      	ldr	r3, [pc, #224]	; (8008978 <USBD_SetConfig+0x118>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01a      	beq.n	80088d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800889e:	4b36      	ldr	r3, [pc, #216]	; (8008978 <USBD_SetConfig+0x118>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2203      	movs	r2, #3
 80088ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088b0:	4b31      	ldr	r3, [pc, #196]	; (8008978 <USBD_SetConfig+0x118>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff f9e7 	bl	8007c8a <USBD_SetClassConfig>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d104      	bne.n	80088cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f932 	bl	8008b2e <USBD_CtlError>
            return;
 80088ca:	e052      	b.n	8008972 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f9f6 	bl	8008cbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088d2:	e04e      	b.n	8008972 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f9f2 	bl	8008cbe <USBD_CtlSendStatus>
        break;
 80088da:	e04a      	b.n	8008972 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088dc:	4b26      	ldr	r3, [pc, #152]	; (8008978 <USBD_SetConfig+0x118>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d112      	bne.n	800890a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80088ec:	4b22      	ldr	r3, [pc, #136]	; (8008978 <USBD_SetConfig+0x118>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80088f6:	4b20      	ldr	r3, [pc, #128]	; (8008978 <USBD_SetConfig+0x118>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff f9e3 	bl	8007cc8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f9db 	bl	8008cbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008908:	e033      	b.n	8008972 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800890a:	4b1b      	ldr	r3, [pc, #108]	; (8008978 <USBD_SetConfig+0x118>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d01d      	beq.n	8008954 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff f9d1 	bl	8007cc8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <USBD_SetConfig+0x118>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008930:	4b11      	ldr	r3, [pc, #68]	; (8008978 <USBD_SetConfig+0x118>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff f9a7 	bl	8007c8a <USBD_SetClassConfig>
 800893c:	4603      	mov	r3, r0
 800893e:	2b02      	cmp	r3, #2
 8008940:	d104      	bne.n	800894c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f8f2 	bl	8008b2e <USBD_CtlError>
            return;
 800894a:	e012      	b.n	8008972 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f9b6 	bl	8008cbe <USBD_CtlSendStatus>
        break;
 8008952:	e00e      	b.n	8008972 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f9b2 	bl	8008cbe <USBD_CtlSendStatus>
        break;
 800895a:	e00a      	b.n	8008972 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8e5 	bl	8008b2e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008964:	4b04      	ldr	r3, [pc, #16]	; (8008978 <USBD_SetConfig+0x118>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff f9ac 	bl	8007cc8 <USBD_ClrClassConfig>
        break;
 8008970:	bf00      	nop
    }
  }
}
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000520 	.word	0x20000520

0800897c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	88db      	ldrh	r3, [r3, #6]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d004      	beq.n	8008998 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f8cc 	bl	8008b2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008996:	e022      	b.n	80089de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899e:	2b02      	cmp	r3, #2
 80089a0:	dc02      	bgt.n	80089a8 <USBD_GetConfig+0x2c>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dc03      	bgt.n	80089ae <USBD_GetConfig+0x32>
 80089a6:	e015      	b.n	80089d4 <USBD_GetConfig+0x58>
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetConfig+0x48>
 80089ac:	e012      	b.n	80089d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3308      	adds	r3, #8
 80089b8:	2201      	movs	r2, #1
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f920 	bl	8008c02 <USBD_CtlSendData>
        break;
 80089c2:	e00c      	b.n	80089de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3304      	adds	r3, #4
 80089c8:	2201      	movs	r2, #1
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f918 	bl	8008c02 <USBD_CtlSendData>
        break;
 80089d2:	e004      	b.n	80089de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f8a9 	bl	8008b2e <USBD_CtlError>
        break;
 80089dc:	bf00      	nop
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f6:	3b01      	subs	r3, #1
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d81e      	bhi.n	8008a3a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	88db      	ldrh	r3, [r3, #6]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d004      	beq.n	8008a0e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f891 	bl	8008b2e <USBD_CtlError>
        break;
 8008a0c:	e01a      	b.n	8008a44 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f043 0202 	orr.w	r2, r3, #2
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	330c      	adds	r3, #12
 8008a2e:	2202      	movs	r2, #2
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f8e5 	bl	8008c02 <USBD_CtlSendData>
      break;
 8008a38:	e004      	b.n	8008a44 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f876 	bl	8008b2e <USBD_CtlError>
      break;
 8008a42:	bf00      	nop
  }
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	885b      	ldrh	r3, [r3, #2]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d106      	bne.n	8008a6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f929 	bl	8008cbe <USBD_CtlSendStatus>
  }
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a84:	3b01      	subs	r3, #1
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d80b      	bhi.n	8008aa2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d10c      	bne.n	8008aac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f90f 	bl	8008cbe <USBD_CtlSendStatus>
      }
      break;
 8008aa0:	e004      	b.n	8008aac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f842 	bl	8008b2e <USBD_CtlError>
      break;
 8008aaa:	e000      	b.n	8008aae <USBD_ClrFeature+0x3a>
      break;
 8008aac:	bf00      	nop
  }
}
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781a      	ldrb	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	785a      	ldrb	r2, [r3, #1]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	3302      	adds	r3, #2
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	3303      	adds	r3, #3
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	3304      	adds	r3, #4
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	3305      	adds	r3, #5
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	021b      	lsls	r3, r3, #8
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	4413      	add	r3, r2
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	3306      	adds	r3, #6
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	3307      	adds	r3, #7
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	021b      	lsls	r3, r3, #8
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	80da      	strh	r2, [r3, #6]

}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr

08008b2e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b38:	2180      	movs	r1, #128	; 0x80
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 feae 	bl	800989c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b40:	2100      	movs	r1, #0
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 feaa 	bl	800989c <USBD_LL_StallEP>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d032      	beq.n	8008bcc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f834 	bl	8008bd4 <USBD_GetLen>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	3301      	adds	r3, #1
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	005b      	lsls	r3, r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	75fa      	strb	r2, [r7, #23]
 8008b80:	461a      	mov	r2, r3
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	4413      	add	r3, r2
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	7812      	ldrb	r2, [r2, #0]
 8008b8a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	75fa      	strb	r2, [r7, #23]
 8008b92:	461a      	mov	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4413      	add	r3, r2
 8008b98:	2203      	movs	r2, #3
 8008b9a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b9c:	e012      	b.n	8008bc4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	60fa      	str	r2, [r7, #12]
 8008ba4:	7dfa      	ldrb	r2, [r7, #23]
 8008ba6:	1c51      	adds	r1, r2, #1
 8008ba8:	75f9      	strb	r1, [r7, #23]
 8008baa:	4611      	mov	r1, r2
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	440a      	add	r2, r1
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	75fa      	strb	r2, [r7, #23]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e8      	bne.n	8008b9e <USBD_GetString+0x4e>
    }
  }
}
 8008bcc:	bf00      	nop
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008be0:	e005      	b.n	8008bee <USBD_GetLen+0x1a>
  {
    len++;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	3301      	adds	r3, #1
 8008be6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3301      	adds	r3, #1
 8008bec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1f5      	bne.n	8008be2 <USBD_GetLen+0xe>
  }

  return len;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bc80      	pop	{r7}
 8008c00:	4770      	bx	lr

08008c02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c18:	88fa      	ldrh	r2, [r7, #6]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c1e:	88fa      	ldrh	r2, [r7, #6]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c24:	88fb      	ldrh	r3, [r7, #6]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	2100      	movs	r1, #0
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 febf 	bl	80099ae <USBD_LL_Transmit>

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	4613      	mov	r3, r2
 8008c46:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fead 	bl	80099ae <USBD_LL_Transmit>

  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2203      	movs	r2, #3
 8008c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c7c:	88fa      	ldrh	r2, [r7, #6]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c84:	88fb      	ldrh	r3, [r7, #6]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 feb2 	bl	80099f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ca8:	88fb      	ldrh	r3, [r7, #6]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	2100      	movs	r1, #0
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fea0 	bl	80099f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fe6a 	bl	80099ae <USBD_LL_Transmit>

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2205      	movs	r2, #5
 8008cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fe7a 	bl	80099f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d10:	2200      	movs	r2, #0
 8008d12:	4912      	ldr	r1, [pc, #72]	; (8008d5c <MX_USB_DEVICE_Init+0x50>)
 8008d14:	4812      	ldr	r0, [pc, #72]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d16:	f7fe ff5e 	bl	8007bd6 <USBD_Init>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d20:	f7f8 fb98 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d24:	490f      	ldr	r1, [pc, #60]	; (8008d64 <MX_USB_DEVICE_Init+0x58>)
 8008d26:	480e      	ldr	r0, [pc, #56]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d28:	f7fe ff80 	bl	8007c2c <USBD_RegisterClass>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d32:	f7f8 fb8f 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d36:	490c      	ldr	r1, [pc, #48]	; (8008d68 <MX_USB_DEVICE_Init+0x5c>)
 8008d38:	4809      	ldr	r0, [pc, #36]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d3a:	f7fe feb1 	bl	8007aa0 <USBD_CDC_RegisterInterface>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d44:	f7f8 fb86 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d48:	4805      	ldr	r0, [pc, #20]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d4a:	f7fe ff88 	bl	8007c5e <USBD_Start>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d54:	f7f8 fb7e 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	2000012c 	.word	0x2000012c
 8008d60:	20000524 	.word	0x20000524
 8008d64:	20000018 	.word	0x20000018
 8008d68:	2000011c 	.word	0x2000011c

08008d6c <cell_selector>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
int cell_selector(char* receive_buf)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	char str1[] = "cell1\n";
 8008d74:	4a28      	ldr	r2, [pc, #160]	; (8008e18 <cell_selector+0xac>)
 8008d76:	f107 0318 	add.w	r3, r7, #24
 8008d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d7e:	6018      	str	r0, [r3, #0]
 8008d80:	3304      	adds	r3, #4
 8008d82:	8019      	strh	r1, [r3, #0]
 8008d84:	3302      	adds	r3, #2
 8008d86:	0c0a      	lsrs	r2, r1, #16
 8008d88:	701a      	strb	r2, [r3, #0]
	char str2[] = "cell2\n";
 8008d8a:	4a24      	ldr	r2, [pc, #144]	; (8008e1c <cell_selector+0xb0>)
 8008d8c:	f107 0310 	add.w	r3, r7, #16
 8008d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d94:	6018      	str	r0, [r3, #0]
 8008d96:	3304      	adds	r3, #4
 8008d98:	8019      	strh	r1, [r3, #0]
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	0c0a      	lsrs	r2, r1, #16
 8008d9e:	701a      	strb	r2, [r3, #0]
	char str3[] = "cell3\n";
 8008da0:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <cell_selector+0xb4>)
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008daa:	6018      	str	r0, [r3, #0]
 8008dac:	3304      	adds	r3, #4
 8008dae:	8019      	strh	r1, [r3, #0]
 8008db0:	3302      	adds	r3, #2
 8008db2:	0c0a      	lsrs	r2, r1, #16
 8008db4:	701a      	strb	r2, [r3, #0]
	if (strcmp(receive_buf, str1) == 0)
 8008db6:	f107 0318 	add.w	r3, r7, #24
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7f7 f9c7 	bl	8000150 <strcmp>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d103      	bne.n	8008dd0 <cell_selector+0x64>
	{
		flg = 1;
 8008dc8:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <cell_selector+0xb8>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	e01d      	b.n	8008e0c <cell_selector+0xa0>
	}

	else if (strcmp(receive_buf, str2) == 0)
 8008dd0:	f107 0310 	add.w	r3, r7, #16
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f7 f9ba 	bl	8000150 <strcmp>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d103      	bne.n	8008dea <cell_selector+0x7e>
	{
		flg = 2;
 8008de2:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <cell_selector+0xb8>)
 8008de4:	2202      	movs	r2, #2
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e010      	b.n	8008e0c <cell_selector+0xa0>
	}

	else if (strcmp(receive_buf, str3) == 0)
 8008dea:	f107 0308 	add.w	r3, r7, #8
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7f7 f9ad 	bl	8000150 <strcmp>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <cell_selector+0x98>
	{
		flg = 3;
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <cell_selector+0xb8>)
 8008dfe:	2203      	movs	r2, #3
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	e003      	b.n	8008e0c <cell_selector+0xa0>
	}
	else {
		flg = 999;
 8008e04:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <cell_selector+0xb8>)
 8008e06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e0a:	601a      	str	r2, [r3, #0]
	}
return flg;
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <cell_selector+0xb8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]

}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	0800c968 	.word	0x0800c968
 8008e1c:	0800c970 	.word	0x0800c970
 8008e20:	0800c978 	.word	0x0800c978
 8008e24:	2000050c 	.word	0x2000050c

08008e28 <cell_switch>:

char *cell_switch(int flg, char *status1, char *status2, char *status3)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b09c      	sub	sp, #112	; 0x70
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
	if (flg ==1)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d13c      	bne.n	8008eb6 <cell_switch+0x8e>
	{
		char st1[] = "ACT  ";
 8008e3c:	4a79      	ldr	r2, [pc, #484]	; (8009024 <cell_switch+0x1fc>)
 8008e3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e46:	6018      	str	r0, [r3, #0]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	8019      	strh	r1, [r3, #0]
		char st2[] = "OFF  ";
 8008e4c:	4a76      	ldr	r2, [pc, #472]	; (8009028 <cell_switch+0x200>)
 8008e4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e56:	6018      	str	r0, [r3, #0]
 8008e58:	3304      	adds	r3, #4
 8008e5a:	8019      	strh	r1, [r3, #0]
		char st3[] = "OFF  ";
 8008e5c:	4a72      	ldr	r2, [pc, #456]	; (8009028 <cell_switch+0x200>)
 8008e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e66:	6018      	str	r0, [r3, #0]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	8019      	strh	r1, [r3, #0]
		strcpy(status1, st1);
 8008e6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008e70:	4619      	mov	r1, r3
 8008e72:	68b8      	ldr	r0, [r7, #8]
 8008e74:	f001 fb0f 	bl	800a496 <strcpy>
		strcpy(status2, st2);
 8008e78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 fb09 	bl	800a496 <strcpy>
		strcpy(status3, st3);
 8008e84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6838      	ldr	r0, [r7, #0]
 8008e8c:	f001 fb03 	bl	800a496 <strcpy>
		HAL_GPIO_WritePin(GPIOA, cell2_Pin, GPIO_PIN_RESET);
 8008e90:	2200      	movs	r2, #0
 8008e92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e96:	4865      	ldr	r0, [pc, #404]	; (800902c <cell_switch+0x204>)
 8008e98:	f7f9 fd24 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, cell3_Pin, GPIO_PIN_RESET);
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ea2:	4862      	ldr	r0, [pc, #392]	; (800902c <cell_switch+0x204>)
 8008ea4:	f7f9 fd1e 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOA, cell1_Pin);
 8008ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008eac:	485f      	ldr	r0, [pc, #380]	; (800902c <cell_switch+0x204>)
 8008eae:	f7f9 fd31 	bl	8002914 <HAL_GPIO_TogglePin>
		return status1;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	e0b1      	b.n	800901a <cell_switch+0x1f2>
		return status2;
		return status3;
	}

	else if (flg == 2)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d13c      	bne.n	8008f36 <cell_switch+0x10e>
	{
		char st1[] = "OFF  ";
 8008ebc:	4a5a      	ldr	r2, [pc, #360]	; (8009028 <cell_switch+0x200>)
 8008ebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ec6:	6018      	str	r0, [r3, #0]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	8019      	strh	r1, [r3, #0]
		char st2[] = "ACT  ";
 8008ecc:	4a55      	ldr	r2, [pc, #340]	; (8009024 <cell_switch+0x1fc>)
 8008ece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ed6:	6018      	str	r0, [r3, #0]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	8019      	strh	r1, [r3, #0]
		char st3[] = "OFF  ";
 8008edc:	4a52      	ldr	r2, [pc, #328]	; (8009028 <cell_switch+0x200>)
 8008ede:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ee6:	6018      	str	r0, [r3, #0]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	8019      	strh	r1, [r3, #0]
		strcpy(status1, st1);
 8008eec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	68b8      	ldr	r0, [r7, #8]
 8008ef4:	f001 facf 	bl	800a496 <strcpy>
		strcpy(status2, st2);
 8008ef8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 fac9 	bl	800a496 <strcpy>
		strcpy(status3, st3);
 8008f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6838      	ldr	r0, [r7, #0]
 8008f0c:	f001 fac3 	bl	800a496 <strcpy>
		HAL_GPIO_WritePin(GPIOA, cell1_Pin, GPIO_PIN_RESET);
 8008f10:	2200      	movs	r2, #0
 8008f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f16:	4845      	ldr	r0, [pc, #276]	; (800902c <cell_switch+0x204>)
 8008f18:	f7f9 fce4 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, cell3_Pin, GPIO_PIN_RESET);
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f22:	4842      	ldr	r0, [pc, #264]	; (800902c <cell_switch+0x204>)
 8008f24:	f7f9 fcde 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOA, cell2_Pin);
 8008f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f2c:	483f      	ldr	r0, [pc, #252]	; (800902c <cell_switch+0x204>)
 8008f2e:	f7f9 fcf1 	bl	8002914 <HAL_GPIO_TogglePin>
		return status1;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	e071      	b.n	800901a <cell_switch+0x1f2>
		return status2;
		return status3;
	}

	else if (flg == 3)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d13c      	bne.n	8008fb6 <cell_switch+0x18e>
	{
		char st1[] = "OFF  ";
 8008f3c:	4a3a      	ldr	r2, [pc, #232]	; (8009028 <cell_switch+0x200>)
 8008f3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f46:	6018      	str	r0, [r3, #0]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	8019      	strh	r1, [r3, #0]
		char st2[] = "OFF  ";
 8008f4c:	4a36      	ldr	r2, [pc, #216]	; (8009028 <cell_switch+0x200>)
 8008f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f56:	6018      	str	r0, [r3, #0]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	8019      	strh	r1, [r3, #0]
		char st3[] = "ACT  ";
 8008f5c:	4a31      	ldr	r2, [pc, #196]	; (8009024 <cell_switch+0x1fc>)
 8008f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f66:	6018      	str	r0, [r3, #0]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	8019      	strh	r1, [r3, #0]
		strcpy(status1, st1);
 8008f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f70:	4619      	mov	r1, r3
 8008f72:	68b8      	ldr	r0, [r7, #8]
 8008f74:	f001 fa8f 	bl	800a496 <strcpy>
		strcpy(status2, st2);
 8008f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 fa89 	bl	800a496 <strcpy>
		strcpy(status3, st3);
 8008f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6838      	ldr	r0, [r7, #0]
 8008f8c:	f001 fa83 	bl	800a496 <strcpy>
		HAL_GPIO_WritePin(GPIOA, cell1_Pin, GPIO_PIN_RESET);
 8008f90:	2200      	movs	r2, #0
 8008f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f96:	4825      	ldr	r0, [pc, #148]	; (800902c <cell_switch+0x204>)
 8008f98:	f7f9 fca4 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, cell2_Pin, GPIO_PIN_RESET);
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fa2:	4822      	ldr	r0, [pc, #136]	; (800902c <cell_switch+0x204>)
 8008fa4:	f7f9 fc9e 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOA, cell3_Pin);
 8008fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008fac:	481f      	ldr	r0, [pc, #124]	; (800902c <cell_switch+0x204>)
 8008fae:	f7f9 fcb1 	bl	8002914 <HAL_GPIO_TogglePin>
		return status1;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	e031      	b.n	800901a <cell_switch+0x1f2>
		return status2;
		return status3;
	}
	else if (flg == 999){
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d12b      	bne.n	8009018 <cell_switch+0x1f0>
		char st1[] = "OFF  ";
 8008fc0:	4a19      	ldr	r2, [pc, #100]	; (8009028 <cell_switch+0x200>)
 8008fc2:	f107 0320 	add.w	r3, r7, #32
 8008fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fca:	6018      	str	r0, [r3, #0]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	8019      	strh	r1, [r3, #0]
		char st2[] = "OFF  ";
 8008fd0:	4a15      	ldr	r2, [pc, #84]	; (8009028 <cell_switch+0x200>)
 8008fd2:	f107 0318 	add.w	r3, r7, #24
 8008fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fda:	6018      	str	r0, [r3, #0]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	8019      	strh	r1, [r3, #0]
		char st3[] = "OFF  ";
 8008fe0:	4a11      	ldr	r2, [pc, #68]	; (8009028 <cell_switch+0x200>)
 8008fe2:	f107 0310 	add.w	r3, r7, #16
 8008fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fea:	6018      	str	r0, [r3, #0]
 8008fec:	3304      	adds	r3, #4
 8008fee:	8019      	strh	r1, [r3, #0]
		strcpy(status1, st1);
 8008ff0:	f107 0320 	add.w	r3, r7, #32
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	68b8      	ldr	r0, [r7, #8]
 8008ff8:	f001 fa4d 	bl	800a496 <strcpy>
		strcpy(status2, st2);
 8008ffc:	f107 0318 	add.w	r3, r7, #24
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 fa47 	bl	800a496 <strcpy>
		strcpy(status3, st3);
 8009008:	f107 0310 	add.w	r3, r7, #16
 800900c:	4619      	mov	r1, r3
 800900e:	6838      	ldr	r0, [r7, #0]
 8009010:	f001 fa41 	bl	800a496 <strcpy>
		return status1;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	e000      	b.n	800901a <cell_switch+0x1f2>
		return status2;
		return status3;
	}
return 0;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3770      	adds	r7, #112	; 0x70
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	0800c980 	.word	0x0800c980
 8009028:	0800c988 	.word	0x0800c988
 800902c:	40010800 	.word	0x40010800

08009030 <Buf_compile>:

char *Buf_compile(char *Buf, const char *status1, const char *status2, const char *status3, const char *status4, const char *status5, float volt1, float volt2, float volt3, float volt4, float volt5, float cur1, float cur2, float cur3, float cur4, float cur5)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b098      	sub	sp, #96	; 0x60
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
	memset(Buf, '\0', 250);
 800903e:	22fa      	movs	r2, #250	; 0xfa
 8009040:	2100      	movs	r1, #0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fd90 	bl	8009b68 <memset>
	for (int i = 1; i<=5; i++)
 8009048:	2301      	movs	r3, #1
 800904a:	657b      	str	r3, [r7, #84]	; 0x54
 800904c:	e070      	b.n	8009130 <Buf_compile+0x100>
	{
		switch(i)
 800904e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009050:	3b01      	subs	r3, #1
 8009052:	2b04      	cmp	r3, #4
 8009054:	d868      	bhi.n	8009128 <Buf_compile+0xf8>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <Buf_compile+0x2c>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009071 	.word	0x08009071
 8009060:	08009091 	.word	0x08009091
 8009064:	080090b3 	.word	0x080090b3
 8009068:	080090d5 	.word	0x080090d5
 800906c:	080090f7 	.word	0x080090f7
		{
			case 1: ; //ячейка с номером 1
				char cell1[9] = "cell 1  ";
 8009070:	4a33      	ldr	r2, [pc, #204]	; (8009140 <Buf_compile+0x110>)
 8009072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009076:	ca07      	ldmia	r2, {r0, r1, r2}
 8009078:	c303      	stmia	r3!, {r0, r1}
 800907a:	701a      	strb	r2, [r3, #0]
				Buf_compile_str(Buf, cell1, status1, volt1, cur1);
 800907c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 f863 	bl	8009154 <Buf_compile_str>
				break;
 800908e:	e04c      	b.n	800912a <Buf_compile+0xfa>
			case 2: ; //ячейка с номером 2
				char cell2[9] = "cell 2  ";
 8009090:	4a2c      	ldr	r2, [pc, #176]	; (8009144 <Buf_compile+0x114>)
 8009092:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009096:	ca07      	ldmia	r2, {r0, r1, r2}
 8009098:	c303      	stmia	r3!, {r0, r1}
 800909a:	701a      	strb	r2, [r3, #0]
				Buf_compile_str(Buf, cell2, status2, volt2, cur2);
 800909c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80090a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 f852 	bl	8009154 <Buf_compile_str>
				break;
 80090b0:	e03b      	b.n	800912a <Buf_compile+0xfa>
			case 3: ; //ячейка с номером 3
				char cell3[9] = "cell 3  ";
 80090b2:	4a25      	ldr	r2, [pc, #148]	; (8009148 <Buf_compile+0x118>)
 80090b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80090ba:	c303      	stmia	r3!, {r0, r1}
 80090bc:	701a      	strb	r2, [r3, #0]
				Buf_compile_str(Buf, cell3, status3, volt3, cur3);
 80090be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80090c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f841 	bl	8009154 <Buf_compile_str>
				break;
 80090d2:	e02a      	b.n	800912a <Buf_compile+0xfa>
			case 4: ; //ячейка с номером 4
				char cell4[9] = "cell 4  ";
 80090d4:	4a1d      	ldr	r2, [pc, #116]	; (800914c <Buf_compile+0x11c>)
 80090d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090da:	ca07      	ldmia	r2, {r0, r1, r2}
 80090dc:	c303      	stmia	r3!, {r0, r1}
 80090de:	701a      	strb	r2, [r3, #0]
				Buf_compile_str(Buf, cell4, status4, volt4, cur4);
 80090e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80090e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 f830 	bl	8009154 <Buf_compile_str>
				break;
 80090f4:	e019      	b.n	800912a <Buf_compile+0xfa>
			case 5: ; //ячейка с номером 5
				char cell5[9] = "cell 5  ";
 80090f6:	4a16      	ldr	r2, [pc, #88]	; (8009150 <Buf_compile+0x120>)
 80090f8:	f107 0318 	add.w	r3, r7, #24
 80090fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80090fe:	c303      	stmia	r3!, {r0, r1}
 8009100:	701a      	strb	r2, [r3, #0]
				Buf_compile_str(Buf, cell5, status5, volt5, cur5);
 8009102:	f107 0118 	add.w	r1, r7, #24
 8009106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800910e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 f81f 	bl	8009154 <Buf_compile_str>
				char space[] ="\n";
 8009116:	230a      	movs	r3, #10
 8009118:	82bb      	strh	r3, [r7, #20]
				strcat(Buf, space);
 800911a:	f107 0314 	add.w	r3, r7, #20
 800911e:	4619      	mov	r1, r3
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f001 f9a9 	bl	800a478 <strcat>
				break;
 8009126:	e000      	b.n	800912a <Buf_compile+0xfa>
			default:
				break;
 8009128:	bf00      	nop
	for (int i = 1; i<=5; i++)
 800912a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800912c:	3301      	adds	r3, #1
 800912e:	657b      	str	r3, [r7, #84]	; 0x54
 8009130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009132:	2b05      	cmp	r3, #5
 8009134:	dd8b      	ble.n	800904e <Buf_compile+0x1e>
		}
	}
	return Buf;
 8009136:	68fb      	ldr	r3, [r7, #12]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3758      	adds	r7, #88	; 0x58
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	0800c990 	.word	0x0800c990
 8009144:	0800c99c 	.word	0x0800c99c
 8009148:	0800c9a8 	.word	0x0800c9a8
 800914c:	0800c9b4 	.word	0x0800c9b4
 8009150:	0800c9c0 	.word	0x0800c9c0

08009154 <Buf_compile_str>:

char *Buf_compile_str(char *Buf, char *cell, const char *status, float volt, float cur) /*Эта функция собирает данные об ячейке в строку*/
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08c      	sub	sp, #48	; 0x30
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
	char VOLT[] = " V  ";
 8009162:	4a21      	ldr	r2, [pc, #132]	; (80091e8 <Buf_compile_str+0x94>)
 8009164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800916c:	6018      	str	r0, [r3, #0]
 800916e:	3304      	adds	r3, #4
 8009170:	7019      	strb	r1, [r3, #0]
	char CUR[] = " A\n";
 8009172:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <Buf_compile_str+0x98>)
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
	char numvolt[5];
	char numcur[5];
	strcat(Buf, cell);
 8009176:	68b9      	ldr	r1, [r7, #8]
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f001 f97d 	bl	800a478 <strcat>
	strcat(Buf, status);
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f001 f979 	bl	800a478 <strcat>
	sprintf(numvolt, "%.2f", volt);
 8009186:	6838      	ldr	r0, [r7, #0]
 8009188:	f7f7 f958 	bl	800043c <__aeabi_f2d>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	f107 001c 	add.w	r0, r7, #28
 8009194:	4916      	ldr	r1, [pc, #88]	; (80091f0 <Buf_compile_str+0x9c>)
 8009196:	f001 f94f 	bl	800a438 <siprintf>
	strcat(Buf, numvolt);
 800919a:	f107 031c 	add.w	r3, r7, #28
 800919e:	4619      	mov	r1, r3
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f001 f969 	bl	800a478 <strcat>
	strcat(Buf, VOLT);
 80091a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091aa:	4619      	mov	r1, r3
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f001 f963 	bl	800a478 <strcat>
	sprintf(numcur, "%.2f", cur);
 80091b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091b4:	f7f7 f942 	bl	800043c <__aeabi_f2d>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	f107 0014 	add.w	r0, r7, #20
 80091c0:	490b      	ldr	r1, [pc, #44]	; (80091f0 <Buf_compile_str+0x9c>)
 80091c2:	f001 f939 	bl	800a438 <siprintf>
	strcat(Buf, numcur);
 80091c6:	f107 0314 	add.w	r3, r7, #20
 80091ca:	4619      	mov	r1, r3
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f001 f953 	bl	800a478 <strcat>
	strcat(Buf, CUR);
 80091d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091d6:	4619      	mov	r1, r3
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f001 f94d 	bl	800a478 <strcat>
	return Buf;
 80091de:	68fb      	ldr	r3, [r7, #12]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3730      	adds	r7, #48	; 0x30
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	0800c9d4 	.word	0x0800c9d4
 80091ec:	000a4120 	.word	0x000a4120
 80091f0:	0800c9cc 	.word	0x0800c9cc

080091f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091f8:	2200      	movs	r2, #0
 80091fa:	4905      	ldr	r1, [pc, #20]	; (8009210 <CDC_Init_FS+0x1c>)
 80091fc:	4805      	ldr	r0, [pc, #20]	; (8009214 <CDC_Init_FS+0x20>)
 80091fe:	f7fe fc65 	bl	8007acc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009202:	4905      	ldr	r1, [pc, #20]	; (8009218 <CDC_Init_FS+0x24>)
 8009204:	4803      	ldr	r0, [pc, #12]	; (8009214 <CDC_Init_FS+0x20>)
 8009206:	f7fe fc7a 	bl	8007afe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800920a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800920c:	4618      	mov	r0, r3
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000be8 	.word	0x20000be8
 8009214:	20000524 	.word	0x20000524
 8009218:	200007e8 	.word	0x200007e8

0800921c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800921c:	b480      	push	{r7}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009220:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009222:	4618      	mov	r0, r3
 8009224:	46bd      	mov	sp, r7
 8009226:	bc80      	pop	{r7}
 8009228:	4770      	bx	lr
	...

0800922c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	71fb      	strb	r3, [r7, #7]
 8009238:	4613      	mov	r3, r2
 800923a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	2b23      	cmp	r3, #35	; 0x23
 8009240:	d84a      	bhi.n	80092d8 <CDC_Control_FS+0xac>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <CDC_Control_FS+0x1c>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	080092d9 	.word	0x080092d9
 800924c:	080092d9 	.word	0x080092d9
 8009250:	080092d9 	.word	0x080092d9
 8009254:	080092d9 	.word	0x080092d9
 8009258:	080092d9 	.word	0x080092d9
 800925c:	080092d9 	.word	0x080092d9
 8009260:	080092d9 	.word	0x080092d9
 8009264:	080092d9 	.word	0x080092d9
 8009268:	080092d9 	.word	0x080092d9
 800926c:	080092d9 	.word	0x080092d9
 8009270:	080092d9 	.word	0x080092d9
 8009274:	080092d9 	.word	0x080092d9
 8009278:	080092d9 	.word	0x080092d9
 800927c:	080092d9 	.word	0x080092d9
 8009280:	080092d9 	.word	0x080092d9
 8009284:	080092d9 	.word	0x080092d9
 8009288:	080092d9 	.word	0x080092d9
 800928c:	080092d9 	.word	0x080092d9
 8009290:	080092d9 	.word	0x080092d9
 8009294:	080092d9 	.word	0x080092d9
 8009298:	080092d9 	.word	0x080092d9
 800929c:	080092d9 	.word	0x080092d9
 80092a0:	080092d9 	.word	0x080092d9
 80092a4:	080092d9 	.word	0x080092d9
 80092a8:	080092d9 	.word	0x080092d9
 80092ac:	080092d9 	.word	0x080092d9
 80092b0:	080092d9 	.word	0x080092d9
 80092b4:	080092d9 	.word	0x080092d9
 80092b8:	080092d9 	.word	0x080092d9
 80092bc:	080092d9 	.word	0x080092d9
 80092c0:	080092d9 	.word	0x080092d9
 80092c4:	080092d9 	.word	0x080092d9
 80092c8:	080092d9 	.word	0x080092d9
 80092cc:	080092d9 	.word	0x080092d9
 80092d0:	080092d9 	.word	0x080092d9
 80092d4:	080092d9 	.word	0x080092d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092d8:	bf00      	nop
  }

  return (USBD_OK);
 80092da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop

080092e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	480f      	ldr	r0, [pc, #60]	; (8009334 <CDC_Receive_FS+0x4c>)
 80092f6:	f7fe fc02 	bl	8007afe <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092fa:	480e      	ldr	r0, [pc, #56]	; (8009334 <CDC_Receive_FS+0x4c>)
 80092fc:	f7fe fc41 	bl	8007b82 <USBD_CDC_ReceivePacket>
	uint8_t len = (uint8_t) *Len;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	73fb      	strb	r3, [r7, #15]
	memset(receive_buf, '\0', 5);
 8009306:	2205      	movs	r2, #5
 8009308:	2100      	movs	r1, #0
 800930a:	480b      	ldr	r0, [pc, #44]	; (8009338 <CDC_Receive_FS+0x50>)
 800930c:	f000 fc2c 	bl	8009b68 <memset>
	memcpy(receive_buf, Buf, len);
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	461a      	mov	r2, r3
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	4808      	ldr	r0, [pc, #32]	; (8009338 <CDC_Receive_FS+0x50>)
 8009318:	f000 fc18 	bl	8009b4c <memcpy>
	memset(Buf, '\0', len);
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	461a      	mov	r2, r3
 8009320:	2100      	movs	r1, #0
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc20 	bl	8009b68 <memset>
	return (USBD_OK);
 8009328:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000524 	.word	0x20000524
 8009338:	20000510 	.word	0x20000510

0800933c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800934c:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <CDC_Transmit_FS+0x48>)
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009352:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800935e:	2301      	movs	r3, #1
 8009360:	e00b      	b.n	800937a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009362:	887b      	ldrh	r3, [r7, #2]
 8009364:	461a      	mov	r2, r3
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4806      	ldr	r0, [pc, #24]	; (8009384 <CDC_Transmit_FS+0x48>)
 800936a:	f7fe fbaf 	bl	8007acc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800936e:	4805      	ldr	r0, [pc, #20]	; (8009384 <CDC_Transmit_FS+0x48>)
 8009370:	f7fe fbd8 	bl	8007b24 <USBD_CDC_TransmitPacket>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000524 	.word	0x20000524

08009388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2212      	movs	r2, #18
 8009398:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800939a:	4b03      	ldr	r3, [pc, #12]	; (80093a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	20000148 	.word	0x20000148

080093ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2204      	movs	r2, #4
 80093bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093be:	4b03      	ldr	r3, [pc, #12]	; (80093cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	2000015c 	.word	0x2000015c

080093d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	6039      	str	r1, [r7, #0]
 80093da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4907      	ldr	r1, [pc, #28]	; (8009404 <USBD_FS_ProductStrDescriptor+0x34>)
 80093e6:	4808      	ldr	r0, [pc, #32]	; (8009408 <USBD_FS_ProductStrDescriptor+0x38>)
 80093e8:	f7ff fbb2 	bl	8008b50 <USBD_GetString>
 80093ec:	e004      	b.n	80093f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	4904      	ldr	r1, [pc, #16]	; (8009404 <USBD_FS_ProductStrDescriptor+0x34>)
 80093f2:	4805      	ldr	r0, [pc, #20]	; (8009408 <USBD_FS_ProductStrDescriptor+0x38>)
 80093f4:	f7ff fbac 	bl	8008b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000fe8 	.word	0x20000fe8
 8009408:	0800c9dc 	.word	0x0800c9dc

0800940c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	4904      	ldr	r1, [pc, #16]	; (800942c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800941c:	4804      	ldr	r0, [pc, #16]	; (8009430 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800941e:	f7ff fb97 	bl	8008b50 <USBD_GetString>
  return USBD_StrDesc;
 8009422:	4b02      	ldr	r3, [pc, #8]	; (800942c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20000fe8 	.word	0x20000fe8
 8009430:	0800c9e4 	.word	0x0800c9e4

08009434 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	221a      	movs	r2, #26
 8009444:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009446:	f000 f843 	bl	80094d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800944a:	4b02      	ldr	r3, [pc, #8]	; (8009454 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20000160 	.word	0x20000160

08009458 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	6039      	str	r1, [r7, #0]
 8009462:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d105      	bne.n	8009476 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	4907      	ldr	r1, [pc, #28]	; (800948c <USBD_FS_ConfigStrDescriptor+0x34>)
 800946e:	4808      	ldr	r0, [pc, #32]	; (8009490 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009470:	f7ff fb6e 	bl	8008b50 <USBD_GetString>
 8009474:	e004      	b.n	8009480 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	4904      	ldr	r1, [pc, #16]	; (800948c <USBD_FS_ConfigStrDescriptor+0x34>)
 800947a:	4805      	ldr	r0, [pc, #20]	; (8009490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800947c:	f7ff fb68 	bl	8008b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009480:	4b02      	ldr	r3, [pc, #8]	; (800948c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20000fe8 	.word	0x20000fe8
 8009490:	0800c9f8 	.word	0x0800c9f8

08009494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d105      	bne.n	80094b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4907      	ldr	r1, [pc, #28]	; (80094c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094aa:	4808      	ldr	r0, [pc, #32]	; (80094cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094ac:	f7ff fb50 	bl	8008b50 <USBD_GetString>
 80094b0:	e004      	b.n	80094bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	4904      	ldr	r1, [pc, #16]	; (80094c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094b6:	4805      	ldr	r0, [pc, #20]	; (80094cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094b8:	f7ff fb4a 	bl	8008b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094bc:	4b02      	ldr	r3, [pc, #8]	; (80094c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20000fe8 	.word	0x20000fe8
 80094cc:	0800ca04 	.word	0x0800ca04

080094d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094d6:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <Get_SerialNum+0x44>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <Get_SerialNum+0x48>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094e2:	4b0e      	ldr	r3, [pc, #56]	; (800951c <Get_SerialNum+0x4c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d009      	beq.n	800950a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094f6:	2208      	movs	r2, #8
 80094f8:	4909      	ldr	r1, [pc, #36]	; (8009520 <Get_SerialNum+0x50>)
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 f814 	bl	8009528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009500:	2204      	movs	r2, #4
 8009502:	4908      	ldr	r1, [pc, #32]	; (8009524 <Get_SerialNum+0x54>)
 8009504:	68b8      	ldr	r0, [r7, #8]
 8009506:	f000 f80f 	bl	8009528 <IntToUnicode>
  }
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	1ffff7e8 	.word	0x1ffff7e8
 8009518:	1ffff7ec 	.word	0x1ffff7ec
 800951c:	1ffff7f0 	.word	0x1ffff7f0
 8009520:	20000162 	.word	0x20000162
 8009524:	20000172 	.word	0x20000172

08009528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	4613      	mov	r3, r2
 8009534:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
 800953e:	e027      	b.n	8009590 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	0f1b      	lsrs	r3, r3, #28
 8009544:	2b09      	cmp	r3, #9
 8009546:	d80b      	bhi.n	8009560 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	0f1b      	lsrs	r3, r3, #28
 800954c:	b2da      	uxtb	r2, r3
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	4619      	mov	r1, r3
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	440b      	add	r3, r1
 8009558:	3230      	adds	r2, #48	; 0x30
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]
 800955e:	e00a      	b.n	8009576 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	0f1b      	lsrs	r3, r3, #28
 8009564:	b2da      	uxtb	r2, r3
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	4619      	mov	r1, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	440b      	add	r3, r1
 8009570:	3237      	adds	r2, #55	; 0x37
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	011b      	lsls	r3, r3, #4
 800957a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	3301      	adds	r3, #1
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	4413      	add	r3, r2
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800958a:	7dfb      	ldrb	r3, [r7, #23]
 800958c:	3301      	adds	r3, #1
 800958e:	75fb      	strb	r3, [r7, #23]
 8009590:	7dfa      	ldrb	r2, [r7, #23]
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	429a      	cmp	r2, r3
 8009596:	d3d3      	bcc.n	8009540 <IntToUnicode+0x18>
  }
}
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr

080095a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a0d      	ldr	r2, [pc, #52]	; (80095e8 <HAL_PCD_MspInit+0x44>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d113      	bne.n	80095de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80095b6:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <HAL_PCD_MspInit+0x48>)
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	4a0c      	ldr	r2, [pc, #48]	; (80095ec <HAL_PCD_MspInit+0x48>)
 80095bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095c0:	61d3      	str	r3, [r2, #28]
 80095c2:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <HAL_PCD_MspInit+0x48>)
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80095ce:	2200      	movs	r2, #0
 80095d0:	2100      	movs	r1, #0
 80095d2:	2014      	movs	r0, #20
 80095d4:	f7f8 fe6b 	bl	80022ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80095d8:	2014      	movs	r0, #20
 80095da:	f7f8 fe84 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095de:	bf00      	nop
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40005c00 	.word	0x40005c00
 80095ec:	40021000 	.word	0x40021000

080095f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe fb71 	bl	8007cee <USBD_LL_SetupStage>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	440b      	add	r3, r1
 8009634:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	4619      	mov	r1, r3
 800963e:	f7fe fba3 	bl	8007d88 <USBD_LL_DataOutStage>
}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4613      	mov	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	440b      	add	r3, r1
 800966a:	333c      	adds	r3, #60	; 0x3c
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	4619      	mov	r1, r3
 8009672:	f7fe fbfa 	bl	8007e6a <USBD_LL_DataInStage>
}
 8009676:	bf00      	nop
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fd0a 	bl	80080a6 <USBD_LL_SOF>
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096a2:	2301      	movs	r3, #1
 80096a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d001      	beq.n	80096b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096ae:	f7f7 fed1 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80096b8:	7bfa      	ldrb	r2, [r7, #15]
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fcba 	bl	8008036 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fc73 	bl	8007fb4 <USBD_LL_Reset>
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fcb4 	bl	8008054 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096f4:	4b04      	ldr	r3, [pc, #16]	; (8009708 <HAL_PCD_SuspendCallback+0x30>)
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	4a03      	ldr	r2, [pc, #12]	; (8009708 <HAL_PCD_SuspendCallback+0x30>)
 80096fa:	f043 0306 	orr.w	r3, r3, #6
 80096fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	e000ed00 	.word	0xe000ed00

0800970c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fcae 	bl	800807c <USBD_LL_Resume>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009730:	4a28      	ldr	r2, [pc, #160]	; (80097d4 <USBD_LL_Init+0xac>)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a26      	ldr	r2, [pc, #152]	; (80097d4 <USBD_LL_Init+0xac>)
 800973c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009740:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <USBD_LL_Init+0xac>)
 8009742:	4a25      	ldr	r2, [pc, #148]	; (80097d8 <USBD_LL_Init+0xb0>)
 8009744:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009746:	4b23      	ldr	r3, [pc, #140]	; (80097d4 <USBD_LL_Init+0xac>)
 8009748:	2208      	movs	r2, #8
 800974a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800974c:	4b21      	ldr	r3, [pc, #132]	; (80097d4 <USBD_LL_Init+0xac>)
 800974e:	2202      	movs	r2, #2
 8009750:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009752:	4b20      	ldr	r3, [pc, #128]	; (80097d4 <USBD_LL_Init+0xac>)
 8009754:	2200      	movs	r2, #0
 8009756:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009758:	4b1e      	ldr	r3, [pc, #120]	; (80097d4 <USBD_LL_Init+0xac>)
 800975a:	2200      	movs	r2, #0
 800975c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800975e:	4b1d      	ldr	r3, [pc, #116]	; (80097d4 <USBD_LL_Init+0xac>)
 8009760:	2200      	movs	r2, #0
 8009762:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009764:	481b      	ldr	r0, [pc, #108]	; (80097d4 <USBD_LL_Init+0xac>)
 8009766:	f7f9 f8ee 	bl	8002946 <HAL_PCD_Init>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009770:	f7f7 fe70 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800977a:	2318      	movs	r3, #24
 800977c:	2200      	movs	r2, #0
 800977e:	2100      	movs	r1, #0
 8009780:	f7fa fe0d 	bl	800439e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800978a:	2358      	movs	r3, #88	; 0x58
 800978c:	2200      	movs	r2, #0
 800978e:	2180      	movs	r1, #128	; 0x80
 8009790:	f7fa fe05 	bl	800439e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800979a:	23c0      	movs	r3, #192	; 0xc0
 800979c:	2200      	movs	r2, #0
 800979e:	2181      	movs	r1, #129	; 0x81
 80097a0:	f7fa fdfd 	bl	800439e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097ae:	2200      	movs	r2, #0
 80097b0:	2101      	movs	r1, #1
 80097b2:	f7fa fdf4 	bl	800439e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097c0:	2200      	movs	r2, #0
 80097c2:	2182      	movs	r1, #130	; 0x82
 80097c4:	f7fa fdeb 	bl	800439e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	200011e8 	.word	0x200011e8
 80097d8:	40005c00 	.word	0x40005c00

080097dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f9 f9a6 	bl	8002b44 <HAL_PCD_Start>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 f94e 	bl	8009aa0 <USBD_Get_USB_Status>
 8009804:	4603      	mov	r3, r0
 8009806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009808:	7bbb      	ldrb	r3, [r7, #14]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	461a      	mov	r2, r3
 8009820:	4603      	mov	r3, r0
 8009822:	70fb      	strb	r3, [r7, #3]
 8009824:	460b      	mov	r3, r1
 8009826:	70bb      	strb	r3, [r7, #2]
 8009828:	4613      	mov	r3, r2
 800982a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800983a:	78bb      	ldrb	r3, [r7, #2]
 800983c:	883a      	ldrh	r2, [r7, #0]
 800983e:	78f9      	ldrb	r1, [r7, #3]
 8009840:	f7f9 fafb 	bl	8002e3a <HAL_PCD_EP_Open>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f928 	bl	8009aa0 <USBD_Get_USB_Status>
 8009850:	4603      	mov	r3, r0
 8009852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009854:	7bbb      	ldrb	r3, [r7, #14]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009878:	78fa      	ldrb	r2, [r7, #3]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7f9 fb39 	bl	8002ef4 <HAL_PCD_EP_Close>
 8009882:	4603      	mov	r3, r0
 8009884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	4618      	mov	r0, r3
 800988a:	f000 f909 	bl	8009aa0 <USBD_Get_USB_Status>
 800988e:	4603      	mov	r3, r0
 8009890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009892:	7bbb      	ldrb	r3, [r7, #14]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f9 fbe1 	bl	8003082 <HAL_PCD_EP_SetStall>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f8ea 	bl	8009aa0 <USBD_Get_USB_Status>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098f4:	78fa      	ldrb	r2, [r7, #3]
 80098f6:	4611      	mov	r1, r2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7f9 fc22 	bl	8003142 <HAL_PCD_EP_ClrStall>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	4618      	mov	r0, r3
 8009906:	f000 f8cb 	bl	8009aa0 <USBD_Get_USB_Status>
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800992a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800992c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009930:	2b00      	cmp	r3, #0
 8009932:	da0c      	bge.n	800994e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993a:	68f9      	ldr	r1, [r7, #12]
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	440b      	add	r3, r1
 8009948:	3302      	adds	r3, #2
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	e00b      	b.n	8009966 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009954:	68f9      	ldr	r1, [r7, #12]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	440b      	add	r3, r1
 8009960:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009964:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr

08009970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800998a:	78fa      	ldrb	r2, [r7, #3]
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7f9 fa2e 	bl	8002df0 <HAL_PCD_SetAddress>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 f880 	bl	8009aa0 <USBD_Get_USB_Status>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b086      	sub	sp, #24
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	461a      	mov	r2, r3
 80099ba:	460b      	mov	r3, r1
 80099bc:	72fb      	strb	r3, [r7, #11]
 80099be:	4613      	mov	r3, r2
 80099c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099d0:	893b      	ldrh	r3, [r7, #8]
 80099d2:	7af9      	ldrb	r1, [r7, #11]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	f7f9 fb1d 	bl	8003014 <HAL_PCD_EP_Transmit>
 80099da:	4603      	mov	r3, r0
 80099dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 f85d 	bl	8009aa0 <USBD_Get_USB_Status>
 80099e6:	4603      	mov	r3, r0
 80099e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	461a      	mov	r2, r3
 8009a00:	460b      	mov	r3, r1
 8009a02:	72fb      	strb	r3, [r7, #11]
 8009a04:	4613      	mov	r3, r2
 8009a06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a16:	893b      	ldrh	r3, [r7, #8]
 8009a18:	7af9      	ldrb	r1, [r7, #11]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	f7f9 fab2 	bl	8002f84 <HAL_PCD_EP_Receive>
 8009a20:	4603      	mov	r3, r0
 8009a22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 f83a 	bl	8009aa0 <USBD_Get_USB_Status>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a30:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	4611      	mov	r1, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7f9 fac8 	bl	8002fe6 <HAL_PCD_EP_GetRxCount>
 8009a56:	4603      	mov	r3, r0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a68:	4b02      	ldr	r3, [pc, #8]	; (8009a74 <USBD_static_malloc+0x14>)
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bc80      	pop	{r7}
 8009a72:	4770      	bx	lr
 8009a74:	200014d8 	.word	0x200014d8

08009a78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]

}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bc80      	pop	{r7}
 8009a88:	4770      	bx	lr

08009a8a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	460b      	mov	r3, r1
 8009a94:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bc80      	pop	{r7}
 8009a9e:	4770      	bx	lr

08009aa0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d817      	bhi.n	8009ae4 <USBD_Get_USB_Status+0x44>
 8009ab4:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <USBD_Get_USB_Status+0x1c>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009acd 	.word	0x08009acd
 8009ac0:	08009ad3 	.word	0x08009ad3
 8009ac4:	08009ad9 	.word	0x08009ad9
 8009ac8:	08009adf 	.word	0x08009adf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad0:	e00b      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad6:	e008      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	e005      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae2:	e002      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae8:	bf00      	nop
  }
  return usb_status;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bc80      	pop	{r7}
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop

08009af8 <__errno>:
 8009af8:	4b01      	ldr	r3, [pc, #4]	; (8009b00 <__errno+0x8>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	2000017c 	.word	0x2000017c

08009b04 <__libc_init_array>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	2600      	movs	r6, #0
 8009b08:	4d0c      	ldr	r5, [pc, #48]	; (8009b3c <__libc_init_array+0x38>)
 8009b0a:	4c0d      	ldr	r4, [pc, #52]	; (8009b40 <__libc_init_array+0x3c>)
 8009b0c:	1b64      	subs	r4, r4, r5
 8009b0e:	10a4      	asrs	r4, r4, #2
 8009b10:	42a6      	cmp	r6, r4
 8009b12:	d109      	bne.n	8009b28 <__libc_init_array+0x24>
 8009b14:	f002 ff12 	bl	800c93c <_init>
 8009b18:	2600      	movs	r6, #0
 8009b1a:	4d0a      	ldr	r5, [pc, #40]	; (8009b44 <__libc_init_array+0x40>)
 8009b1c:	4c0a      	ldr	r4, [pc, #40]	; (8009b48 <__libc_init_array+0x44>)
 8009b1e:	1b64      	subs	r4, r4, r5
 8009b20:	10a4      	asrs	r4, r4, #2
 8009b22:	42a6      	cmp	r6, r4
 8009b24:	d105      	bne.n	8009b32 <__libc_init_array+0x2e>
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2c:	4798      	blx	r3
 8009b2e:	3601      	adds	r6, #1
 8009b30:	e7ee      	b.n	8009b10 <__libc_init_array+0xc>
 8009b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b36:	4798      	blx	r3
 8009b38:	3601      	adds	r6, #1
 8009b3a:	e7f2      	b.n	8009b22 <__libc_init_array+0x1e>
 8009b3c:	0800ce2c 	.word	0x0800ce2c
 8009b40:	0800ce2c 	.word	0x0800ce2c
 8009b44:	0800ce2c 	.word	0x0800ce2c
 8009b48:	0800ce30 	.word	0x0800ce30

08009b4c <memcpy>:
 8009b4c:	440a      	add	r2, r1
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b54:	d100      	bne.n	8009b58 <memcpy+0xc>
 8009b56:	4770      	bx	lr
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5e:	4291      	cmp	r1, r2
 8009b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b64:	d1f9      	bne.n	8009b5a <memcpy+0xe>
 8009b66:	bd10      	pop	{r4, pc}

08009b68 <memset>:
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4402      	add	r2, r0
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d100      	bne.n	8009b72 <memset+0xa>
 8009b70:	4770      	bx	lr
 8009b72:	f803 1b01 	strb.w	r1, [r3], #1
 8009b76:	e7f9      	b.n	8009b6c <memset+0x4>

08009b78 <__cvt>:
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7e:	461f      	mov	r7, r3
 8009b80:	bfbb      	ittet	lt
 8009b82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009b86:	461f      	movlt	r7, r3
 8009b88:	2300      	movge	r3, #0
 8009b8a:	232d      	movlt	r3, #45	; 0x2d
 8009b8c:	b088      	sub	sp, #32
 8009b8e:	4614      	mov	r4, r2
 8009b90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009b94:	7013      	strb	r3, [r2, #0]
 8009b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b98:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009b9c:	f023 0820 	bic.w	r8, r3, #32
 8009ba0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ba4:	d005      	beq.n	8009bb2 <__cvt+0x3a>
 8009ba6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009baa:	d100      	bne.n	8009bae <__cvt+0x36>
 8009bac:	3501      	adds	r5, #1
 8009bae:	2302      	movs	r3, #2
 8009bb0:	e000      	b.n	8009bb4 <__cvt+0x3c>
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	aa07      	add	r2, sp, #28
 8009bb6:	9204      	str	r2, [sp, #16]
 8009bb8:	aa06      	add	r2, sp, #24
 8009bba:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009bbe:	e9cd 3500 	strd	r3, r5, [sp]
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	f000 fcfb 	bl	800a5c0 <_dtoa_r>
 8009bca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bce:	4606      	mov	r6, r0
 8009bd0:	d102      	bne.n	8009bd8 <__cvt+0x60>
 8009bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bd4:	07db      	lsls	r3, r3, #31
 8009bd6:	d522      	bpl.n	8009c1e <__cvt+0xa6>
 8009bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bdc:	eb06 0905 	add.w	r9, r6, r5
 8009be0:	d110      	bne.n	8009c04 <__cvt+0x8c>
 8009be2:	7833      	ldrb	r3, [r6, #0]
 8009be4:	2b30      	cmp	r3, #48	; 0x30
 8009be6:	d10a      	bne.n	8009bfe <__cvt+0x86>
 8009be8:	2200      	movs	r2, #0
 8009bea:	2300      	movs	r3, #0
 8009bec:	4620      	mov	r0, r4
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f7f6 fee4 	bl	80009bc <__aeabi_dcmpeq>
 8009bf4:	b918      	cbnz	r0, 8009bfe <__cvt+0x86>
 8009bf6:	f1c5 0501 	rsb	r5, r5, #1
 8009bfa:	f8ca 5000 	str.w	r5, [sl]
 8009bfe:	f8da 3000 	ldr.w	r3, [sl]
 8009c02:	4499      	add	r9, r3
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	4620      	mov	r0, r4
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 fed6 	bl	80009bc <__aeabi_dcmpeq>
 8009c10:	b108      	cbz	r0, 8009c16 <__cvt+0x9e>
 8009c12:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c16:	2230      	movs	r2, #48	; 0x30
 8009c18:	9b07      	ldr	r3, [sp, #28]
 8009c1a:	454b      	cmp	r3, r9
 8009c1c:	d307      	bcc.n	8009c2e <__cvt+0xb6>
 8009c1e:	4630      	mov	r0, r6
 8009c20:	9b07      	ldr	r3, [sp, #28]
 8009c22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c24:	1b9b      	subs	r3, r3, r6
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	b008      	add	sp, #32
 8009c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2e:	1c59      	adds	r1, r3, #1
 8009c30:	9107      	str	r1, [sp, #28]
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	e7f0      	b.n	8009c18 <__cvt+0xa0>

08009c36 <__exponent>:
 8009c36:	4603      	mov	r3, r0
 8009c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c3a:	2900      	cmp	r1, #0
 8009c3c:	f803 2b02 	strb.w	r2, [r3], #2
 8009c40:	bfb6      	itet	lt
 8009c42:	222d      	movlt	r2, #45	; 0x2d
 8009c44:	222b      	movge	r2, #43	; 0x2b
 8009c46:	4249      	neglt	r1, r1
 8009c48:	2909      	cmp	r1, #9
 8009c4a:	7042      	strb	r2, [r0, #1]
 8009c4c:	dd2b      	ble.n	8009ca6 <__exponent+0x70>
 8009c4e:	f10d 0407 	add.w	r4, sp, #7
 8009c52:	46a4      	mov	ip, r4
 8009c54:	270a      	movs	r7, #10
 8009c56:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c5a:	460a      	mov	r2, r1
 8009c5c:	46a6      	mov	lr, r4
 8009c5e:	fb07 1516 	mls	r5, r7, r6, r1
 8009c62:	2a63      	cmp	r2, #99	; 0x63
 8009c64:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009c68:	4631      	mov	r1, r6
 8009c6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c72:	dcf0      	bgt.n	8009c56 <__exponent+0x20>
 8009c74:	3130      	adds	r1, #48	; 0x30
 8009c76:	f1ae 0502 	sub.w	r5, lr, #2
 8009c7a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c7e:	4629      	mov	r1, r5
 8009c80:	1c44      	adds	r4, r0, #1
 8009c82:	4561      	cmp	r1, ip
 8009c84:	d30a      	bcc.n	8009c9c <__exponent+0x66>
 8009c86:	f10d 0209 	add.w	r2, sp, #9
 8009c8a:	eba2 020e 	sub.w	r2, r2, lr
 8009c8e:	4565      	cmp	r5, ip
 8009c90:	bf88      	it	hi
 8009c92:	2200      	movhi	r2, #0
 8009c94:	4413      	add	r3, r2
 8009c96:	1a18      	subs	r0, r3, r0
 8009c98:	b003      	add	sp, #12
 8009c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ca0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ca4:	e7ed      	b.n	8009c82 <__exponent+0x4c>
 8009ca6:	2330      	movs	r3, #48	; 0x30
 8009ca8:	3130      	adds	r1, #48	; 0x30
 8009caa:	7083      	strb	r3, [r0, #2]
 8009cac:	70c1      	strb	r1, [r0, #3]
 8009cae:	1d03      	adds	r3, r0, #4
 8009cb0:	e7f1      	b.n	8009c96 <__exponent+0x60>
	...

08009cb4 <_printf_float>:
 8009cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb8:	b091      	sub	sp, #68	; 0x44
 8009cba:	460c      	mov	r4, r1
 8009cbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	f001 fa69 	bl	800b19c <_localeconv_r>
 8009cca:	6803      	ldr	r3, [r0, #0]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd0:	f7f6 fa48 	bl	8000164 <strlen>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8009cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cdc:	900a      	str	r0, [sp, #40]	; 0x28
 8009cde:	3307      	adds	r3, #7
 8009ce0:	f023 0307 	bic.w	r3, r3, #7
 8009ce4:	f103 0208 	add.w	r2, r3, #8
 8009ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009cec:	f8d4 b000 	ldr.w	fp, [r4]
 8009cf0:	f8c8 2000 	str.w	r2, [r8]
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cfc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009d00:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4b9c      	ldr	r3, [pc, #624]	; (8009f80 <_printf_float+0x2cc>)
 8009d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d10:	f7f6 fe86 	bl	8000a20 <__aeabi_dcmpun>
 8009d14:	bb70      	cbnz	r0, 8009d74 <_printf_float+0xc0>
 8009d16:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	4b98      	ldr	r3, [pc, #608]	; (8009f80 <_printf_float+0x2cc>)
 8009d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d20:	f7f6 fe60 	bl	80009e4 <__aeabi_dcmple>
 8009d24:	bb30      	cbnz	r0, 8009d74 <_printf_float+0xc0>
 8009d26:	2200      	movs	r2, #0
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	4651      	mov	r1, sl
 8009d2e:	f7f6 fe4f 	bl	80009d0 <__aeabi_dcmplt>
 8009d32:	b110      	cbz	r0, 8009d3a <_printf_float+0x86>
 8009d34:	232d      	movs	r3, #45	; 0x2d
 8009d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d3a:	4b92      	ldr	r3, [pc, #584]	; (8009f84 <_printf_float+0x2d0>)
 8009d3c:	4892      	ldr	r0, [pc, #584]	; (8009f88 <_printf_float+0x2d4>)
 8009d3e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d42:	bf94      	ite	ls
 8009d44:	4698      	movls	r8, r3
 8009d46:	4680      	movhi	r8, r0
 8009d48:	2303      	movs	r3, #3
 8009d4a:	f04f 0a00 	mov.w	sl, #0
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	f02b 0304 	bic.w	r3, fp, #4
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	4633      	mov	r3, r6
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	9700      	str	r7, [sp, #0]
 8009d5e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d60:	f000 f9d4 	bl	800a10c <_printf_common>
 8009d64:	3001      	adds	r0, #1
 8009d66:	f040 8090 	bne.w	8009e8a <_printf_float+0x1d6>
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	b011      	add	sp, #68	; 0x44
 8009d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d74:	4642      	mov	r2, r8
 8009d76:	4653      	mov	r3, sl
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4651      	mov	r1, sl
 8009d7c:	f7f6 fe50 	bl	8000a20 <__aeabi_dcmpun>
 8009d80:	b148      	cbz	r0, 8009d96 <_printf_float+0xe2>
 8009d82:	f1ba 0f00 	cmp.w	sl, #0
 8009d86:	bfb8      	it	lt
 8009d88:	232d      	movlt	r3, #45	; 0x2d
 8009d8a:	4880      	ldr	r0, [pc, #512]	; (8009f8c <_printf_float+0x2d8>)
 8009d8c:	bfb8      	it	lt
 8009d8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d92:	4b7f      	ldr	r3, [pc, #508]	; (8009f90 <_printf_float+0x2dc>)
 8009d94:	e7d3      	b.n	8009d3e <_printf_float+0x8a>
 8009d96:	6863      	ldr	r3, [r4, #4]
 8009d98:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	d142      	bne.n	8009e26 <_printf_float+0x172>
 8009da0:	2306      	movs	r3, #6
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	9206      	str	r2, [sp, #24]
 8009da8:	aa0e      	add	r2, sp, #56	; 0x38
 8009daa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009dae:	aa0d      	add	r2, sp, #52	; 0x34
 8009db0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009db4:	9203      	str	r2, [sp, #12]
 8009db6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009dba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	6863      	ldr	r3, [r4, #4]
 8009dc2:	4642      	mov	r2, r8
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	4653      	mov	r3, sl
 8009dca:	910b      	str	r1, [sp, #44]	; 0x2c
 8009dcc:	f7ff fed4 	bl	8009b78 <__cvt>
 8009dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	2947      	cmp	r1, #71	; 0x47
 8009dd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009dd8:	d108      	bne.n	8009dec <_printf_float+0x138>
 8009dda:	1cc8      	adds	r0, r1, #3
 8009ddc:	db02      	blt.n	8009de4 <_printf_float+0x130>
 8009dde:	6863      	ldr	r3, [r4, #4]
 8009de0:	4299      	cmp	r1, r3
 8009de2:	dd40      	ble.n	8009e66 <_printf_float+0x1b2>
 8009de4:	f1a9 0902 	sub.w	r9, r9, #2
 8009de8:	fa5f f989 	uxtb.w	r9, r9
 8009dec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009df0:	d81f      	bhi.n	8009e32 <_printf_float+0x17e>
 8009df2:	464a      	mov	r2, r9
 8009df4:	3901      	subs	r1, #1
 8009df6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dfa:	910d      	str	r1, [sp, #52]	; 0x34
 8009dfc:	f7ff ff1b 	bl	8009c36 <__exponent>
 8009e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e02:	4682      	mov	sl, r0
 8009e04:	1813      	adds	r3, r2, r0
 8009e06:	2a01      	cmp	r2, #1
 8009e08:	6123      	str	r3, [r4, #16]
 8009e0a:	dc02      	bgt.n	8009e12 <_printf_float+0x15e>
 8009e0c:	6822      	ldr	r2, [r4, #0]
 8009e0e:	07d2      	lsls	r2, r2, #31
 8009e10:	d501      	bpl.n	8009e16 <_printf_float+0x162>
 8009e12:	3301      	adds	r3, #1
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d09b      	beq.n	8009d56 <_printf_float+0xa2>
 8009e1e:	232d      	movs	r3, #45	; 0x2d
 8009e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e24:	e797      	b.n	8009d56 <_printf_float+0xa2>
 8009e26:	2947      	cmp	r1, #71	; 0x47
 8009e28:	d1bc      	bne.n	8009da4 <_printf_float+0xf0>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1ba      	bne.n	8009da4 <_printf_float+0xf0>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e7b7      	b.n	8009da2 <_printf_float+0xee>
 8009e32:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e36:	d118      	bne.n	8009e6a <_printf_float+0x1b6>
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	dd0b      	ble.n	8009e56 <_printf_float+0x1a2>
 8009e3e:	6121      	str	r1, [r4, #16]
 8009e40:	b913      	cbnz	r3, 8009e48 <_printf_float+0x194>
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	07d0      	lsls	r0, r2, #31
 8009e46:	d502      	bpl.n	8009e4e <_printf_float+0x19a>
 8009e48:	3301      	adds	r3, #1
 8009e4a:	440b      	add	r3, r1
 8009e4c:	6123      	str	r3, [r4, #16]
 8009e4e:	f04f 0a00 	mov.w	sl, #0
 8009e52:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e54:	e7df      	b.n	8009e16 <_printf_float+0x162>
 8009e56:	b913      	cbnz	r3, 8009e5e <_printf_float+0x1aa>
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	07d2      	lsls	r2, r2, #31
 8009e5c:	d501      	bpl.n	8009e62 <_printf_float+0x1ae>
 8009e5e:	3302      	adds	r3, #2
 8009e60:	e7f4      	b.n	8009e4c <_printf_float+0x198>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e7f2      	b.n	8009e4c <_printf_float+0x198>
 8009e66:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e6c:	4299      	cmp	r1, r3
 8009e6e:	db05      	blt.n	8009e7c <_printf_float+0x1c8>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	6121      	str	r1, [r4, #16]
 8009e74:	07d8      	lsls	r0, r3, #31
 8009e76:	d5ea      	bpl.n	8009e4e <_printf_float+0x19a>
 8009e78:	1c4b      	adds	r3, r1, #1
 8009e7a:	e7e7      	b.n	8009e4c <_printf_float+0x198>
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	bfcc      	ite	gt
 8009e80:	2201      	movgt	r2, #1
 8009e82:	f1c1 0202 	rsble	r2, r1, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	e7e0      	b.n	8009e4c <_printf_float+0x198>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	055a      	lsls	r2, r3, #21
 8009e8e:	d407      	bmi.n	8009ea0 <_printf_float+0x1ec>
 8009e90:	6923      	ldr	r3, [r4, #16]
 8009e92:	4642      	mov	r2, r8
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d12b      	bne.n	8009ef6 <_printf_float+0x242>
 8009e9e:	e764      	b.n	8009d6a <_printf_float+0xb6>
 8009ea0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ea4:	f240 80dd 	bls.w	800a062 <_printf_float+0x3ae>
 8009ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009eac:	2200      	movs	r2, #0
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f7f6 fd84 	bl	80009bc <__aeabi_dcmpeq>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d033      	beq.n	8009f20 <_printf_float+0x26c>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	4a35      	ldr	r2, [pc, #212]	; (8009f94 <_printf_float+0x2e0>)
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f af51 	beq.w	8009d6a <_printf_float+0xb6>
 8009ec8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	db02      	blt.n	8009ed6 <_printf_float+0x222>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	07d8      	lsls	r0, r3, #31
 8009ed4:	d50f      	bpl.n	8009ef6 <_printf_float+0x242>
 8009ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eda:	4631      	mov	r1, r6
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b8      	blx	r7
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	f43f af42 	beq.w	8009d6a <_printf_float+0xb6>
 8009ee6:	f04f 0800 	mov.w	r8, #0
 8009eea:	f104 091a 	add.w	r9, r4, #26
 8009eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4543      	cmp	r3, r8
 8009ef4:	dc09      	bgt.n	8009f0a <_printf_float+0x256>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	079b      	lsls	r3, r3, #30
 8009efa:	f100 8102 	bmi.w	800a102 <_printf_float+0x44e>
 8009efe:	68e0      	ldr	r0, [r4, #12]
 8009f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f02:	4298      	cmp	r0, r3
 8009f04:	bfb8      	it	lt
 8009f06:	4618      	movlt	r0, r3
 8009f08:	e731      	b.n	8009d6e <_printf_float+0xba>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	464a      	mov	r2, r9
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	f43f af28 	beq.w	8009d6a <_printf_float+0xb6>
 8009f1a:	f108 0801 	add.w	r8, r8, #1
 8009f1e:	e7e6      	b.n	8009eee <_printf_float+0x23a>
 8009f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dc38      	bgt.n	8009f98 <_printf_float+0x2e4>
 8009f26:	2301      	movs	r3, #1
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	4a19      	ldr	r2, [pc, #100]	; (8009f94 <_printf_float+0x2e0>)
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	f43f af1a 	beq.w	8009d6a <_printf_float+0xb6>
 8009f36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	d102      	bne.n	8009f44 <_printf_float+0x290>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	07d9      	lsls	r1, r3, #31
 8009f42:	d5d8      	bpl.n	8009ef6 <_printf_float+0x242>
 8009f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f af0b 	beq.w	8009d6a <_printf_float+0xb6>
 8009f54:	f04f 0900 	mov.w	r9, #0
 8009f58:	f104 0a1a 	add.w	sl, r4, #26
 8009f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f5e:	425b      	negs	r3, r3
 8009f60:	454b      	cmp	r3, r9
 8009f62:	dc01      	bgt.n	8009f68 <_printf_float+0x2b4>
 8009f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f66:	e794      	b.n	8009e92 <_printf_float+0x1de>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	4652      	mov	r2, sl
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b8      	blx	r7
 8009f72:	3001      	adds	r0, #1
 8009f74:	f43f aef9 	beq.w	8009d6a <_printf_float+0xb6>
 8009f78:	f109 0901 	add.w	r9, r9, #1
 8009f7c:	e7ee      	b.n	8009f5c <_printf_float+0x2a8>
 8009f7e:	bf00      	nop
 8009f80:	7fefffff 	.word	0x7fefffff
 8009f84:	0800ca58 	.word	0x0800ca58
 8009f88:	0800ca5c 	.word	0x0800ca5c
 8009f8c:	0800ca64 	.word	0x0800ca64
 8009f90:	0800ca60 	.word	0x0800ca60
 8009f94:	0800ca68 	.word	0x0800ca68
 8009f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	bfa8      	it	ge
 8009fa0:	461a      	movge	r2, r3
 8009fa2:	2a00      	cmp	r2, #0
 8009fa4:	4691      	mov	r9, r2
 8009fa6:	dc37      	bgt.n	800a018 <_printf_float+0x364>
 8009fa8:	f04f 0b00 	mov.w	fp, #0
 8009fac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fb0:	f104 021a 	add.w	r2, r4, #26
 8009fb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009fb8:	ebaa 0309 	sub.w	r3, sl, r9
 8009fbc:	455b      	cmp	r3, fp
 8009fbe:	dc33      	bgt.n	800a028 <_printf_float+0x374>
 8009fc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	db3b      	blt.n	800a040 <_printf_float+0x38c>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	07da      	lsls	r2, r3, #31
 8009fcc:	d438      	bmi.n	800a040 <_printf_float+0x38c>
 8009fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009fd2:	eba3 020a 	sub.w	r2, r3, sl
 8009fd6:	eba3 0901 	sub.w	r9, r3, r1
 8009fda:	4591      	cmp	r9, r2
 8009fdc:	bfa8      	it	ge
 8009fde:	4691      	movge	r9, r2
 8009fe0:	f1b9 0f00 	cmp.w	r9, #0
 8009fe4:	dc34      	bgt.n	800a050 <_printf_float+0x39c>
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fee:	f104 0a1a 	add.w	sl, r4, #26
 8009ff2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ff6:	1a9b      	subs	r3, r3, r2
 8009ff8:	eba3 0309 	sub.w	r3, r3, r9
 8009ffc:	4543      	cmp	r3, r8
 8009ffe:	f77f af7a 	ble.w	8009ef6 <_printf_float+0x242>
 800a002:	2301      	movs	r3, #1
 800a004:	4652      	mov	r2, sl
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	47b8      	blx	r7
 800a00c:	3001      	adds	r0, #1
 800a00e:	f43f aeac 	beq.w	8009d6a <_printf_float+0xb6>
 800a012:	f108 0801 	add.w	r8, r8, #1
 800a016:	e7ec      	b.n	8009ff2 <_printf_float+0x33e>
 800a018:	4613      	mov	r3, r2
 800a01a:	4631      	mov	r1, r6
 800a01c:	4642      	mov	r2, r8
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	d1c0      	bne.n	8009fa8 <_printf_float+0x2f4>
 800a026:	e6a0      	b.n	8009d6a <_printf_float+0xb6>
 800a028:	2301      	movs	r3, #1
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a030:	47b8      	blx	r7
 800a032:	3001      	adds	r0, #1
 800a034:	f43f ae99 	beq.w	8009d6a <_printf_float+0xb6>
 800a038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a03a:	f10b 0b01 	add.w	fp, fp, #1
 800a03e:	e7b9      	b.n	8009fb4 <_printf_float+0x300>
 800a040:	4631      	mov	r1, r6
 800a042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	d1bf      	bne.n	8009fce <_printf_float+0x31a>
 800a04e:	e68c      	b.n	8009d6a <_printf_float+0xb6>
 800a050:	464b      	mov	r3, r9
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	eb08 020a 	add.w	r2, r8, sl
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	d1c2      	bne.n	8009fe6 <_printf_float+0x332>
 800a060:	e683      	b.n	8009d6a <_printf_float+0xb6>
 800a062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a064:	2a01      	cmp	r2, #1
 800a066:	dc01      	bgt.n	800a06c <_printf_float+0x3b8>
 800a068:	07db      	lsls	r3, r3, #31
 800a06a:	d537      	bpl.n	800a0dc <_printf_float+0x428>
 800a06c:	2301      	movs	r3, #1
 800a06e:	4642      	mov	r2, r8
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	f43f ae77 	beq.w	8009d6a <_printf_float+0xb6>
 800a07c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f ae6f 	beq.w	8009d6a <_printf_float+0xb6>
 800a08c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a090:	2200      	movs	r2, #0
 800a092:	2300      	movs	r3, #0
 800a094:	f7f6 fc92 	bl	80009bc <__aeabi_dcmpeq>
 800a098:	b9d8      	cbnz	r0, 800a0d2 <_printf_float+0x41e>
 800a09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a09c:	f108 0201 	add.w	r2, r8, #1
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d10e      	bne.n	800a0ca <_printf_float+0x416>
 800a0ac:	e65d      	b.n	8009d6a <_printf_float+0xb6>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	464a      	mov	r2, r9
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b8      	blx	r7
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f43f ae56 	beq.w	8009d6a <_printf_float+0xb6>
 800a0be:	f108 0801 	add.w	r8, r8, #1
 800a0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	4543      	cmp	r3, r8
 800a0c8:	dcf1      	bgt.n	800a0ae <_printf_float+0x3fa>
 800a0ca:	4653      	mov	r3, sl
 800a0cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0d0:	e6e0      	b.n	8009e94 <_printf_float+0x1e0>
 800a0d2:	f04f 0800 	mov.w	r8, #0
 800a0d6:	f104 091a 	add.w	r9, r4, #26
 800a0da:	e7f2      	b.n	800a0c2 <_printf_float+0x40e>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4642      	mov	r2, r8
 800a0e0:	e7df      	b.n	800a0a2 <_printf_float+0x3ee>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	464a      	mov	r2, r9
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	f43f ae3c 	beq.w	8009d6a <_printf_float+0xb6>
 800a0f2:	f108 0801 	add.w	r8, r8, #1
 800a0f6:	68e3      	ldr	r3, [r4, #12]
 800a0f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0fa:	1a5b      	subs	r3, r3, r1
 800a0fc:	4543      	cmp	r3, r8
 800a0fe:	dcf0      	bgt.n	800a0e2 <_printf_float+0x42e>
 800a100:	e6fd      	b.n	8009efe <_printf_float+0x24a>
 800a102:	f04f 0800 	mov.w	r8, #0
 800a106:	f104 0919 	add.w	r9, r4, #25
 800a10a:	e7f4      	b.n	800a0f6 <_printf_float+0x442>

0800a10c <_printf_common>:
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	4616      	mov	r6, r2
 800a112:	4699      	mov	r9, r3
 800a114:	688a      	ldr	r2, [r1, #8]
 800a116:	690b      	ldr	r3, [r1, #16]
 800a118:	4607      	mov	r7, r0
 800a11a:	4293      	cmp	r3, r2
 800a11c:	bfb8      	it	lt
 800a11e:	4613      	movlt	r3, r2
 800a120:	6033      	str	r3, [r6, #0]
 800a122:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a126:	460c      	mov	r4, r1
 800a128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a12c:	b10a      	cbz	r2, 800a132 <_printf_common+0x26>
 800a12e:	3301      	adds	r3, #1
 800a130:	6033      	str	r3, [r6, #0]
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	0699      	lsls	r1, r3, #26
 800a136:	bf42      	ittt	mi
 800a138:	6833      	ldrmi	r3, [r6, #0]
 800a13a:	3302      	addmi	r3, #2
 800a13c:	6033      	strmi	r3, [r6, #0]
 800a13e:	6825      	ldr	r5, [r4, #0]
 800a140:	f015 0506 	ands.w	r5, r5, #6
 800a144:	d106      	bne.n	800a154 <_printf_common+0x48>
 800a146:	f104 0a19 	add.w	sl, r4, #25
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	6832      	ldr	r2, [r6, #0]
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	42ab      	cmp	r3, r5
 800a152:	dc28      	bgt.n	800a1a6 <_printf_common+0x9a>
 800a154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a158:	1e13      	subs	r3, r2, #0
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	bf18      	it	ne
 800a15e:	2301      	movne	r3, #1
 800a160:	0692      	lsls	r2, r2, #26
 800a162:	d42d      	bmi.n	800a1c0 <_printf_common+0xb4>
 800a164:	4649      	mov	r1, r9
 800a166:	4638      	mov	r0, r7
 800a168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a16c:	47c0      	blx	r8
 800a16e:	3001      	adds	r0, #1
 800a170:	d020      	beq.n	800a1b4 <_printf_common+0xa8>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	68e5      	ldr	r5, [r4, #12]
 800a176:	f003 0306 	and.w	r3, r3, #6
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	bf18      	it	ne
 800a17e:	2500      	movne	r5, #0
 800a180:	6832      	ldr	r2, [r6, #0]
 800a182:	f04f 0600 	mov.w	r6, #0
 800a186:	68a3      	ldr	r3, [r4, #8]
 800a188:	bf08      	it	eq
 800a18a:	1aad      	subeq	r5, r5, r2
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	bf08      	it	eq
 800a190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a194:	4293      	cmp	r3, r2
 800a196:	bfc4      	itt	gt
 800a198:	1a9b      	subgt	r3, r3, r2
 800a19a:	18ed      	addgt	r5, r5, r3
 800a19c:	341a      	adds	r4, #26
 800a19e:	42b5      	cmp	r5, r6
 800a1a0:	d11a      	bne.n	800a1d8 <_printf_common+0xcc>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	e008      	b.n	800a1b8 <_printf_common+0xac>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	47c0      	blx	r8
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d103      	bne.n	800a1bc <_printf_common+0xb0>
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1bc:	3501      	adds	r5, #1
 800a1be:	e7c4      	b.n	800a14a <_printf_common+0x3e>
 800a1c0:	2030      	movs	r0, #48	; 0x30
 800a1c2:	18e1      	adds	r1, r4, r3
 800a1c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1ce:	4422      	add	r2, r4
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1d6:	e7c5      	b.n	800a164 <_printf_common+0x58>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4622      	mov	r2, r4
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4638      	mov	r0, r7
 800a1e0:	47c0      	blx	r8
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d0e6      	beq.n	800a1b4 <_printf_common+0xa8>
 800a1e6:	3601      	adds	r6, #1
 800a1e8:	e7d9      	b.n	800a19e <_printf_common+0x92>
	...

0800a1ec <_printf_i>:
 800a1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	7e0f      	ldrb	r7, [r1, #24]
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	2f78      	cmp	r7, #120	; 0x78
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	469a      	mov	sl, r3
 800a1fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a202:	d807      	bhi.n	800a214 <_printf_i+0x28>
 800a204:	2f62      	cmp	r7, #98	; 0x62
 800a206:	d80a      	bhi.n	800a21e <_printf_i+0x32>
 800a208:	2f00      	cmp	r7, #0
 800a20a:	f000 80d9 	beq.w	800a3c0 <_printf_i+0x1d4>
 800a20e:	2f58      	cmp	r7, #88	; 0x58
 800a210:	f000 80a4 	beq.w	800a35c <_printf_i+0x170>
 800a214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a21c:	e03a      	b.n	800a294 <_printf_i+0xa8>
 800a21e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a222:	2b15      	cmp	r3, #21
 800a224:	d8f6      	bhi.n	800a214 <_printf_i+0x28>
 800a226:	a101      	add	r1, pc, #4	; (adr r1, 800a22c <_printf_i+0x40>)
 800a228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a22c:	0800a285 	.word	0x0800a285
 800a230:	0800a299 	.word	0x0800a299
 800a234:	0800a215 	.word	0x0800a215
 800a238:	0800a215 	.word	0x0800a215
 800a23c:	0800a215 	.word	0x0800a215
 800a240:	0800a215 	.word	0x0800a215
 800a244:	0800a299 	.word	0x0800a299
 800a248:	0800a215 	.word	0x0800a215
 800a24c:	0800a215 	.word	0x0800a215
 800a250:	0800a215 	.word	0x0800a215
 800a254:	0800a215 	.word	0x0800a215
 800a258:	0800a3a7 	.word	0x0800a3a7
 800a25c:	0800a2c9 	.word	0x0800a2c9
 800a260:	0800a389 	.word	0x0800a389
 800a264:	0800a215 	.word	0x0800a215
 800a268:	0800a215 	.word	0x0800a215
 800a26c:	0800a3c9 	.word	0x0800a3c9
 800a270:	0800a215 	.word	0x0800a215
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a215 	.word	0x0800a215
 800a27c:	0800a215 	.word	0x0800a215
 800a280:	0800a391 	.word	0x0800a391
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	1d1a      	adds	r2, r3, #4
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	602a      	str	r2, [r5, #0]
 800a28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a294:	2301      	movs	r3, #1
 800a296:	e0a4      	b.n	800a3e2 <_printf_i+0x1f6>
 800a298:	6820      	ldr	r0, [r4, #0]
 800a29a:	6829      	ldr	r1, [r5, #0]
 800a29c:	0606      	lsls	r6, r0, #24
 800a29e:	f101 0304 	add.w	r3, r1, #4
 800a2a2:	d50a      	bpl.n	800a2ba <_printf_i+0xce>
 800a2a4:	680e      	ldr	r6, [r1, #0]
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	2e00      	cmp	r6, #0
 800a2aa:	da03      	bge.n	800a2b4 <_printf_i+0xc8>
 800a2ac:	232d      	movs	r3, #45	; 0x2d
 800a2ae:	4276      	negs	r6, r6
 800a2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b4:	230a      	movs	r3, #10
 800a2b6:	485e      	ldr	r0, [pc, #376]	; (800a430 <_printf_i+0x244>)
 800a2b8:	e019      	b.n	800a2ee <_printf_i+0x102>
 800a2ba:	680e      	ldr	r6, [r1, #0]
 800a2bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	bf18      	it	ne
 800a2c4:	b236      	sxthne	r6, r6
 800a2c6:	e7ef      	b.n	800a2a8 <_printf_i+0xbc>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	6820      	ldr	r0, [r4, #0]
 800a2cc:	1d19      	adds	r1, r3, #4
 800a2ce:	6029      	str	r1, [r5, #0]
 800a2d0:	0601      	lsls	r1, r0, #24
 800a2d2:	d501      	bpl.n	800a2d8 <_printf_i+0xec>
 800a2d4:	681e      	ldr	r6, [r3, #0]
 800a2d6:	e002      	b.n	800a2de <_printf_i+0xf2>
 800a2d8:	0646      	lsls	r6, r0, #25
 800a2da:	d5fb      	bpl.n	800a2d4 <_printf_i+0xe8>
 800a2dc:	881e      	ldrh	r6, [r3, #0]
 800a2de:	2f6f      	cmp	r7, #111	; 0x6f
 800a2e0:	bf0c      	ite	eq
 800a2e2:	2308      	moveq	r3, #8
 800a2e4:	230a      	movne	r3, #10
 800a2e6:	4852      	ldr	r0, [pc, #328]	; (800a430 <_printf_i+0x244>)
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2ee:	6865      	ldr	r5, [r4, #4]
 800a2f0:	2d00      	cmp	r5, #0
 800a2f2:	bfa8      	it	ge
 800a2f4:	6821      	ldrge	r1, [r4, #0]
 800a2f6:	60a5      	str	r5, [r4, #8]
 800a2f8:	bfa4      	itt	ge
 800a2fa:	f021 0104 	bicge.w	r1, r1, #4
 800a2fe:	6021      	strge	r1, [r4, #0]
 800a300:	b90e      	cbnz	r6, 800a306 <_printf_i+0x11a>
 800a302:	2d00      	cmp	r5, #0
 800a304:	d04d      	beq.n	800a3a2 <_printf_i+0x1b6>
 800a306:	4615      	mov	r5, r2
 800a308:	fbb6 f1f3 	udiv	r1, r6, r3
 800a30c:	fb03 6711 	mls	r7, r3, r1, r6
 800a310:	5dc7      	ldrb	r7, [r0, r7]
 800a312:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a316:	4637      	mov	r7, r6
 800a318:	42bb      	cmp	r3, r7
 800a31a:	460e      	mov	r6, r1
 800a31c:	d9f4      	bls.n	800a308 <_printf_i+0x11c>
 800a31e:	2b08      	cmp	r3, #8
 800a320:	d10b      	bne.n	800a33a <_printf_i+0x14e>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	07de      	lsls	r6, r3, #31
 800a326:	d508      	bpl.n	800a33a <_printf_i+0x14e>
 800a328:	6923      	ldr	r3, [r4, #16]
 800a32a:	6861      	ldr	r1, [r4, #4]
 800a32c:	4299      	cmp	r1, r3
 800a32e:	bfde      	ittt	le
 800a330:	2330      	movle	r3, #48	; 0x30
 800a332:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a336:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a33a:	1b52      	subs	r2, r2, r5
 800a33c:	6122      	str	r2, [r4, #16]
 800a33e:	464b      	mov	r3, r9
 800a340:	4621      	mov	r1, r4
 800a342:	4640      	mov	r0, r8
 800a344:	f8cd a000 	str.w	sl, [sp]
 800a348:	aa03      	add	r2, sp, #12
 800a34a:	f7ff fedf 	bl	800a10c <_printf_common>
 800a34e:	3001      	adds	r0, #1
 800a350:	d14c      	bne.n	800a3ec <_printf_i+0x200>
 800a352:	f04f 30ff 	mov.w	r0, #4294967295
 800a356:	b004      	add	sp, #16
 800a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35c:	4834      	ldr	r0, [pc, #208]	; (800a430 <_printf_i+0x244>)
 800a35e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a362:	6829      	ldr	r1, [r5, #0]
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	f851 6b04 	ldr.w	r6, [r1], #4
 800a36a:	6029      	str	r1, [r5, #0]
 800a36c:	061d      	lsls	r5, r3, #24
 800a36e:	d514      	bpl.n	800a39a <_printf_i+0x1ae>
 800a370:	07df      	lsls	r7, r3, #31
 800a372:	bf44      	itt	mi
 800a374:	f043 0320 	orrmi.w	r3, r3, #32
 800a378:	6023      	strmi	r3, [r4, #0]
 800a37a:	b91e      	cbnz	r6, 800a384 <_printf_i+0x198>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	f023 0320 	bic.w	r3, r3, #32
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	2310      	movs	r3, #16
 800a386:	e7af      	b.n	800a2e8 <_printf_i+0xfc>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	f043 0320 	orr.w	r3, r3, #32
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	2378      	movs	r3, #120	; 0x78
 800a392:	4828      	ldr	r0, [pc, #160]	; (800a434 <_printf_i+0x248>)
 800a394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a398:	e7e3      	b.n	800a362 <_printf_i+0x176>
 800a39a:	0659      	lsls	r1, r3, #25
 800a39c:	bf48      	it	mi
 800a39e:	b2b6      	uxthmi	r6, r6
 800a3a0:	e7e6      	b.n	800a370 <_printf_i+0x184>
 800a3a2:	4615      	mov	r5, r2
 800a3a4:	e7bb      	b.n	800a31e <_printf_i+0x132>
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	6826      	ldr	r6, [r4, #0]
 800a3aa:	1d18      	adds	r0, r3, #4
 800a3ac:	6961      	ldr	r1, [r4, #20]
 800a3ae:	6028      	str	r0, [r5, #0]
 800a3b0:	0635      	lsls	r5, r6, #24
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	d501      	bpl.n	800a3ba <_printf_i+0x1ce>
 800a3b6:	6019      	str	r1, [r3, #0]
 800a3b8:	e002      	b.n	800a3c0 <_printf_i+0x1d4>
 800a3ba:	0670      	lsls	r0, r6, #25
 800a3bc:	d5fb      	bpl.n	800a3b6 <_printf_i+0x1ca>
 800a3be:	8019      	strh	r1, [r3, #0]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4615      	mov	r5, r2
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	e7ba      	b.n	800a33e <_printf_i+0x152>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	1d1a      	adds	r2, r3, #4
 800a3ce:	602a      	str	r2, [r5, #0]
 800a3d0:	681d      	ldr	r5, [r3, #0]
 800a3d2:	6862      	ldr	r2, [r4, #4]
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f000 feed 	bl	800b1b4 <memchr>
 800a3da:	b108      	cbz	r0, 800a3e0 <_printf_i+0x1f4>
 800a3dc:	1b40      	subs	r0, r0, r5
 800a3de:	6060      	str	r0, [r4, #4]
 800a3e0:	6863      	ldr	r3, [r4, #4]
 800a3e2:	6123      	str	r3, [r4, #16]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ea:	e7a8      	b.n	800a33e <_printf_i+0x152>
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	47d0      	blx	sl
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	d0ab      	beq.n	800a352 <_printf_i+0x166>
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	079b      	lsls	r3, r3, #30
 800a3fe:	d413      	bmi.n	800a428 <_printf_i+0x23c>
 800a400:	68e0      	ldr	r0, [r4, #12]
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	4298      	cmp	r0, r3
 800a406:	bfb8      	it	lt
 800a408:	4618      	movlt	r0, r3
 800a40a:	e7a4      	b.n	800a356 <_printf_i+0x16a>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4632      	mov	r2, r6
 800a410:	4649      	mov	r1, r9
 800a412:	4640      	mov	r0, r8
 800a414:	47d0      	blx	sl
 800a416:	3001      	adds	r0, #1
 800a418:	d09b      	beq.n	800a352 <_printf_i+0x166>
 800a41a:	3501      	adds	r5, #1
 800a41c:	68e3      	ldr	r3, [r4, #12]
 800a41e:	9903      	ldr	r1, [sp, #12]
 800a420:	1a5b      	subs	r3, r3, r1
 800a422:	42ab      	cmp	r3, r5
 800a424:	dcf2      	bgt.n	800a40c <_printf_i+0x220>
 800a426:	e7eb      	b.n	800a400 <_printf_i+0x214>
 800a428:	2500      	movs	r5, #0
 800a42a:	f104 0619 	add.w	r6, r4, #25
 800a42e:	e7f5      	b.n	800a41c <_printf_i+0x230>
 800a430:	0800ca6a 	.word	0x0800ca6a
 800a434:	0800ca7b 	.word	0x0800ca7b

0800a438 <siprintf>:
 800a438:	b40e      	push	{r1, r2, r3}
 800a43a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a43e:	b500      	push	{lr}
 800a440:	b09c      	sub	sp, #112	; 0x70
 800a442:	ab1d      	add	r3, sp, #116	; 0x74
 800a444:	9002      	str	r0, [sp, #8]
 800a446:	9006      	str	r0, [sp, #24]
 800a448:	9107      	str	r1, [sp, #28]
 800a44a:	9104      	str	r1, [sp, #16]
 800a44c:	4808      	ldr	r0, [pc, #32]	; (800a470 <siprintf+0x38>)
 800a44e:	4909      	ldr	r1, [pc, #36]	; (800a474 <siprintf+0x3c>)
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	9105      	str	r1, [sp, #20]
 800a456:	6800      	ldr	r0, [r0, #0]
 800a458:	a902      	add	r1, sp, #8
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	f001 fb86 	bl	800bb6c <_svfiprintf_r>
 800a460:	2200      	movs	r2, #0
 800a462:	9b02      	ldr	r3, [sp, #8]
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	b01c      	add	sp, #112	; 0x70
 800a468:	f85d eb04 	ldr.w	lr, [sp], #4
 800a46c:	b003      	add	sp, #12
 800a46e:	4770      	bx	lr
 800a470:	2000017c 	.word	0x2000017c
 800a474:	ffff0208 	.word	0xffff0208

0800a478 <strcat>:
 800a478:	4602      	mov	r2, r0
 800a47a:	b510      	push	{r4, lr}
 800a47c:	7814      	ldrb	r4, [r2, #0]
 800a47e:	4613      	mov	r3, r2
 800a480:	3201      	adds	r2, #1
 800a482:	2c00      	cmp	r4, #0
 800a484:	d1fa      	bne.n	800a47c <strcat+0x4>
 800a486:	3b01      	subs	r3, #1
 800a488:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a48c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a490:	2a00      	cmp	r2, #0
 800a492:	d1f9      	bne.n	800a488 <strcat+0x10>
 800a494:	bd10      	pop	{r4, pc}

0800a496 <strcpy>:
 800a496:	4603      	mov	r3, r0
 800a498:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a49c:	f803 2b01 	strb.w	r2, [r3], #1
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d1f9      	bne.n	800a498 <strcpy+0x2>
 800a4a4:	4770      	bx	lr

0800a4a6 <quorem>:
 800a4a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4aa:	6903      	ldr	r3, [r0, #16]
 800a4ac:	690c      	ldr	r4, [r1, #16]
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	f2c0 8082 	blt.w	800a5ba <quorem+0x114>
 800a4b6:	3c01      	subs	r4, #1
 800a4b8:	f100 0514 	add.w	r5, r0, #20
 800a4bc:	f101 0814 	add.w	r8, r1, #20
 800a4c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4c4:	9301      	str	r3, [sp, #4]
 800a4c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4d6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4de:	d331      	bcc.n	800a544 <quorem+0x9e>
 800a4e0:	f04f 0e00 	mov.w	lr, #0
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	46ac      	mov	ip, r5
 800a4e8:	46f2      	mov	sl, lr
 800a4ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4ee:	b293      	uxth	r3, r2
 800a4f0:	fb06 e303 	mla	r3, r6, r3, lr
 800a4f4:	0c12      	lsrs	r2, r2, #16
 800a4f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	fb06 e202 	mla	r2, r6, r2, lr
 800a500:	ebaa 0303 	sub.w	r3, sl, r3
 800a504:	f8dc a000 	ldr.w	sl, [ip]
 800a508:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a50c:	fa1f fa8a 	uxth.w	sl, sl
 800a510:	4453      	add	r3, sl
 800a512:	f8dc a000 	ldr.w	sl, [ip]
 800a516:	b292      	uxth	r2, r2
 800a518:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a51c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a520:	b29b      	uxth	r3, r3
 800a522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a526:	4581      	cmp	r9, r0
 800a528:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a52c:	f84c 3b04 	str.w	r3, [ip], #4
 800a530:	d2db      	bcs.n	800a4ea <quorem+0x44>
 800a532:	f855 300b 	ldr.w	r3, [r5, fp]
 800a536:	b92b      	cbnz	r3, 800a544 <quorem+0x9e>
 800a538:	9b01      	ldr	r3, [sp, #4]
 800a53a:	3b04      	subs	r3, #4
 800a53c:	429d      	cmp	r5, r3
 800a53e:	461a      	mov	r2, r3
 800a540:	d32f      	bcc.n	800a5a2 <quorem+0xfc>
 800a542:	613c      	str	r4, [r7, #16]
 800a544:	4638      	mov	r0, r7
 800a546:	f001 f8c1 	bl	800b6cc <__mcmp>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	db25      	blt.n	800a59a <quorem+0xf4>
 800a54e:	4628      	mov	r0, r5
 800a550:	f04f 0c00 	mov.w	ip, #0
 800a554:	3601      	adds	r6, #1
 800a556:	f858 1b04 	ldr.w	r1, [r8], #4
 800a55a:	f8d0 e000 	ldr.w	lr, [r0]
 800a55e:	b28b      	uxth	r3, r1
 800a560:	ebac 0303 	sub.w	r3, ip, r3
 800a564:	fa1f f28e 	uxth.w	r2, lr
 800a568:	4413      	add	r3, r2
 800a56a:	0c0a      	lsrs	r2, r1, #16
 800a56c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a574:	b29b      	uxth	r3, r3
 800a576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a57a:	45c1      	cmp	r9, r8
 800a57c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a580:	f840 3b04 	str.w	r3, [r0], #4
 800a584:	d2e7      	bcs.n	800a556 <quorem+0xb0>
 800a586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a58a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a58e:	b922      	cbnz	r2, 800a59a <quorem+0xf4>
 800a590:	3b04      	subs	r3, #4
 800a592:	429d      	cmp	r5, r3
 800a594:	461a      	mov	r2, r3
 800a596:	d30a      	bcc.n	800a5ae <quorem+0x108>
 800a598:	613c      	str	r4, [r7, #16]
 800a59a:	4630      	mov	r0, r6
 800a59c:	b003      	add	sp, #12
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	3b04      	subs	r3, #4
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d1cb      	bne.n	800a542 <quorem+0x9c>
 800a5aa:	3c01      	subs	r4, #1
 800a5ac:	e7c6      	b.n	800a53c <quorem+0x96>
 800a5ae:	6812      	ldr	r2, [r2, #0]
 800a5b0:	3b04      	subs	r3, #4
 800a5b2:	2a00      	cmp	r2, #0
 800a5b4:	d1f0      	bne.n	800a598 <quorem+0xf2>
 800a5b6:	3c01      	subs	r4, #1
 800a5b8:	e7eb      	b.n	800a592 <quorem+0xec>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e7ee      	b.n	800a59c <quorem+0xf6>
	...

0800a5c0 <_dtoa_r>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a5ca:	b099      	sub	sp, #100	; 0x64
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a5d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a5d6:	b974      	cbnz	r4, 800a5f6 <_dtoa_r+0x36>
 800a5d8:	2010      	movs	r0, #16
 800a5da:	f000 fde3 	bl	800b1a4 <malloc>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	6268      	str	r0, [r5, #36]	; 0x24
 800a5e2:	b920      	cbnz	r0, 800a5ee <_dtoa_r+0x2e>
 800a5e4:	21ea      	movs	r1, #234	; 0xea
 800a5e6:	4ba8      	ldr	r3, [pc, #672]	; (800a888 <_dtoa_r+0x2c8>)
 800a5e8:	48a8      	ldr	r0, [pc, #672]	; (800a88c <_dtoa_r+0x2cc>)
 800a5ea:	f001 fbcf 	bl	800bd8c <__assert_func>
 800a5ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5f2:	6004      	str	r4, [r0, #0]
 800a5f4:	60c4      	str	r4, [r0, #12]
 800a5f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5f8:	6819      	ldr	r1, [r3, #0]
 800a5fa:	b151      	cbz	r1, 800a612 <_dtoa_r+0x52>
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	2301      	movs	r3, #1
 800a600:	4093      	lsls	r3, r2
 800a602:	604a      	str	r2, [r1, #4]
 800a604:	608b      	str	r3, [r1, #8]
 800a606:	4628      	mov	r0, r5
 800a608:	f000 fe22 	bl	800b250 <_Bfree>
 800a60c:	2200      	movs	r2, #0
 800a60e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	1e3b      	subs	r3, r7, #0
 800a614:	bfaf      	iteee	ge
 800a616:	2300      	movge	r3, #0
 800a618:	2201      	movlt	r2, #1
 800a61a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a61e:	9305      	strlt	r3, [sp, #20]
 800a620:	bfa8      	it	ge
 800a622:	f8c8 3000 	strge.w	r3, [r8]
 800a626:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a62a:	4b99      	ldr	r3, [pc, #612]	; (800a890 <_dtoa_r+0x2d0>)
 800a62c:	bfb8      	it	lt
 800a62e:	f8c8 2000 	strlt.w	r2, [r8]
 800a632:	ea33 0309 	bics.w	r3, r3, r9
 800a636:	d119      	bne.n	800a66c <_dtoa_r+0xac>
 800a638:	f242 730f 	movw	r3, #9999	; 0x270f
 800a63c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a63e:	6013      	str	r3, [r2, #0]
 800a640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a644:	4333      	orrs	r3, r6
 800a646:	f000 857f 	beq.w	800b148 <_dtoa_r+0xb88>
 800a64a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a64c:	b953      	cbnz	r3, 800a664 <_dtoa_r+0xa4>
 800a64e:	4b91      	ldr	r3, [pc, #580]	; (800a894 <_dtoa_r+0x2d4>)
 800a650:	e022      	b.n	800a698 <_dtoa_r+0xd8>
 800a652:	4b91      	ldr	r3, [pc, #580]	; (800a898 <_dtoa_r+0x2d8>)
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	3308      	adds	r3, #8
 800a658:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	9803      	ldr	r0, [sp, #12]
 800a65e:	b019      	add	sp, #100	; 0x64
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a664:	4b8b      	ldr	r3, [pc, #556]	; (800a894 <_dtoa_r+0x2d4>)
 800a666:	9303      	str	r3, [sp, #12]
 800a668:	3303      	adds	r3, #3
 800a66a:	e7f5      	b.n	800a658 <_dtoa_r+0x98>
 800a66c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a670:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a678:	2200      	movs	r2, #0
 800a67a:	2300      	movs	r3, #0
 800a67c:	f7f6 f99e 	bl	80009bc <__aeabi_dcmpeq>
 800a680:	4680      	mov	r8, r0
 800a682:	b158      	cbz	r0, 800a69c <_dtoa_r+0xdc>
 800a684:	2301      	movs	r3, #1
 800a686:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a688:	6013      	str	r3, [r2, #0]
 800a68a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8558 	beq.w	800b142 <_dtoa_r+0xb82>
 800a692:	4882      	ldr	r0, [pc, #520]	; (800a89c <_dtoa_r+0x2dc>)
 800a694:	6018      	str	r0, [r3, #0]
 800a696:	1e43      	subs	r3, r0, #1
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	e7df      	b.n	800a65c <_dtoa_r+0x9c>
 800a69c:	ab16      	add	r3, sp, #88	; 0x58
 800a69e:	9301      	str	r3, [sp, #4]
 800a6a0:	ab17      	add	r3, sp, #92	; 0x5c
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6aa:	f001 f8b7 	bl	800b81c <__d2b>
 800a6ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a6b2:	4683      	mov	fp, r0
 800a6b4:	2c00      	cmp	r4, #0
 800a6b6:	d07f      	beq.n	800a7b8 <_dtoa_r+0x1f8>
 800a6b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a6c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a6ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a6ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4b72      	ldr	r3, [pc, #456]	; (800a8a0 <_dtoa_r+0x2e0>)
 800a6d6:	f7f5 fd51 	bl	800017c <__aeabi_dsub>
 800a6da:	a365      	add	r3, pc, #404	; (adr r3, 800a870 <_dtoa_r+0x2b0>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 ff04 	bl	80004ec <__aeabi_dmul>
 800a6e4:	a364      	add	r3, pc, #400	; (adr r3, 800a878 <_dtoa_r+0x2b8>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f7f5 fd49 	bl	8000180 <__adddf3>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	f7f5 fe90 	bl	8000418 <__aeabi_i2d>
 800a6f8:	a361      	add	r3, pc, #388	; (adr r3, 800a880 <_dtoa_r+0x2c0>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f7f5 fef5 	bl	80004ec <__aeabi_dmul>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f5 fd39 	bl	8000180 <__adddf3>
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	f7f6 f99b 	bl	8000a4c <__aeabi_d2iz>
 800a716:	2200      	movs	r2, #0
 800a718:	4682      	mov	sl, r0
 800a71a:	2300      	movs	r3, #0
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f6 f956 	bl	80009d0 <__aeabi_dcmplt>
 800a724:	b148      	cbz	r0, 800a73a <_dtoa_r+0x17a>
 800a726:	4650      	mov	r0, sl
 800a728:	f7f5 fe76 	bl	8000418 <__aeabi_i2d>
 800a72c:	4632      	mov	r2, r6
 800a72e:	463b      	mov	r3, r7
 800a730:	f7f6 f944 	bl	80009bc <__aeabi_dcmpeq>
 800a734:	b908      	cbnz	r0, 800a73a <_dtoa_r+0x17a>
 800a736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a73a:	f1ba 0f16 	cmp.w	sl, #22
 800a73e:	d858      	bhi.n	800a7f2 <_dtoa_r+0x232>
 800a740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a744:	4b57      	ldr	r3, [pc, #348]	; (800a8a4 <_dtoa_r+0x2e4>)
 800a746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	f7f6 f93f 	bl	80009d0 <__aeabi_dcmplt>
 800a752:	2800      	cmp	r0, #0
 800a754:	d04f      	beq.n	800a7f6 <_dtoa_r+0x236>
 800a756:	2300      	movs	r3, #0
 800a758:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a75c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a75e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a760:	1b1c      	subs	r4, r3, r4
 800a762:	1e63      	subs	r3, r4, #1
 800a764:	9309      	str	r3, [sp, #36]	; 0x24
 800a766:	bf49      	itett	mi
 800a768:	f1c4 0301 	rsbmi	r3, r4, #1
 800a76c:	2300      	movpl	r3, #0
 800a76e:	9306      	strmi	r3, [sp, #24]
 800a770:	2300      	movmi	r3, #0
 800a772:	bf54      	ite	pl
 800a774:	9306      	strpl	r3, [sp, #24]
 800a776:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a778:	f1ba 0f00 	cmp.w	sl, #0
 800a77c:	db3d      	blt.n	800a7fa <_dtoa_r+0x23a>
 800a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a780:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a784:	4453      	add	r3, sl
 800a786:	9309      	str	r3, [sp, #36]	; 0x24
 800a788:	2300      	movs	r3, #0
 800a78a:	930a      	str	r3, [sp, #40]	; 0x28
 800a78c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a78e:	2b09      	cmp	r3, #9
 800a790:	f200 808c 	bhi.w	800a8ac <_dtoa_r+0x2ec>
 800a794:	2b05      	cmp	r3, #5
 800a796:	bfc4      	itt	gt
 800a798:	3b04      	subgt	r3, #4
 800a79a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a79c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a79e:	bfc8      	it	gt
 800a7a0:	2400      	movgt	r4, #0
 800a7a2:	f1a3 0302 	sub.w	r3, r3, #2
 800a7a6:	bfd8      	it	le
 800a7a8:	2401      	movle	r4, #1
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	f200 808a 	bhi.w	800a8c4 <_dtoa_r+0x304>
 800a7b0:	e8df f003 	tbb	[pc, r3]
 800a7b4:	5b4d4f2d 	.word	0x5b4d4f2d
 800a7b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a7bc:	441c      	add	r4, r3
 800a7be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	bfc3      	ittte	gt
 800a7c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a7ce:	fa09 f303 	lslgt.w	r3, r9, r3
 800a7d2:	f1c3 0320 	rsble	r3, r3, #32
 800a7d6:	bfc6      	itte	gt
 800a7d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7dc:	4318      	orrgt	r0, r3
 800a7de:	fa06 f003 	lslle.w	r0, r6, r3
 800a7e2:	f7f5 fe09 	bl	80003f8 <__aeabi_ui2d>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a7ec:	3c01      	subs	r4, #1
 800a7ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7f0:	e76f      	b.n	800a6d2 <_dtoa_r+0x112>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e7b2      	b.n	800a75c <_dtoa_r+0x19c>
 800a7f6:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7f8:	e7b1      	b.n	800a75e <_dtoa_r+0x19e>
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	eba3 030a 	sub.w	r3, r3, sl
 800a800:	9306      	str	r3, [sp, #24]
 800a802:	f1ca 0300 	rsb	r3, sl, #0
 800a806:	930a      	str	r3, [sp, #40]	; 0x28
 800a808:	2300      	movs	r3, #0
 800a80a:	930e      	str	r3, [sp, #56]	; 0x38
 800a80c:	e7be      	b.n	800a78c <_dtoa_r+0x1cc>
 800a80e:	2300      	movs	r3, #0
 800a810:	930b      	str	r3, [sp, #44]	; 0x2c
 800a812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a814:	2b00      	cmp	r3, #0
 800a816:	dc58      	bgt.n	800a8ca <_dtoa_r+0x30a>
 800a818:	f04f 0901 	mov.w	r9, #1
 800a81c:	464b      	mov	r3, r9
 800a81e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a822:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a826:	2200      	movs	r2, #0
 800a828:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a82a:	6042      	str	r2, [r0, #4]
 800a82c:	2204      	movs	r2, #4
 800a82e:	f102 0614 	add.w	r6, r2, #20
 800a832:	429e      	cmp	r6, r3
 800a834:	6841      	ldr	r1, [r0, #4]
 800a836:	d94e      	bls.n	800a8d6 <_dtoa_r+0x316>
 800a838:	4628      	mov	r0, r5
 800a83a:	f000 fcc9 	bl	800b1d0 <_Balloc>
 800a83e:	9003      	str	r0, [sp, #12]
 800a840:	2800      	cmp	r0, #0
 800a842:	d14c      	bne.n	800a8de <_dtoa_r+0x31e>
 800a844:	4602      	mov	r2, r0
 800a846:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a84a:	4b17      	ldr	r3, [pc, #92]	; (800a8a8 <_dtoa_r+0x2e8>)
 800a84c:	e6cc      	b.n	800a5e8 <_dtoa_r+0x28>
 800a84e:	2301      	movs	r3, #1
 800a850:	e7de      	b.n	800a810 <_dtoa_r+0x250>
 800a852:	2300      	movs	r3, #0
 800a854:	930b      	str	r3, [sp, #44]	; 0x2c
 800a856:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a858:	eb0a 0903 	add.w	r9, sl, r3
 800a85c:	f109 0301 	add.w	r3, r9, #1
 800a860:	2b01      	cmp	r3, #1
 800a862:	9308      	str	r3, [sp, #32]
 800a864:	bfb8      	it	lt
 800a866:	2301      	movlt	r3, #1
 800a868:	e7dd      	b.n	800a826 <_dtoa_r+0x266>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e7f2      	b.n	800a854 <_dtoa_r+0x294>
 800a86e:	bf00      	nop
 800a870:	636f4361 	.word	0x636f4361
 800a874:	3fd287a7 	.word	0x3fd287a7
 800a878:	8b60c8b3 	.word	0x8b60c8b3
 800a87c:	3fc68a28 	.word	0x3fc68a28
 800a880:	509f79fb 	.word	0x509f79fb
 800a884:	3fd34413 	.word	0x3fd34413
 800a888:	0800ca99 	.word	0x0800ca99
 800a88c:	0800cab0 	.word	0x0800cab0
 800a890:	7ff00000 	.word	0x7ff00000
 800a894:	0800ca95 	.word	0x0800ca95
 800a898:	0800ca8c 	.word	0x0800ca8c
 800a89c:	0800ca69 	.word	0x0800ca69
 800a8a0:	3ff80000 	.word	0x3ff80000
 800a8a4:	0800cba0 	.word	0x0800cba0
 800a8a8:	0800cb0b 	.word	0x0800cb0b
 800a8ac:	2401      	movs	r4, #1
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a8b2:	9322      	str	r3, [sp, #136]	; 0x88
 800a8b4:	f04f 39ff 	mov.w	r9, #4294967295
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2312      	movs	r3, #18
 800a8bc:	f8cd 9020 	str.w	r9, [sp, #32]
 800a8c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a8c2:	e7b0      	b.n	800a826 <_dtoa_r+0x266>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c8:	e7f4      	b.n	800a8b4 <_dtoa_r+0x2f4>
 800a8ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a8ce:	464b      	mov	r3, r9
 800a8d0:	f8cd 9020 	str.w	r9, [sp, #32]
 800a8d4:	e7a7      	b.n	800a826 <_dtoa_r+0x266>
 800a8d6:	3101      	adds	r1, #1
 800a8d8:	6041      	str	r1, [r0, #4]
 800a8da:	0052      	lsls	r2, r2, #1
 800a8dc:	e7a7      	b.n	800a82e <_dtoa_r+0x26e>
 800a8de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8e0:	9a03      	ldr	r2, [sp, #12]
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	2b0e      	cmp	r3, #14
 800a8e8:	f200 80a8 	bhi.w	800aa3c <_dtoa_r+0x47c>
 800a8ec:	2c00      	cmp	r4, #0
 800a8ee:	f000 80a5 	beq.w	800aa3c <_dtoa_r+0x47c>
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	dd34      	ble.n	800a962 <_dtoa_r+0x3a2>
 800a8f8:	4a9a      	ldr	r2, [pc, #616]	; (800ab64 <_dtoa_r+0x5a4>)
 800a8fa:	f00a 030f 	and.w	r3, sl, #15
 800a8fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a902:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a90a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a90e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a912:	d016      	beq.n	800a942 <_dtoa_r+0x382>
 800a914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a918:	4b93      	ldr	r3, [pc, #588]	; (800ab68 <_dtoa_r+0x5a8>)
 800a91a:	2703      	movs	r7, #3
 800a91c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a920:	f7f5 ff0e 	bl	8000740 <__aeabi_ddiv>
 800a924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a928:	f004 040f 	and.w	r4, r4, #15
 800a92c:	4e8e      	ldr	r6, [pc, #568]	; (800ab68 <_dtoa_r+0x5a8>)
 800a92e:	b954      	cbnz	r4, 800a946 <_dtoa_r+0x386>
 800a930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a938:	f7f5 ff02 	bl	8000740 <__aeabi_ddiv>
 800a93c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a940:	e029      	b.n	800a996 <_dtoa_r+0x3d6>
 800a942:	2702      	movs	r7, #2
 800a944:	e7f2      	b.n	800a92c <_dtoa_r+0x36c>
 800a946:	07e1      	lsls	r1, r4, #31
 800a948:	d508      	bpl.n	800a95c <_dtoa_r+0x39c>
 800a94a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a94e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a952:	f7f5 fdcb 	bl	80004ec <__aeabi_dmul>
 800a956:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a95a:	3701      	adds	r7, #1
 800a95c:	1064      	asrs	r4, r4, #1
 800a95e:	3608      	adds	r6, #8
 800a960:	e7e5      	b.n	800a92e <_dtoa_r+0x36e>
 800a962:	f000 80a5 	beq.w	800aab0 <_dtoa_r+0x4f0>
 800a966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a96a:	f1ca 0400 	rsb	r4, sl, #0
 800a96e:	4b7d      	ldr	r3, [pc, #500]	; (800ab64 <_dtoa_r+0x5a4>)
 800a970:	f004 020f 	and.w	r2, r4, #15
 800a974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f5 fdb6 	bl	80004ec <__aeabi_dmul>
 800a980:	2702      	movs	r7, #2
 800a982:	2300      	movs	r3, #0
 800a984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a988:	4e77      	ldr	r6, [pc, #476]	; (800ab68 <_dtoa_r+0x5a8>)
 800a98a:	1124      	asrs	r4, r4, #4
 800a98c:	2c00      	cmp	r4, #0
 800a98e:	f040 8084 	bne.w	800aa9a <_dtoa_r+0x4da>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1d2      	bne.n	800a93c <_dtoa_r+0x37c>
 800a996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 808b 	beq.w	800aab4 <_dtoa_r+0x4f4>
 800a99e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a9a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a9a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4b6f      	ldr	r3, [pc, #444]	; (800ab6c <_dtoa_r+0x5ac>)
 800a9ae:	f7f6 f80f 	bl	80009d0 <__aeabi_dcmplt>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d07e      	beq.n	800aab4 <_dtoa_r+0x4f4>
 800a9b6:	9b08      	ldr	r3, [sp, #32]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d07b      	beq.n	800aab4 <_dtoa_r+0x4f4>
 800a9bc:	f1b9 0f00 	cmp.w	r9, #0
 800a9c0:	dd38      	ble.n	800aa34 <_dtoa_r+0x474>
 800a9c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	4b69      	ldr	r3, [pc, #420]	; (800ab70 <_dtoa_r+0x5b0>)
 800a9ca:	f7f5 fd8f 	bl	80004ec <__aeabi_dmul>
 800a9ce:	464c      	mov	r4, r9
 800a9d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a9d8:	3701      	adds	r7, #1
 800a9da:	4638      	mov	r0, r7
 800a9dc:	f7f5 fd1c 	bl	8000418 <__aeabi_i2d>
 800a9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9e4:	f7f5 fd82 	bl	80004ec <__aeabi_dmul>
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4b62      	ldr	r3, [pc, #392]	; (800ab74 <_dtoa_r+0x5b4>)
 800a9ec:	f7f5 fbc8 	bl	8000180 <__adddf3>
 800a9f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a9f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9f8:	9611      	str	r6, [sp, #68]	; 0x44
 800a9fa:	2c00      	cmp	r4, #0
 800a9fc:	d15d      	bne.n	800aaba <_dtoa_r+0x4fa>
 800a9fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa02:	2200      	movs	r2, #0
 800aa04:	4b5c      	ldr	r3, [pc, #368]	; (800ab78 <_dtoa_r+0x5b8>)
 800aa06:	f7f5 fbb9 	bl	800017c <__aeabi_dsub>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa12:	4633      	mov	r3, r6
 800aa14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa16:	f7f5 fff9 	bl	8000a0c <__aeabi_dcmpgt>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	f040 829c 	bne.w	800af58 <_dtoa_r+0x998>
 800aa20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa2a:	f7f5 ffd1 	bl	80009d0 <__aeabi_dcmplt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f040 8290 	bne.w	800af54 <_dtoa_r+0x994>
 800aa34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aa38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aa3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f2c0 8152 	blt.w	800ace8 <_dtoa_r+0x728>
 800aa44:	f1ba 0f0e 	cmp.w	sl, #14
 800aa48:	f300 814e 	bgt.w	800ace8 <_dtoa_r+0x728>
 800aa4c:	4b45      	ldr	r3, [pc, #276]	; (800ab64 <_dtoa_r+0x5a4>)
 800aa4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa52:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aa5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f280 80db 	bge.w	800ac18 <_dtoa_r+0x658>
 800aa62:	9b08      	ldr	r3, [sp, #32]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f300 80d7 	bgt.w	800ac18 <_dtoa_r+0x658>
 800aa6a:	f040 8272 	bne.w	800af52 <_dtoa_r+0x992>
 800aa6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa72:	2200      	movs	r2, #0
 800aa74:	4b40      	ldr	r3, [pc, #256]	; (800ab78 <_dtoa_r+0x5b8>)
 800aa76:	f7f5 fd39 	bl	80004ec <__aeabi_dmul>
 800aa7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa7e:	f7f5 ffbb 	bl	80009f8 <__aeabi_dcmpge>
 800aa82:	9c08      	ldr	r4, [sp, #32]
 800aa84:	4626      	mov	r6, r4
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f040 8248 	bne.w	800af1c <_dtoa_r+0x95c>
 800aa8c:	2331      	movs	r3, #49	; 0x31
 800aa8e:	9f03      	ldr	r7, [sp, #12]
 800aa90:	f10a 0a01 	add.w	sl, sl, #1
 800aa94:	f807 3b01 	strb.w	r3, [r7], #1
 800aa98:	e244      	b.n	800af24 <_dtoa_r+0x964>
 800aa9a:	07e2      	lsls	r2, r4, #31
 800aa9c:	d505      	bpl.n	800aaaa <_dtoa_r+0x4ea>
 800aa9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaa2:	f7f5 fd23 	bl	80004ec <__aeabi_dmul>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	3701      	adds	r7, #1
 800aaaa:	1064      	asrs	r4, r4, #1
 800aaac:	3608      	adds	r6, #8
 800aaae:	e76d      	b.n	800a98c <_dtoa_r+0x3cc>
 800aab0:	2702      	movs	r7, #2
 800aab2:	e770      	b.n	800a996 <_dtoa_r+0x3d6>
 800aab4:	46d0      	mov	r8, sl
 800aab6:	9c08      	ldr	r4, [sp, #32]
 800aab8:	e78f      	b.n	800a9da <_dtoa_r+0x41a>
 800aaba:	9903      	ldr	r1, [sp, #12]
 800aabc:	4b29      	ldr	r3, [pc, #164]	; (800ab64 <_dtoa_r+0x5a4>)
 800aabe:	4421      	add	r1, r4
 800aac0:	9112      	str	r1, [sp, #72]	; 0x48
 800aac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aac8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aacc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d055      	beq.n	800ab80 <_dtoa_r+0x5c0>
 800aad4:	2000      	movs	r0, #0
 800aad6:	4929      	ldr	r1, [pc, #164]	; (800ab7c <_dtoa_r+0x5bc>)
 800aad8:	f7f5 fe32 	bl	8000740 <__aeabi_ddiv>
 800aadc:	463b      	mov	r3, r7
 800aade:	4632      	mov	r2, r6
 800aae0:	f7f5 fb4c 	bl	800017c <__aeabi_dsub>
 800aae4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aae8:	9f03      	ldr	r7, [sp, #12]
 800aaea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaee:	f7f5 ffad 	bl	8000a4c <__aeabi_d2iz>
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	f7f5 fc90 	bl	8000418 <__aeabi_i2d>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab00:	f7f5 fb3c 	bl	800017c <__aeabi_dsub>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	3430      	adds	r4, #48	; 0x30
 800ab0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab12:	f807 4b01 	strb.w	r4, [r7], #1
 800ab16:	f7f5 ff5b 	bl	80009d0 <__aeabi_dcmplt>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d174      	bne.n	800ac08 <_dtoa_r+0x648>
 800ab1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab22:	2000      	movs	r0, #0
 800ab24:	4911      	ldr	r1, [pc, #68]	; (800ab6c <_dtoa_r+0x5ac>)
 800ab26:	f7f5 fb29 	bl	800017c <__aeabi_dsub>
 800ab2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab2e:	f7f5 ff4f 	bl	80009d0 <__aeabi_dcmplt>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f040 80b7 	bne.w	800aca6 <_dtoa_r+0x6e6>
 800ab38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab3a:	429f      	cmp	r7, r3
 800ab3c:	f43f af7a 	beq.w	800aa34 <_dtoa_r+0x474>
 800ab40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab44:	2200      	movs	r2, #0
 800ab46:	4b0a      	ldr	r3, [pc, #40]	; (800ab70 <_dtoa_r+0x5b0>)
 800ab48:	f7f5 fcd0 	bl	80004ec <__aeabi_dmul>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab56:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <_dtoa_r+0x5b0>)
 800ab58:	f7f5 fcc8 	bl	80004ec <__aeabi_dmul>
 800ab5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab60:	e7c3      	b.n	800aaea <_dtoa_r+0x52a>
 800ab62:	bf00      	nop
 800ab64:	0800cba0 	.word	0x0800cba0
 800ab68:	0800cb78 	.word	0x0800cb78
 800ab6c:	3ff00000 	.word	0x3ff00000
 800ab70:	40240000 	.word	0x40240000
 800ab74:	401c0000 	.word	0x401c0000
 800ab78:	40140000 	.word	0x40140000
 800ab7c:	3fe00000 	.word	0x3fe00000
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 fcb2 	bl	80004ec <__aeabi_dmul>
 800ab88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab8e:	9c03      	ldr	r4, [sp, #12]
 800ab90:	9314      	str	r3, [sp, #80]	; 0x50
 800ab92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab96:	f7f5 ff59 	bl	8000a4c <__aeabi_d2iz>
 800ab9a:	9015      	str	r0, [sp, #84]	; 0x54
 800ab9c:	f7f5 fc3c 	bl	8000418 <__aeabi_i2d>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aba8:	f7f5 fae8 	bl	800017c <__aeabi_dsub>
 800abac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abae:	4606      	mov	r6, r0
 800abb0:	3330      	adds	r3, #48	; 0x30
 800abb2:	f804 3b01 	strb.w	r3, [r4], #1
 800abb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abb8:	460f      	mov	r7, r1
 800abba:	429c      	cmp	r4, r3
 800abbc:	f04f 0200 	mov.w	r2, #0
 800abc0:	d124      	bne.n	800ac0c <_dtoa_r+0x64c>
 800abc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abc6:	4bb0      	ldr	r3, [pc, #704]	; (800ae88 <_dtoa_r+0x8c8>)
 800abc8:	f7f5 fada 	bl	8000180 <__adddf3>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4630      	mov	r0, r6
 800abd2:	4639      	mov	r1, r7
 800abd4:	f7f5 ff1a 	bl	8000a0c <__aeabi_dcmpgt>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d163      	bne.n	800aca4 <_dtoa_r+0x6e4>
 800abdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abe0:	2000      	movs	r0, #0
 800abe2:	49a9      	ldr	r1, [pc, #676]	; (800ae88 <_dtoa_r+0x8c8>)
 800abe4:	f7f5 faca 	bl	800017c <__aeabi_dsub>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4630      	mov	r0, r6
 800abee:	4639      	mov	r1, r7
 800abf0:	f7f5 feee 	bl	80009d0 <__aeabi_dcmplt>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	f43f af1d 	beq.w	800aa34 <_dtoa_r+0x474>
 800abfa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800abfc:	1e7b      	subs	r3, r7, #1
 800abfe:	9314      	str	r3, [sp, #80]	; 0x50
 800ac00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ac04:	2b30      	cmp	r3, #48	; 0x30
 800ac06:	d0f8      	beq.n	800abfa <_dtoa_r+0x63a>
 800ac08:	46c2      	mov	sl, r8
 800ac0a:	e03b      	b.n	800ac84 <_dtoa_r+0x6c4>
 800ac0c:	4b9f      	ldr	r3, [pc, #636]	; (800ae8c <_dtoa_r+0x8cc>)
 800ac0e:	f7f5 fc6d 	bl	80004ec <__aeabi_dmul>
 800ac12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac16:	e7bc      	b.n	800ab92 <_dtoa_r+0x5d2>
 800ac18:	9f03      	ldr	r7, [sp, #12]
 800ac1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ac1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac22:	4640      	mov	r0, r8
 800ac24:	4649      	mov	r1, r9
 800ac26:	f7f5 fd8b 	bl	8000740 <__aeabi_ddiv>
 800ac2a:	f7f5 ff0f 	bl	8000a4c <__aeabi_d2iz>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	f7f5 fbf2 	bl	8000418 <__aeabi_i2d>
 800ac34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac38:	f7f5 fc58 	bl	80004ec <__aeabi_dmul>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	f7f5 fa9a 	bl	800017c <__aeabi_dsub>
 800ac48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ac4c:	f807 6b01 	strb.w	r6, [r7], #1
 800ac50:	9e03      	ldr	r6, [sp, #12]
 800ac52:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ac56:	1bbe      	subs	r6, r7, r6
 800ac58:	45b4      	cmp	ip, r6
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	d136      	bne.n	800acce <_dtoa_r+0x70e>
 800ac60:	f7f5 fa8e 	bl	8000180 <__adddf3>
 800ac64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac68:	4680      	mov	r8, r0
 800ac6a:	4689      	mov	r9, r1
 800ac6c:	f7f5 fece 	bl	8000a0c <__aeabi_dcmpgt>
 800ac70:	bb58      	cbnz	r0, 800acca <_dtoa_r+0x70a>
 800ac72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac76:	4640      	mov	r0, r8
 800ac78:	4649      	mov	r1, r9
 800ac7a:	f7f5 fe9f 	bl	80009bc <__aeabi_dcmpeq>
 800ac7e:	b108      	cbz	r0, 800ac84 <_dtoa_r+0x6c4>
 800ac80:	07e1      	lsls	r1, r4, #31
 800ac82:	d422      	bmi.n	800acca <_dtoa_r+0x70a>
 800ac84:	4628      	mov	r0, r5
 800ac86:	4659      	mov	r1, fp
 800ac88:	f000 fae2 	bl	800b250 <_Bfree>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	703b      	strb	r3, [r7, #0]
 800ac90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac92:	f10a 0001 	add.w	r0, sl, #1
 800ac96:	6018      	str	r0, [r3, #0]
 800ac98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f43f acde 	beq.w	800a65c <_dtoa_r+0x9c>
 800aca0:	601f      	str	r7, [r3, #0]
 800aca2:	e4db      	b.n	800a65c <_dtoa_r+0x9c>
 800aca4:	4627      	mov	r7, r4
 800aca6:	463b      	mov	r3, r7
 800aca8:	461f      	mov	r7, r3
 800acaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acae:	2a39      	cmp	r2, #57	; 0x39
 800acb0:	d107      	bne.n	800acc2 <_dtoa_r+0x702>
 800acb2:	9a03      	ldr	r2, [sp, #12]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d1f7      	bne.n	800aca8 <_dtoa_r+0x6e8>
 800acb8:	2230      	movs	r2, #48	; 0x30
 800acba:	9903      	ldr	r1, [sp, #12]
 800acbc:	f108 0801 	add.w	r8, r8, #1
 800acc0:	700a      	strb	r2, [r1, #0]
 800acc2:	781a      	ldrb	r2, [r3, #0]
 800acc4:	3201      	adds	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e79e      	b.n	800ac08 <_dtoa_r+0x648>
 800acca:	46d0      	mov	r8, sl
 800accc:	e7eb      	b.n	800aca6 <_dtoa_r+0x6e6>
 800acce:	2200      	movs	r2, #0
 800acd0:	4b6e      	ldr	r3, [pc, #440]	; (800ae8c <_dtoa_r+0x8cc>)
 800acd2:	f7f5 fc0b 	bl	80004ec <__aeabi_dmul>
 800acd6:	2200      	movs	r2, #0
 800acd8:	2300      	movs	r3, #0
 800acda:	4680      	mov	r8, r0
 800acdc:	4689      	mov	r9, r1
 800acde:	f7f5 fe6d 	bl	80009bc <__aeabi_dcmpeq>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d09b      	beq.n	800ac1e <_dtoa_r+0x65e>
 800ace6:	e7cd      	b.n	800ac84 <_dtoa_r+0x6c4>
 800ace8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acea:	2a00      	cmp	r2, #0
 800acec:	f000 80d0 	beq.w	800ae90 <_dtoa_r+0x8d0>
 800acf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800acf2:	2a01      	cmp	r2, #1
 800acf4:	f300 80ae 	bgt.w	800ae54 <_dtoa_r+0x894>
 800acf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	f000 80a6 	beq.w	800ae4c <_dtoa_r+0x88c>
 800ad00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad06:	9f06      	ldr	r7, [sp, #24]
 800ad08:	9a06      	ldr	r2, [sp, #24]
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	441a      	add	r2, r3
 800ad0e:	9206      	str	r2, [sp, #24]
 800ad10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad12:	4628      	mov	r0, r5
 800ad14:	441a      	add	r2, r3
 800ad16:	9209      	str	r2, [sp, #36]	; 0x24
 800ad18:	f000 fb50 	bl	800b3bc <__i2b>
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	2f00      	cmp	r7, #0
 800ad20:	dd0c      	ble.n	800ad3c <_dtoa_r+0x77c>
 800ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dd09      	ble.n	800ad3c <_dtoa_r+0x77c>
 800ad28:	42bb      	cmp	r3, r7
 800ad2a:	bfa8      	it	ge
 800ad2c:	463b      	movge	r3, r7
 800ad2e:	9a06      	ldr	r2, [sp, #24]
 800ad30:	1aff      	subs	r7, r7, r3
 800ad32:	1ad2      	subs	r2, r2, r3
 800ad34:	9206      	str	r2, [sp, #24]
 800ad36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad3e:	b1f3      	cbz	r3, 800ad7e <_dtoa_r+0x7be>
 800ad40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 80a8 	beq.w	800ae98 <_dtoa_r+0x8d8>
 800ad48:	2c00      	cmp	r4, #0
 800ad4a:	dd10      	ble.n	800ad6e <_dtoa_r+0x7ae>
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4622      	mov	r2, r4
 800ad50:	4628      	mov	r0, r5
 800ad52:	f000 fbf1 	bl	800b538 <__pow5mult>
 800ad56:	465a      	mov	r2, fp
 800ad58:	4601      	mov	r1, r0
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f000 fb43 	bl	800b3e8 <__multiply>
 800ad62:	4680      	mov	r8, r0
 800ad64:	4659      	mov	r1, fp
 800ad66:	4628      	mov	r0, r5
 800ad68:	f000 fa72 	bl	800b250 <_Bfree>
 800ad6c:	46c3      	mov	fp, r8
 800ad6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad70:	1b1a      	subs	r2, r3, r4
 800ad72:	d004      	beq.n	800ad7e <_dtoa_r+0x7be>
 800ad74:	4659      	mov	r1, fp
 800ad76:	4628      	mov	r0, r5
 800ad78:	f000 fbde 	bl	800b538 <__pow5mult>
 800ad7c:	4683      	mov	fp, r0
 800ad7e:	2101      	movs	r1, #1
 800ad80:	4628      	mov	r0, r5
 800ad82:	f000 fb1b 	bl	800b3bc <__i2b>
 800ad86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad88:	4604      	mov	r4, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f340 8086 	ble.w	800ae9c <_dtoa_r+0x8dc>
 800ad90:	461a      	mov	r2, r3
 800ad92:	4601      	mov	r1, r0
 800ad94:	4628      	mov	r0, r5
 800ad96:	f000 fbcf 	bl	800b538 <__pow5mult>
 800ad9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	dd7f      	ble.n	800aea2 <_dtoa_r+0x8e2>
 800ada2:	f04f 0800 	mov.w	r8, #0
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adac:	6918      	ldr	r0, [r3, #16]
 800adae:	f000 fab7 	bl	800b320 <__hi0bits>
 800adb2:	f1c0 0020 	rsb	r0, r0, #32
 800adb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb8:	4418      	add	r0, r3
 800adba:	f010 001f 	ands.w	r0, r0, #31
 800adbe:	f000 8092 	beq.w	800aee6 <_dtoa_r+0x926>
 800adc2:	f1c0 0320 	rsb	r3, r0, #32
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	f340 808a 	ble.w	800aee0 <_dtoa_r+0x920>
 800adcc:	f1c0 001c 	rsb	r0, r0, #28
 800add0:	9b06      	ldr	r3, [sp, #24]
 800add2:	4407      	add	r7, r0
 800add4:	4403      	add	r3, r0
 800add6:	9306      	str	r3, [sp, #24]
 800add8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adda:	4403      	add	r3, r0
 800addc:	9309      	str	r3, [sp, #36]	; 0x24
 800adde:	9b06      	ldr	r3, [sp, #24]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	dd05      	ble.n	800adf0 <_dtoa_r+0x830>
 800ade4:	4659      	mov	r1, fp
 800ade6:	461a      	mov	r2, r3
 800ade8:	4628      	mov	r0, r5
 800adea:	f000 fbff 	bl	800b5ec <__lshift>
 800adee:	4683      	mov	fp, r0
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dd05      	ble.n	800ae02 <_dtoa_r+0x842>
 800adf6:	4621      	mov	r1, r4
 800adf8:	461a      	mov	r2, r3
 800adfa:	4628      	mov	r0, r5
 800adfc:	f000 fbf6 	bl	800b5ec <__lshift>
 800ae00:	4604      	mov	r4, r0
 800ae02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d070      	beq.n	800aeea <_dtoa_r+0x92a>
 800ae08:	4621      	mov	r1, r4
 800ae0a:	4658      	mov	r0, fp
 800ae0c:	f000 fc5e 	bl	800b6cc <__mcmp>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	da6a      	bge.n	800aeea <_dtoa_r+0x92a>
 800ae14:	2300      	movs	r3, #0
 800ae16:	4659      	mov	r1, fp
 800ae18:	220a      	movs	r2, #10
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f000 fa3a 	bl	800b294 <__multadd>
 800ae20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae22:	4683      	mov	fp, r0
 800ae24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 8194 	beq.w	800b156 <_dtoa_r+0xb96>
 800ae2e:	4631      	mov	r1, r6
 800ae30:	2300      	movs	r3, #0
 800ae32:	220a      	movs	r2, #10
 800ae34:	4628      	mov	r0, r5
 800ae36:	f000 fa2d 	bl	800b294 <__multadd>
 800ae3a:	f1b9 0f00 	cmp.w	r9, #0
 800ae3e:	4606      	mov	r6, r0
 800ae40:	f300 8093 	bgt.w	800af6a <_dtoa_r+0x9aa>
 800ae44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	dc57      	bgt.n	800aefa <_dtoa_r+0x93a>
 800ae4a:	e08e      	b.n	800af6a <_dtoa_r+0x9aa>
 800ae4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae52:	e757      	b.n	800ad04 <_dtoa_r+0x744>
 800ae54:	9b08      	ldr	r3, [sp, #32]
 800ae56:	1e5c      	subs	r4, r3, #1
 800ae58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	bfb7      	itett	lt
 800ae5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae60:	1b1c      	subge	r4, r3, r4
 800ae62:	1ae2      	sublt	r2, r4, r3
 800ae64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ae66:	bfbe      	ittt	lt
 800ae68:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ae6a:	189b      	addlt	r3, r3, r2
 800ae6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	bfb8      	it	lt
 800ae72:	2400      	movlt	r4, #0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	bfbb      	ittet	lt
 800ae78:	9b06      	ldrlt	r3, [sp, #24]
 800ae7a:	9a08      	ldrlt	r2, [sp, #32]
 800ae7c:	9f06      	ldrge	r7, [sp, #24]
 800ae7e:	1a9f      	sublt	r7, r3, r2
 800ae80:	bfac      	ite	ge
 800ae82:	9b08      	ldrge	r3, [sp, #32]
 800ae84:	2300      	movlt	r3, #0
 800ae86:	e73f      	b.n	800ad08 <_dtoa_r+0x748>
 800ae88:	3fe00000 	.word	0x3fe00000
 800ae8c:	40240000 	.word	0x40240000
 800ae90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae92:	9f06      	ldr	r7, [sp, #24]
 800ae94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ae96:	e742      	b.n	800ad1e <_dtoa_r+0x75e>
 800ae98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae9a:	e76b      	b.n	800ad74 <_dtoa_r+0x7b4>
 800ae9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	dc19      	bgt.n	800aed6 <_dtoa_r+0x916>
 800aea2:	9b04      	ldr	r3, [sp, #16]
 800aea4:	b9bb      	cbnz	r3, 800aed6 <_dtoa_r+0x916>
 800aea6:	9b05      	ldr	r3, [sp, #20]
 800aea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeac:	b99b      	cbnz	r3, 800aed6 <_dtoa_r+0x916>
 800aeae:	9b05      	ldr	r3, [sp, #20]
 800aeb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeb4:	0d1b      	lsrs	r3, r3, #20
 800aeb6:	051b      	lsls	r3, r3, #20
 800aeb8:	b183      	cbz	r3, 800aedc <_dtoa_r+0x91c>
 800aeba:	f04f 0801 	mov.w	r8, #1
 800aebe:	9b06      	ldr	r3, [sp, #24]
 800aec0:	3301      	adds	r3, #1
 800aec2:	9306      	str	r3, [sp, #24]
 800aec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec6:	3301      	adds	r3, #1
 800aec8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f47f af6a 	bne.w	800ada6 <_dtoa_r+0x7e6>
 800aed2:	2001      	movs	r0, #1
 800aed4:	e76f      	b.n	800adb6 <_dtoa_r+0x7f6>
 800aed6:	f04f 0800 	mov.w	r8, #0
 800aeda:	e7f6      	b.n	800aeca <_dtoa_r+0x90a>
 800aedc:	4698      	mov	r8, r3
 800aede:	e7f4      	b.n	800aeca <_dtoa_r+0x90a>
 800aee0:	f43f af7d 	beq.w	800adde <_dtoa_r+0x81e>
 800aee4:	4618      	mov	r0, r3
 800aee6:	301c      	adds	r0, #28
 800aee8:	e772      	b.n	800add0 <_dtoa_r+0x810>
 800aeea:	9b08      	ldr	r3, [sp, #32]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	dc36      	bgt.n	800af5e <_dtoa_r+0x99e>
 800aef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	dd33      	ble.n	800af5e <_dtoa_r+0x99e>
 800aef6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aefa:	f1b9 0f00 	cmp.w	r9, #0
 800aefe:	d10d      	bne.n	800af1c <_dtoa_r+0x95c>
 800af00:	4621      	mov	r1, r4
 800af02:	464b      	mov	r3, r9
 800af04:	2205      	movs	r2, #5
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f9c4 	bl	800b294 <__multadd>
 800af0c:	4601      	mov	r1, r0
 800af0e:	4604      	mov	r4, r0
 800af10:	4658      	mov	r0, fp
 800af12:	f000 fbdb 	bl	800b6cc <__mcmp>
 800af16:	2800      	cmp	r0, #0
 800af18:	f73f adb8 	bgt.w	800aa8c <_dtoa_r+0x4cc>
 800af1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af1e:	9f03      	ldr	r7, [sp, #12]
 800af20:	ea6f 0a03 	mvn.w	sl, r3
 800af24:	f04f 0800 	mov.w	r8, #0
 800af28:	4621      	mov	r1, r4
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f990 	bl	800b250 <_Bfree>
 800af30:	2e00      	cmp	r6, #0
 800af32:	f43f aea7 	beq.w	800ac84 <_dtoa_r+0x6c4>
 800af36:	f1b8 0f00 	cmp.w	r8, #0
 800af3a:	d005      	beq.n	800af48 <_dtoa_r+0x988>
 800af3c:	45b0      	cmp	r8, r6
 800af3e:	d003      	beq.n	800af48 <_dtoa_r+0x988>
 800af40:	4641      	mov	r1, r8
 800af42:	4628      	mov	r0, r5
 800af44:	f000 f984 	bl	800b250 <_Bfree>
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 f980 	bl	800b250 <_Bfree>
 800af50:	e698      	b.n	800ac84 <_dtoa_r+0x6c4>
 800af52:	2400      	movs	r4, #0
 800af54:	4626      	mov	r6, r4
 800af56:	e7e1      	b.n	800af1c <_dtoa_r+0x95c>
 800af58:	46c2      	mov	sl, r8
 800af5a:	4626      	mov	r6, r4
 800af5c:	e596      	b.n	800aa8c <_dtoa_r+0x4cc>
 800af5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 80fd 	beq.w	800b164 <_dtoa_r+0xba4>
 800af6a:	2f00      	cmp	r7, #0
 800af6c:	dd05      	ble.n	800af7a <_dtoa_r+0x9ba>
 800af6e:	4631      	mov	r1, r6
 800af70:	463a      	mov	r2, r7
 800af72:	4628      	mov	r0, r5
 800af74:	f000 fb3a 	bl	800b5ec <__lshift>
 800af78:	4606      	mov	r6, r0
 800af7a:	f1b8 0f00 	cmp.w	r8, #0
 800af7e:	d05c      	beq.n	800b03a <_dtoa_r+0xa7a>
 800af80:	4628      	mov	r0, r5
 800af82:	6871      	ldr	r1, [r6, #4]
 800af84:	f000 f924 	bl	800b1d0 <_Balloc>
 800af88:	4607      	mov	r7, r0
 800af8a:	b928      	cbnz	r0, 800af98 <_dtoa_r+0x9d8>
 800af8c:	4602      	mov	r2, r0
 800af8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af92:	4b7f      	ldr	r3, [pc, #508]	; (800b190 <_dtoa_r+0xbd0>)
 800af94:	f7ff bb28 	b.w	800a5e8 <_dtoa_r+0x28>
 800af98:	6932      	ldr	r2, [r6, #16]
 800af9a:	f106 010c 	add.w	r1, r6, #12
 800af9e:	3202      	adds	r2, #2
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	300c      	adds	r0, #12
 800afa4:	f7fe fdd2 	bl	8009b4c <memcpy>
 800afa8:	2201      	movs	r2, #1
 800afaa:	4639      	mov	r1, r7
 800afac:	4628      	mov	r0, r5
 800afae:	f000 fb1d 	bl	800b5ec <__lshift>
 800afb2:	46b0      	mov	r8, r6
 800afb4:	4606      	mov	r6, r0
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	3301      	adds	r3, #1
 800afba:	9308      	str	r3, [sp, #32]
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	444b      	add	r3, r9
 800afc0:	930a      	str	r3, [sp, #40]	; 0x28
 800afc2:	9b04      	ldr	r3, [sp, #16]
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	9309      	str	r3, [sp, #36]	; 0x24
 800afca:	9b08      	ldr	r3, [sp, #32]
 800afcc:	4621      	mov	r1, r4
 800afce:	3b01      	subs	r3, #1
 800afd0:	4658      	mov	r0, fp
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	f7ff fa67 	bl	800a4a6 <quorem>
 800afd8:	4603      	mov	r3, r0
 800afda:	4641      	mov	r1, r8
 800afdc:	3330      	adds	r3, #48	; 0x30
 800afde:	9006      	str	r0, [sp, #24]
 800afe0:	4658      	mov	r0, fp
 800afe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800afe4:	f000 fb72 	bl	800b6cc <__mcmp>
 800afe8:	4632      	mov	r2, r6
 800afea:	4681      	mov	r9, r0
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 fb88 	bl	800b704 <__mdiff>
 800aff4:	68c2      	ldr	r2, [r0, #12]
 800aff6:	4607      	mov	r7, r0
 800aff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800affa:	bb02      	cbnz	r2, 800b03e <_dtoa_r+0xa7e>
 800affc:	4601      	mov	r1, r0
 800affe:	4658      	mov	r0, fp
 800b000:	f000 fb64 	bl	800b6cc <__mcmp>
 800b004:	4602      	mov	r2, r0
 800b006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b008:	4639      	mov	r1, r7
 800b00a:	4628      	mov	r0, r5
 800b00c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b010:	f000 f91e 	bl	800b250 <_Bfree>
 800b014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b018:	9f08      	ldr	r7, [sp, #32]
 800b01a:	ea43 0102 	orr.w	r1, r3, r2
 800b01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b020:	430b      	orrs	r3, r1
 800b022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b024:	d10d      	bne.n	800b042 <_dtoa_r+0xa82>
 800b026:	2b39      	cmp	r3, #57	; 0x39
 800b028:	d029      	beq.n	800b07e <_dtoa_r+0xabe>
 800b02a:	f1b9 0f00 	cmp.w	r9, #0
 800b02e:	dd01      	ble.n	800b034 <_dtoa_r+0xa74>
 800b030:	9b06      	ldr	r3, [sp, #24]
 800b032:	3331      	adds	r3, #49	; 0x31
 800b034:	9a04      	ldr	r2, [sp, #16]
 800b036:	7013      	strb	r3, [r2, #0]
 800b038:	e776      	b.n	800af28 <_dtoa_r+0x968>
 800b03a:	4630      	mov	r0, r6
 800b03c:	e7b9      	b.n	800afb2 <_dtoa_r+0x9f2>
 800b03e:	2201      	movs	r2, #1
 800b040:	e7e2      	b.n	800b008 <_dtoa_r+0xa48>
 800b042:	f1b9 0f00 	cmp.w	r9, #0
 800b046:	db06      	blt.n	800b056 <_dtoa_r+0xa96>
 800b048:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b04a:	ea41 0909 	orr.w	r9, r1, r9
 800b04e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b050:	ea59 0101 	orrs.w	r1, r9, r1
 800b054:	d120      	bne.n	800b098 <_dtoa_r+0xad8>
 800b056:	2a00      	cmp	r2, #0
 800b058:	ddec      	ble.n	800b034 <_dtoa_r+0xa74>
 800b05a:	4659      	mov	r1, fp
 800b05c:	2201      	movs	r2, #1
 800b05e:	4628      	mov	r0, r5
 800b060:	9308      	str	r3, [sp, #32]
 800b062:	f000 fac3 	bl	800b5ec <__lshift>
 800b066:	4621      	mov	r1, r4
 800b068:	4683      	mov	fp, r0
 800b06a:	f000 fb2f 	bl	800b6cc <__mcmp>
 800b06e:	2800      	cmp	r0, #0
 800b070:	9b08      	ldr	r3, [sp, #32]
 800b072:	dc02      	bgt.n	800b07a <_dtoa_r+0xaba>
 800b074:	d1de      	bne.n	800b034 <_dtoa_r+0xa74>
 800b076:	07da      	lsls	r2, r3, #31
 800b078:	d5dc      	bpl.n	800b034 <_dtoa_r+0xa74>
 800b07a:	2b39      	cmp	r3, #57	; 0x39
 800b07c:	d1d8      	bne.n	800b030 <_dtoa_r+0xa70>
 800b07e:	2339      	movs	r3, #57	; 0x39
 800b080:	9a04      	ldr	r2, [sp, #16]
 800b082:	7013      	strb	r3, [r2, #0]
 800b084:	463b      	mov	r3, r7
 800b086:	461f      	mov	r7, r3
 800b088:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	2a39      	cmp	r2, #57	; 0x39
 800b090:	d050      	beq.n	800b134 <_dtoa_r+0xb74>
 800b092:	3201      	adds	r2, #1
 800b094:	701a      	strb	r2, [r3, #0]
 800b096:	e747      	b.n	800af28 <_dtoa_r+0x968>
 800b098:	2a00      	cmp	r2, #0
 800b09a:	dd03      	ble.n	800b0a4 <_dtoa_r+0xae4>
 800b09c:	2b39      	cmp	r3, #57	; 0x39
 800b09e:	d0ee      	beq.n	800b07e <_dtoa_r+0xabe>
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	e7c7      	b.n	800b034 <_dtoa_r+0xa74>
 800b0a4:	9a08      	ldr	r2, [sp, #32]
 800b0a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b0a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b0ac:	428a      	cmp	r2, r1
 800b0ae:	d02a      	beq.n	800b106 <_dtoa_r+0xb46>
 800b0b0:	4659      	mov	r1, fp
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	220a      	movs	r2, #10
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f000 f8ec 	bl	800b294 <__multadd>
 800b0bc:	45b0      	cmp	r8, r6
 800b0be:	4683      	mov	fp, r0
 800b0c0:	f04f 0300 	mov.w	r3, #0
 800b0c4:	f04f 020a 	mov.w	r2, #10
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	d107      	bne.n	800b0de <_dtoa_r+0xb1e>
 800b0ce:	f000 f8e1 	bl	800b294 <__multadd>
 800b0d2:	4680      	mov	r8, r0
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	9b08      	ldr	r3, [sp, #32]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	9308      	str	r3, [sp, #32]
 800b0dc:	e775      	b.n	800afca <_dtoa_r+0xa0a>
 800b0de:	f000 f8d9 	bl	800b294 <__multadd>
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4680      	mov	r8, r0
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f000 f8d2 	bl	800b294 <__multadd>
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	e7f0      	b.n	800b0d6 <_dtoa_r+0xb16>
 800b0f4:	f1b9 0f00 	cmp.w	r9, #0
 800b0f8:	bfcc      	ite	gt
 800b0fa:	464f      	movgt	r7, r9
 800b0fc:	2701      	movle	r7, #1
 800b0fe:	f04f 0800 	mov.w	r8, #0
 800b102:	9a03      	ldr	r2, [sp, #12]
 800b104:	4417      	add	r7, r2
 800b106:	4659      	mov	r1, fp
 800b108:	2201      	movs	r2, #1
 800b10a:	4628      	mov	r0, r5
 800b10c:	9308      	str	r3, [sp, #32]
 800b10e:	f000 fa6d 	bl	800b5ec <__lshift>
 800b112:	4621      	mov	r1, r4
 800b114:	4683      	mov	fp, r0
 800b116:	f000 fad9 	bl	800b6cc <__mcmp>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	dcb2      	bgt.n	800b084 <_dtoa_r+0xac4>
 800b11e:	d102      	bne.n	800b126 <_dtoa_r+0xb66>
 800b120:	9b08      	ldr	r3, [sp, #32]
 800b122:	07db      	lsls	r3, r3, #31
 800b124:	d4ae      	bmi.n	800b084 <_dtoa_r+0xac4>
 800b126:	463b      	mov	r3, r7
 800b128:	461f      	mov	r7, r3
 800b12a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b12e:	2a30      	cmp	r2, #48	; 0x30
 800b130:	d0fa      	beq.n	800b128 <_dtoa_r+0xb68>
 800b132:	e6f9      	b.n	800af28 <_dtoa_r+0x968>
 800b134:	9a03      	ldr	r2, [sp, #12]
 800b136:	429a      	cmp	r2, r3
 800b138:	d1a5      	bne.n	800b086 <_dtoa_r+0xac6>
 800b13a:	2331      	movs	r3, #49	; 0x31
 800b13c:	f10a 0a01 	add.w	sl, sl, #1
 800b140:	e779      	b.n	800b036 <_dtoa_r+0xa76>
 800b142:	4b14      	ldr	r3, [pc, #80]	; (800b194 <_dtoa_r+0xbd4>)
 800b144:	f7ff baa8 	b.w	800a698 <_dtoa_r+0xd8>
 800b148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f47f aa81 	bne.w	800a652 <_dtoa_r+0x92>
 800b150:	4b11      	ldr	r3, [pc, #68]	; (800b198 <_dtoa_r+0xbd8>)
 800b152:	f7ff baa1 	b.w	800a698 <_dtoa_r+0xd8>
 800b156:	f1b9 0f00 	cmp.w	r9, #0
 800b15a:	dc03      	bgt.n	800b164 <_dtoa_r+0xba4>
 800b15c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b15e:	2b02      	cmp	r3, #2
 800b160:	f73f aecb 	bgt.w	800aefa <_dtoa_r+0x93a>
 800b164:	9f03      	ldr	r7, [sp, #12]
 800b166:	4621      	mov	r1, r4
 800b168:	4658      	mov	r0, fp
 800b16a:	f7ff f99c 	bl	800a4a6 <quorem>
 800b16e:	9a03      	ldr	r2, [sp, #12]
 800b170:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b174:	f807 3b01 	strb.w	r3, [r7], #1
 800b178:	1aba      	subs	r2, r7, r2
 800b17a:	4591      	cmp	r9, r2
 800b17c:	ddba      	ble.n	800b0f4 <_dtoa_r+0xb34>
 800b17e:	4659      	mov	r1, fp
 800b180:	2300      	movs	r3, #0
 800b182:	220a      	movs	r2, #10
 800b184:	4628      	mov	r0, r5
 800b186:	f000 f885 	bl	800b294 <__multadd>
 800b18a:	4683      	mov	fp, r0
 800b18c:	e7eb      	b.n	800b166 <_dtoa_r+0xba6>
 800b18e:	bf00      	nop
 800b190:	0800cb0b 	.word	0x0800cb0b
 800b194:	0800ca68 	.word	0x0800ca68
 800b198:	0800ca8c 	.word	0x0800ca8c

0800b19c <_localeconv_r>:
 800b19c:	4800      	ldr	r0, [pc, #0]	; (800b1a0 <_localeconv_r+0x4>)
 800b19e:	4770      	bx	lr
 800b1a0:	200002d0 	.word	0x200002d0

0800b1a4 <malloc>:
 800b1a4:	4b02      	ldr	r3, [pc, #8]	; (800b1b0 <malloc+0xc>)
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	f000 bc0f 	b.w	800b9cc <_malloc_r>
 800b1ae:	bf00      	nop
 800b1b0:	2000017c 	.word	0x2000017c

0800b1b4 <memchr>:
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	b510      	push	{r4, lr}
 800b1b8:	b2c9      	uxtb	r1, r1
 800b1ba:	4402      	add	r2, r0
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	4618      	mov	r0, r3
 800b1c0:	d101      	bne.n	800b1c6 <memchr+0x12>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e003      	b.n	800b1ce <memchr+0x1a>
 800b1c6:	7804      	ldrb	r4, [r0, #0]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	428c      	cmp	r4, r1
 800b1cc:	d1f6      	bne.n	800b1bc <memchr+0x8>
 800b1ce:	bd10      	pop	{r4, pc}

0800b1d0 <_Balloc>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	b976      	cbnz	r6, 800b1f8 <_Balloc+0x28>
 800b1da:	2010      	movs	r0, #16
 800b1dc:	f7ff ffe2 	bl	800b1a4 <malloc>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	6260      	str	r0, [r4, #36]	; 0x24
 800b1e4:	b920      	cbnz	r0, 800b1f0 <_Balloc+0x20>
 800b1e6:	2166      	movs	r1, #102	; 0x66
 800b1e8:	4b17      	ldr	r3, [pc, #92]	; (800b248 <_Balloc+0x78>)
 800b1ea:	4818      	ldr	r0, [pc, #96]	; (800b24c <_Balloc+0x7c>)
 800b1ec:	f000 fdce 	bl	800bd8c <__assert_func>
 800b1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1f4:	6006      	str	r6, [r0, #0]
 800b1f6:	60c6      	str	r6, [r0, #12]
 800b1f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1fa:	68f3      	ldr	r3, [r6, #12]
 800b1fc:	b183      	cbz	r3, 800b220 <_Balloc+0x50>
 800b1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b206:	b9b8      	cbnz	r0, 800b238 <_Balloc+0x68>
 800b208:	2101      	movs	r1, #1
 800b20a:	fa01 f605 	lsl.w	r6, r1, r5
 800b20e:	1d72      	adds	r2, r6, #5
 800b210:	4620      	mov	r0, r4
 800b212:	0092      	lsls	r2, r2, #2
 800b214:	f000 fb5e 	bl	800b8d4 <_calloc_r>
 800b218:	b160      	cbz	r0, 800b234 <_Balloc+0x64>
 800b21a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b21e:	e00e      	b.n	800b23e <_Balloc+0x6e>
 800b220:	2221      	movs	r2, #33	; 0x21
 800b222:	2104      	movs	r1, #4
 800b224:	4620      	mov	r0, r4
 800b226:	f000 fb55 	bl	800b8d4 <_calloc_r>
 800b22a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22c:	60f0      	str	r0, [r6, #12]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e4      	bne.n	800b1fe <_Balloc+0x2e>
 800b234:	2000      	movs	r0, #0
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	6802      	ldr	r2, [r0, #0]
 800b23a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b23e:	2300      	movs	r3, #0
 800b240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b244:	e7f7      	b.n	800b236 <_Balloc+0x66>
 800b246:	bf00      	nop
 800b248:	0800ca99 	.word	0x0800ca99
 800b24c:	0800cb1c 	.word	0x0800cb1c

0800b250 <_Bfree>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b254:	4605      	mov	r5, r0
 800b256:	460c      	mov	r4, r1
 800b258:	b976      	cbnz	r6, 800b278 <_Bfree+0x28>
 800b25a:	2010      	movs	r0, #16
 800b25c:	f7ff ffa2 	bl	800b1a4 <malloc>
 800b260:	4602      	mov	r2, r0
 800b262:	6268      	str	r0, [r5, #36]	; 0x24
 800b264:	b920      	cbnz	r0, 800b270 <_Bfree+0x20>
 800b266:	218a      	movs	r1, #138	; 0x8a
 800b268:	4b08      	ldr	r3, [pc, #32]	; (800b28c <_Bfree+0x3c>)
 800b26a:	4809      	ldr	r0, [pc, #36]	; (800b290 <_Bfree+0x40>)
 800b26c:	f000 fd8e 	bl	800bd8c <__assert_func>
 800b270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b274:	6006      	str	r6, [r0, #0]
 800b276:	60c6      	str	r6, [r0, #12]
 800b278:	b13c      	cbz	r4, 800b28a <_Bfree+0x3a>
 800b27a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b27c:	6862      	ldr	r2, [r4, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b284:	6021      	str	r1, [r4, #0]
 800b286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	0800ca99 	.word	0x0800ca99
 800b290:	0800cb1c 	.word	0x0800cb1c

0800b294 <__multadd>:
 800b294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	4607      	mov	r7, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	461e      	mov	r6, r3
 800b29e:	2000      	movs	r0, #0
 800b2a0:	690d      	ldr	r5, [r1, #16]
 800b2a2:	f101 0c14 	add.w	ip, r1, #20
 800b2a6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	b299      	uxth	r1, r3
 800b2ae:	fb02 6101 	mla	r1, r2, r1, r6
 800b2b2:	0c1e      	lsrs	r6, r3, #16
 800b2b4:	0c0b      	lsrs	r3, r1, #16
 800b2b6:	fb02 3306 	mla	r3, r2, r6, r3
 800b2ba:	b289      	uxth	r1, r1
 800b2bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2c0:	4285      	cmp	r5, r0
 800b2c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800b2ca:	dcec      	bgt.n	800b2a6 <__multadd+0x12>
 800b2cc:	b30e      	cbz	r6, 800b312 <__multadd+0x7e>
 800b2ce:	68a3      	ldr	r3, [r4, #8]
 800b2d0:	42ab      	cmp	r3, r5
 800b2d2:	dc19      	bgt.n	800b308 <__multadd+0x74>
 800b2d4:	6861      	ldr	r1, [r4, #4]
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	3101      	adds	r1, #1
 800b2da:	f7ff ff79 	bl	800b1d0 <_Balloc>
 800b2de:	4680      	mov	r8, r0
 800b2e0:	b928      	cbnz	r0, 800b2ee <__multadd+0x5a>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	21b5      	movs	r1, #181	; 0xb5
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <__multadd+0x84>)
 800b2e8:	480c      	ldr	r0, [pc, #48]	; (800b31c <__multadd+0x88>)
 800b2ea:	f000 fd4f 	bl	800bd8c <__assert_func>
 800b2ee:	6922      	ldr	r2, [r4, #16]
 800b2f0:	f104 010c 	add.w	r1, r4, #12
 800b2f4:	3202      	adds	r2, #2
 800b2f6:	0092      	lsls	r2, r2, #2
 800b2f8:	300c      	adds	r0, #12
 800b2fa:	f7fe fc27 	bl	8009b4c <memcpy>
 800b2fe:	4621      	mov	r1, r4
 800b300:	4638      	mov	r0, r7
 800b302:	f7ff ffa5 	bl	800b250 <_Bfree>
 800b306:	4644      	mov	r4, r8
 800b308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b30c:	3501      	adds	r5, #1
 800b30e:	615e      	str	r6, [r3, #20]
 800b310:	6125      	str	r5, [r4, #16]
 800b312:	4620      	mov	r0, r4
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	0800cb0b 	.word	0x0800cb0b
 800b31c:	0800cb1c 	.word	0x0800cb1c

0800b320 <__hi0bits>:
 800b320:	0c02      	lsrs	r2, r0, #16
 800b322:	0412      	lsls	r2, r2, #16
 800b324:	4603      	mov	r3, r0
 800b326:	b9ca      	cbnz	r2, 800b35c <__hi0bits+0x3c>
 800b328:	0403      	lsls	r3, r0, #16
 800b32a:	2010      	movs	r0, #16
 800b32c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b330:	bf04      	itt	eq
 800b332:	021b      	lsleq	r3, r3, #8
 800b334:	3008      	addeq	r0, #8
 800b336:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b33a:	bf04      	itt	eq
 800b33c:	011b      	lsleq	r3, r3, #4
 800b33e:	3004      	addeq	r0, #4
 800b340:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b344:	bf04      	itt	eq
 800b346:	009b      	lsleq	r3, r3, #2
 800b348:	3002      	addeq	r0, #2
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	db05      	blt.n	800b35a <__hi0bits+0x3a>
 800b34e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b352:	f100 0001 	add.w	r0, r0, #1
 800b356:	bf08      	it	eq
 800b358:	2020      	moveq	r0, #32
 800b35a:	4770      	bx	lr
 800b35c:	2000      	movs	r0, #0
 800b35e:	e7e5      	b.n	800b32c <__hi0bits+0xc>

0800b360 <__lo0bits>:
 800b360:	6803      	ldr	r3, [r0, #0]
 800b362:	4602      	mov	r2, r0
 800b364:	f013 0007 	ands.w	r0, r3, #7
 800b368:	d00b      	beq.n	800b382 <__lo0bits+0x22>
 800b36a:	07d9      	lsls	r1, r3, #31
 800b36c:	d421      	bmi.n	800b3b2 <__lo0bits+0x52>
 800b36e:	0798      	lsls	r0, r3, #30
 800b370:	bf49      	itett	mi
 800b372:	085b      	lsrmi	r3, r3, #1
 800b374:	089b      	lsrpl	r3, r3, #2
 800b376:	2001      	movmi	r0, #1
 800b378:	6013      	strmi	r3, [r2, #0]
 800b37a:	bf5c      	itt	pl
 800b37c:	2002      	movpl	r0, #2
 800b37e:	6013      	strpl	r3, [r2, #0]
 800b380:	4770      	bx	lr
 800b382:	b299      	uxth	r1, r3
 800b384:	b909      	cbnz	r1, 800b38a <__lo0bits+0x2a>
 800b386:	2010      	movs	r0, #16
 800b388:	0c1b      	lsrs	r3, r3, #16
 800b38a:	b2d9      	uxtb	r1, r3
 800b38c:	b909      	cbnz	r1, 800b392 <__lo0bits+0x32>
 800b38e:	3008      	adds	r0, #8
 800b390:	0a1b      	lsrs	r3, r3, #8
 800b392:	0719      	lsls	r1, r3, #28
 800b394:	bf04      	itt	eq
 800b396:	091b      	lsreq	r3, r3, #4
 800b398:	3004      	addeq	r0, #4
 800b39a:	0799      	lsls	r1, r3, #30
 800b39c:	bf04      	itt	eq
 800b39e:	089b      	lsreq	r3, r3, #2
 800b3a0:	3002      	addeq	r0, #2
 800b3a2:	07d9      	lsls	r1, r3, #31
 800b3a4:	d403      	bmi.n	800b3ae <__lo0bits+0x4e>
 800b3a6:	085b      	lsrs	r3, r3, #1
 800b3a8:	f100 0001 	add.w	r0, r0, #1
 800b3ac:	d003      	beq.n	800b3b6 <__lo0bits+0x56>
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	4770      	bx	lr
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	4770      	bx	lr
 800b3b6:	2020      	movs	r0, #32
 800b3b8:	4770      	bx	lr
	...

0800b3bc <__i2b>:
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	460c      	mov	r4, r1
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	f7ff ff05 	bl	800b1d0 <_Balloc>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	b928      	cbnz	r0, 800b3d6 <__i2b+0x1a>
 800b3ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3ce:	4b04      	ldr	r3, [pc, #16]	; (800b3e0 <__i2b+0x24>)
 800b3d0:	4804      	ldr	r0, [pc, #16]	; (800b3e4 <__i2b+0x28>)
 800b3d2:	f000 fcdb 	bl	800bd8c <__assert_func>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	6144      	str	r4, [r0, #20]
 800b3da:	6103      	str	r3, [r0, #16]
 800b3dc:	bd10      	pop	{r4, pc}
 800b3de:	bf00      	nop
 800b3e0:	0800cb0b 	.word	0x0800cb0b
 800b3e4:	0800cb1c 	.word	0x0800cb1c

0800b3e8 <__multiply>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	4691      	mov	r9, r2
 800b3ee:	690a      	ldr	r2, [r1, #16]
 800b3f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	bfbe      	ittt	lt
 800b3fa:	460b      	movlt	r3, r1
 800b3fc:	464c      	movlt	r4, r9
 800b3fe:	4699      	movlt	r9, r3
 800b400:	6927      	ldr	r7, [r4, #16]
 800b402:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	6861      	ldr	r1, [r4, #4]
 800b40a:	eb07 060a 	add.w	r6, r7, sl
 800b40e:	42b3      	cmp	r3, r6
 800b410:	b085      	sub	sp, #20
 800b412:	bfb8      	it	lt
 800b414:	3101      	addlt	r1, #1
 800b416:	f7ff fedb 	bl	800b1d0 <_Balloc>
 800b41a:	b930      	cbnz	r0, 800b42a <__multiply+0x42>
 800b41c:	4602      	mov	r2, r0
 800b41e:	f240 115d 	movw	r1, #349	; 0x15d
 800b422:	4b43      	ldr	r3, [pc, #268]	; (800b530 <__multiply+0x148>)
 800b424:	4843      	ldr	r0, [pc, #268]	; (800b534 <__multiply+0x14c>)
 800b426:	f000 fcb1 	bl	800bd8c <__assert_func>
 800b42a:	f100 0514 	add.w	r5, r0, #20
 800b42e:	462b      	mov	r3, r5
 800b430:	2200      	movs	r2, #0
 800b432:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b436:	4543      	cmp	r3, r8
 800b438:	d321      	bcc.n	800b47e <__multiply+0x96>
 800b43a:	f104 0314 	add.w	r3, r4, #20
 800b43e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b442:	f109 0314 	add.w	r3, r9, #20
 800b446:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b44a:	9202      	str	r2, [sp, #8]
 800b44c:	1b3a      	subs	r2, r7, r4
 800b44e:	3a15      	subs	r2, #21
 800b450:	f022 0203 	bic.w	r2, r2, #3
 800b454:	3204      	adds	r2, #4
 800b456:	f104 0115 	add.w	r1, r4, #21
 800b45a:	428f      	cmp	r7, r1
 800b45c:	bf38      	it	cc
 800b45e:	2204      	movcc	r2, #4
 800b460:	9201      	str	r2, [sp, #4]
 800b462:	9a02      	ldr	r2, [sp, #8]
 800b464:	9303      	str	r3, [sp, #12]
 800b466:	429a      	cmp	r2, r3
 800b468:	d80c      	bhi.n	800b484 <__multiply+0x9c>
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	dd03      	ble.n	800b476 <__multiply+0x8e>
 800b46e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b472:	2b00      	cmp	r3, #0
 800b474:	d059      	beq.n	800b52a <__multiply+0x142>
 800b476:	6106      	str	r6, [r0, #16]
 800b478:	b005      	add	sp, #20
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47e:	f843 2b04 	str.w	r2, [r3], #4
 800b482:	e7d8      	b.n	800b436 <__multiply+0x4e>
 800b484:	f8b3 a000 	ldrh.w	sl, [r3]
 800b488:	f1ba 0f00 	cmp.w	sl, #0
 800b48c:	d023      	beq.n	800b4d6 <__multiply+0xee>
 800b48e:	46a9      	mov	r9, r5
 800b490:	f04f 0c00 	mov.w	ip, #0
 800b494:	f104 0e14 	add.w	lr, r4, #20
 800b498:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b49c:	f8d9 1000 	ldr.w	r1, [r9]
 800b4a0:	fa1f fb82 	uxth.w	fp, r2
 800b4a4:	b289      	uxth	r1, r1
 800b4a6:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4aa:	4461      	add	r1, ip
 800b4ac:	f8d9 c000 	ldr.w	ip, [r9]
 800b4b0:	0c12      	lsrs	r2, r2, #16
 800b4b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b4b6:	fb0a c202 	mla	r2, sl, r2, ip
 800b4ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4be:	b289      	uxth	r1, r1
 800b4c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4c4:	4577      	cmp	r7, lr
 800b4c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4ca:	f849 1b04 	str.w	r1, [r9], #4
 800b4ce:	d8e3      	bhi.n	800b498 <__multiply+0xb0>
 800b4d0:	9a01      	ldr	r2, [sp, #4]
 800b4d2:	f845 c002 	str.w	ip, [r5, r2]
 800b4d6:	9a03      	ldr	r2, [sp, #12]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4de:	f1b9 0f00 	cmp.w	r9, #0
 800b4e2:	d020      	beq.n	800b526 <__multiply+0x13e>
 800b4e4:	46ae      	mov	lr, r5
 800b4e6:	f04f 0a00 	mov.w	sl, #0
 800b4ea:	6829      	ldr	r1, [r5, #0]
 800b4ec:	f104 0c14 	add.w	ip, r4, #20
 800b4f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b4f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4f8:	b289      	uxth	r1, r1
 800b4fa:	fb09 220b 	mla	r2, r9, fp, r2
 800b4fe:	4492      	add	sl, r2
 800b500:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b504:	f84e 1b04 	str.w	r1, [lr], #4
 800b508:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b50c:	f8be 1000 	ldrh.w	r1, [lr]
 800b510:	0c12      	lsrs	r2, r2, #16
 800b512:	fb09 1102 	mla	r1, r9, r2, r1
 800b516:	4567      	cmp	r7, ip
 800b518:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b51c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b520:	d8e6      	bhi.n	800b4f0 <__multiply+0x108>
 800b522:	9a01      	ldr	r2, [sp, #4]
 800b524:	50a9      	str	r1, [r5, r2]
 800b526:	3504      	adds	r5, #4
 800b528:	e79b      	b.n	800b462 <__multiply+0x7a>
 800b52a:	3e01      	subs	r6, #1
 800b52c:	e79d      	b.n	800b46a <__multiply+0x82>
 800b52e:	bf00      	nop
 800b530:	0800cb0b 	.word	0x0800cb0b
 800b534:	0800cb1c 	.word	0x0800cb1c

0800b538 <__pow5mult>:
 800b538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53c:	4615      	mov	r5, r2
 800b53e:	f012 0203 	ands.w	r2, r2, #3
 800b542:	4606      	mov	r6, r0
 800b544:	460f      	mov	r7, r1
 800b546:	d007      	beq.n	800b558 <__pow5mult+0x20>
 800b548:	4c25      	ldr	r4, [pc, #148]	; (800b5e0 <__pow5mult+0xa8>)
 800b54a:	3a01      	subs	r2, #1
 800b54c:	2300      	movs	r3, #0
 800b54e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b552:	f7ff fe9f 	bl	800b294 <__multadd>
 800b556:	4607      	mov	r7, r0
 800b558:	10ad      	asrs	r5, r5, #2
 800b55a:	d03d      	beq.n	800b5d8 <__pow5mult+0xa0>
 800b55c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b55e:	b97c      	cbnz	r4, 800b580 <__pow5mult+0x48>
 800b560:	2010      	movs	r0, #16
 800b562:	f7ff fe1f 	bl	800b1a4 <malloc>
 800b566:	4602      	mov	r2, r0
 800b568:	6270      	str	r0, [r6, #36]	; 0x24
 800b56a:	b928      	cbnz	r0, 800b578 <__pow5mult+0x40>
 800b56c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b570:	4b1c      	ldr	r3, [pc, #112]	; (800b5e4 <__pow5mult+0xac>)
 800b572:	481d      	ldr	r0, [pc, #116]	; (800b5e8 <__pow5mult+0xb0>)
 800b574:	f000 fc0a 	bl	800bd8c <__assert_func>
 800b578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b57c:	6004      	str	r4, [r0, #0]
 800b57e:	60c4      	str	r4, [r0, #12]
 800b580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b588:	b94c      	cbnz	r4, 800b59e <__pow5mult+0x66>
 800b58a:	f240 2171 	movw	r1, #625	; 0x271
 800b58e:	4630      	mov	r0, r6
 800b590:	f7ff ff14 	bl	800b3bc <__i2b>
 800b594:	2300      	movs	r3, #0
 800b596:	4604      	mov	r4, r0
 800b598:	f8c8 0008 	str.w	r0, [r8, #8]
 800b59c:	6003      	str	r3, [r0, #0]
 800b59e:	f04f 0900 	mov.w	r9, #0
 800b5a2:	07eb      	lsls	r3, r5, #31
 800b5a4:	d50a      	bpl.n	800b5bc <__pow5mult+0x84>
 800b5a6:	4639      	mov	r1, r7
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff ff1c 	bl	800b3e8 <__multiply>
 800b5b0:	4680      	mov	r8, r0
 800b5b2:	4639      	mov	r1, r7
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7ff fe4b 	bl	800b250 <_Bfree>
 800b5ba:	4647      	mov	r7, r8
 800b5bc:	106d      	asrs	r5, r5, #1
 800b5be:	d00b      	beq.n	800b5d8 <__pow5mult+0xa0>
 800b5c0:	6820      	ldr	r0, [r4, #0]
 800b5c2:	b938      	cbnz	r0, 800b5d4 <__pow5mult+0x9c>
 800b5c4:	4622      	mov	r2, r4
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7ff ff0d 	bl	800b3e8 <__multiply>
 800b5ce:	6020      	str	r0, [r4, #0]
 800b5d0:	f8c0 9000 	str.w	r9, [r0]
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	e7e4      	b.n	800b5a2 <__pow5mult+0x6a>
 800b5d8:	4638      	mov	r0, r7
 800b5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5de:	bf00      	nop
 800b5e0:	0800cc68 	.word	0x0800cc68
 800b5e4:	0800ca99 	.word	0x0800ca99
 800b5e8:	0800cb1c 	.word	0x0800cb1c

0800b5ec <__lshift>:
 800b5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	4607      	mov	r7, r0
 800b5f4:	4691      	mov	r9, r2
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	6849      	ldr	r1, [r1, #4]
 800b5fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5fe:	68a3      	ldr	r3, [r4, #8]
 800b600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b604:	f108 0601 	add.w	r6, r8, #1
 800b608:	42b3      	cmp	r3, r6
 800b60a:	db0b      	blt.n	800b624 <__lshift+0x38>
 800b60c:	4638      	mov	r0, r7
 800b60e:	f7ff fddf 	bl	800b1d0 <_Balloc>
 800b612:	4605      	mov	r5, r0
 800b614:	b948      	cbnz	r0, 800b62a <__lshift+0x3e>
 800b616:	4602      	mov	r2, r0
 800b618:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b61c:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <__lshift+0xd8>)
 800b61e:	482a      	ldr	r0, [pc, #168]	; (800b6c8 <__lshift+0xdc>)
 800b620:	f000 fbb4 	bl	800bd8c <__assert_func>
 800b624:	3101      	adds	r1, #1
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	e7ee      	b.n	800b608 <__lshift+0x1c>
 800b62a:	2300      	movs	r3, #0
 800b62c:	f100 0114 	add.w	r1, r0, #20
 800b630:	f100 0210 	add.w	r2, r0, #16
 800b634:	4618      	mov	r0, r3
 800b636:	4553      	cmp	r3, sl
 800b638:	db37      	blt.n	800b6aa <__lshift+0xbe>
 800b63a:	6920      	ldr	r0, [r4, #16]
 800b63c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b640:	f104 0314 	add.w	r3, r4, #20
 800b644:	f019 091f 	ands.w	r9, r9, #31
 800b648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b64c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b650:	d02f      	beq.n	800b6b2 <__lshift+0xc6>
 800b652:	468a      	mov	sl, r1
 800b654:	f04f 0c00 	mov.w	ip, #0
 800b658:	f1c9 0e20 	rsb	lr, r9, #32
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	fa02 f209 	lsl.w	r2, r2, r9
 800b662:	ea42 020c 	orr.w	r2, r2, ip
 800b666:	f84a 2b04 	str.w	r2, [sl], #4
 800b66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b66e:	4298      	cmp	r0, r3
 800b670:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b674:	d8f2      	bhi.n	800b65c <__lshift+0x70>
 800b676:	1b03      	subs	r3, r0, r4
 800b678:	3b15      	subs	r3, #21
 800b67a:	f023 0303 	bic.w	r3, r3, #3
 800b67e:	3304      	adds	r3, #4
 800b680:	f104 0215 	add.w	r2, r4, #21
 800b684:	4290      	cmp	r0, r2
 800b686:	bf38      	it	cc
 800b688:	2304      	movcc	r3, #4
 800b68a:	f841 c003 	str.w	ip, [r1, r3]
 800b68e:	f1bc 0f00 	cmp.w	ip, #0
 800b692:	d001      	beq.n	800b698 <__lshift+0xac>
 800b694:	f108 0602 	add.w	r6, r8, #2
 800b698:	3e01      	subs	r6, #1
 800b69a:	4638      	mov	r0, r7
 800b69c:	4621      	mov	r1, r4
 800b69e:	612e      	str	r6, [r5, #16]
 800b6a0:	f7ff fdd6 	bl	800b250 <_Bfree>
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	e7c1      	b.n	800b636 <__lshift+0x4a>
 800b6b2:	3904      	subs	r1, #4
 800b6b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6b8:	4298      	cmp	r0, r3
 800b6ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6be:	d8f9      	bhi.n	800b6b4 <__lshift+0xc8>
 800b6c0:	e7ea      	b.n	800b698 <__lshift+0xac>
 800b6c2:	bf00      	nop
 800b6c4:	0800cb0b 	.word	0x0800cb0b
 800b6c8:	0800cb1c 	.word	0x0800cb1c

0800b6cc <__mcmp>:
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	690a      	ldr	r2, [r1, #16]
 800b6d0:	6900      	ldr	r0, [r0, #16]
 800b6d2:	b530      	push	{r4, r5, lr}
 800b6d4:	1a80      	subs	r0, r0, r2
 800b6d6:	d10d      	bne.n	800b6f4 <__mcmp+0x28>
 800b6d8:	3314      	adds	r3, #20
 800b6da:	3114      	adds	r1, #20
 800b6dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6ec:	4295      	cmp	r5, r2
 800b6ee:	d002      	beq.n	800b6f6 <__mcmp+0x2a>
 800b6f0:	d304      	bcc.n	800b6fc <__mcmp+0x30>
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	bd30      	pop	{r4, r5, pc}
 800b6f6:	42a3      	cmp	r3, r4
 800b6f8:	d3f4      	bcc.n	800b6e4 <__mcmp+0x18>
 800b6fa:	e7fb      	b.n	800b6f4 <__mcmp+0x28>
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	e7f8      	b.n	800b6f4 <__mcmp+0x28>
	...

0800b704 <__mdiff>:
 800b704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b708:	460d      	mov	r5, r1
 800b70a:	4607      	mov	r7, r0
 800b70c:	4611      	mov	r1, r2
 800b70e:	4628      	mov	r0, r5
 800b710:	4614      	mov	r4, r2
 800b712:	f7ff ffdb 	bl	800b6cc <__mcmp>
 800b716:	1e06      	subs	r6, r0, #0
 800b718:	d111      	bne.n	800b73e <__mdiff+0x3a>
 800b71a:	4631      	mov	r1, r6
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7ff fd57 	bl	800b1d0 <_Balloc>
 800b722:	4602      	mov	r2, r0
 800b724:	b928      	cbnz	r0, 800b732 <__mdiff+0x2e>
 800b726:	f240 2132 	movw	r1, #562	; 0x232
 800b72a:	4b3a      	ldr	r3, [pc, #232]	; (800b814 <__mdiff+0x110>)
 800b72c:	483a      	ldr	r0, [pc, #232]	; (800b818 <__mdiff+0x114>)
 800b72e:	f000 fb2d 	bl	800bd8c <__assert_func>
 800b732:	2301      	movs	r3, #1
 800b734:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b738:	4610      	mov	r0, r2
 800b73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73e:	bfa4      	itt	ge
 800b740:	4623      	movge	r3, r4
 800b742:	462c      	movge	r4, r5
 800b744:	4638      	mov	r0, r7
 800b746:	6861      	ldr	r1, [r4, #4]
 800b748:	bfa6      	itte	ge
 800b74a:	461d      	movge	r5, r3
 800b74c:	2600      	movge	r6, #0
 800b74e:	2601      	movlt	r6, #1
 800b750:	f7ff fd3e 	bl	800b1d0 <_Balloc>
 800b754:	4602      	mov	r2, r0
 800b756:	b918      	cbnz	r0, 800b760 <__mdiff+0x5c>
 800b758:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b75c:	4b2d      	ldr	r3, [pc, #180]	; (800b814 <__mdiff+0x110>)
 800b75e:	e7e5      	b.n	800b72c <__mdiff+0x28>
 800b760:	f102 0814 	add.w	r8, r2, #20
 800b764:	46c2      	mov	sl, r8
 800b766:	f04f 0c00 	mov.w	ip, #0
 800b76a:	6927      	ldr	r7, [r4, #16]
 800b76c:	60c6      	str	r6, [r0, #12]
 800b76e:	692e      	ldr	r6, [r5, #16]
 800b770:	f104 0014 	add.w	r0, r4, #20
 800b774:	f105 0914 	add.w	r9, r5, #20
 800b778:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b77c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b780:	3410      	adds	r4, #16
 800b782:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b786:	f859 3b04 	ldr.w	r3, [r9], #4
 800b78a:	fa1f f18b 	uxth.w	r1, fp
 800b78e:	448c      	add	ip, r1
 800b790:	b299      	uxth	r1, r3
 800b792:	0c1b      	lsrs	r3, r3, #16
 800b794:	ebac 0101 	sub.w	r1, ip, r1
 800b798:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b79c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b7a0:	b289      	uxth	r1, r1
 800b7a2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b7a6:	454e      	cmp	r6, r9
 800b7a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b7ac:	f84a 3b04 	str.w	r3, [sl], #4
 800b7b0:	d8e7      	bhi.n	800b782 <__mdiff+0x7e>
 800b7b2:	1b73      	subs	r3, r6, r5
 800b7b4:	3b15      	subs	r3, #21
 800b7b6:	f023 0303 	bic.w	r3, r3, #3
 800b7ba:	3515      	adds	r5, #21
 800b7bc:	3304      	adds	r3, #4
 800b7be:	42ae      	cmp	r6, r5
 800b7c0:	bf38      	it	cc
 800b7c2:	2304      	movcc	r3, #4
 800b7c4:	4418      	add	r0, r3
 800b7c6:	4443      	add	r3, r8
 800b7c8:	461e      	mov	r6, r3
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	4575      	cmp	r5, lr
 800b7ce:	d30e      	bcc.n	800b7ee <__mdiff+0xea>
 800b7d0:	f10e 0103 	add.w	r1, lr, #3
 800b7d4:	1a09      	subs	r1, r1, r0
 800b7d6:	f021 0103 	bic.w	r1, r1, #3
 800b7da:	3803      	subs	r0, #3
 800b7dc:	4586      	cmp	lr, r0
 800b7de:	bf38      	it	cc
 800b7e0:	2100      	movcc	r1, #0
 800b7e2:	4419      	add	r1, r3
 800b7e4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b7e8:	b18b      	cbz	r3, 800b80e <__mdiff+0x10a>
 800b7ea:	6117      	str	r7, [r2, #16]
 800b7ec:	e7a4      	b.n	800b738 <__mdiff+0x34>
 800b7ee:	f855 8b04 	ldr.w	r8, [r5], #4
 800b7f2:	fa1f f188 	uxth.w	r1, r8
 800b7f6:	4461      	add	r1, ip
 800b7f8:	140c      	asrs	r4, r1, #16
 800b7fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7fe:	b289      	uxth	r1, r1
 800b800:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b804:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b808:	f846 1b04 	str.w	r1, [r6], #4
 800b80c:	e7de      	b.n	800b7cc <__mdiff+0xc8>
 800b80e:	3f01      	subs	r7, #1
 800b810:	e7e8      	b.n	800b7e4 <__mdiff+0xe0>
 800b812:	bf00      	nop
 800b814:	0800cb0b 	.word	0x0800cb0b
 800b818:	0800cb1c 	.word	0x0800cb1c

0800b81c <__d2b>:
 800b81c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b820:	2101      	movs	r1, #1
 800b822:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b826:	4690      	mov	r8, r2
 800b828:	461d      	mov	r5, r3
 800b82a:	f7ff fcd1 	bl	800b1d0 <_Balloc>
 800b82e:	4604      	mov	r4, r0
 800b830:	b930      	cbnz	r0, 800b840 <__d2b+0x24>
 800b832:	4602      	mov	r2, r0
 800b834:	f240 310a 	movw	r1, #778	; 0x30a
 800b838:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <__d2b+0xb0>)
 800b83a:	4825      	ldr	r0, [pc, #148]	; (800b8d0 <__d2b+0xb4>)
 800b83c:	f000 faa6 	bl	800bd8c <__assert_func>
 800b840:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b844:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b848:	bb2d      	cbnz	r5, 800b896 <__d2b+0x7a>
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	f1b8 0300 	subs.w	r3, r8, #0
 800b850:	d026      	beq.n	800b8a0 <__d2b+0x84>
 800b852:	4668      	mov	r0, sp
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	f7ff fd83 	bl	800b360 <__lo0bits>
 800b85a:	9900      	ldr	r1, [sp, #0]
 800b85c:	b1f0      	cbz	r0, 800b89c <__d2b+0x80>
 800b85e:	9a01      	ldr	r2, [sp, #4]
 800b860:	f1c0 0320 	rsb	r3, r0, #32
 800b864:	fa02 f303 	lsl.w	r3, r2, r3
 800b868:	430b      	orrs	r3, r1
 800b86a:	40c2      	lsrs	r2, r0
 800b86c:	6163      	str	r3, [r4, #20]
 800b86e:	9201      	str	r2, [sp, #4]
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	bf14      	ite	ne
 800b876:	2102      	movne	r1, #2
 800b878:	2101      	moveq	r1, #1
 800b87a:	61a3      	str	r3, [r4, #24]
 800b87c:	6121      	str	r1, [r4, #16]
 800b87e:	b1c5      	cbz	r5, 800b8b2 <__d2b+0x96>
 800b880:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b884:	4405      	add	r5, r0
 800b886:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b88a:	603d      	str	r5, [r7, #0]
 800b88c:	6030      	str	r0, [r6, #0]
 800b88e:	4620      	mov	r0, r4
 800b890:	b002      	add	sp, #8
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b89a:	e7d6      	b.n	800b84a <__d2b+0x2e>
 800b89c:	6161      	str	r1, [r4, #20]
 800b89e:	e7e7      	b.n	800b870 <__d2b+0x54>
 800b8a0:	a801      	add	r0, sp, #4
 800b8a2:	f7ff fd5d 	bl	800b360 <__lo0bits>
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	6121      	str	r1, [r4, #16]
 800b8ac:	6163      	str	r3, [r4, #20]
 800b8ae:	3020      	adds	r0, #32
 800b8b0:	e7e5      	b.n	800b87e <__d2b+0x62>
 800b8b2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b8b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8ba:	6038      	str	r0, [r7, #0]
 800b8bc:	6918      	ldr	r0, [r3, #16]
 800b8be:	f7ff fd2f 	bl	800b320 <__hi0bits>
 800b8c2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b8c6:	6031      	str	r1, [r6, #0]
 800b8c8:	e7e1      	b.n	800b88e <__d2b+0x72>
 800b8ca:	bf00      	nop
 800b8cc:	0800cb0b 	.word	0x0800cb0b
 800b8d0:	0800cb1c 	.word	0x0800cb1c

0800b8d4 <_calloc_r>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	fba1 5402 	umull	r5, r4, r1, r2
 800b8da:	b934      	cbnz	r4, 800b8ea <_calloc_r+0x16>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	f000 f875 	bl	800b9cc <_malloc_r>
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	b928      	cbnz	r0, 800b8f2 <_calloc_r+0x1e>
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ea:	220c      	movs	r2, #12
 800b8ec:	2600      	movs	r6, #0
 800b8ee:	6002      	str	r2, [r0, #0]
 800b8f0:	e7f9      	b.n	800b8e6 <_calloc_r+0x12>
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	f7fe f937 	bl	8009b68 <memset>
 800b8fa:	e7f4      	b.n	800b8e6 <_calloc_r+0x12>

0800b8fc <_free_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4605      	mov	r5, r0
 800b900:	2900      	cmp	r1, #0
 800b902:	d040      	beq.n	800b986 <_free_r+0x8a>
 800b904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b908:	1f0c      	subs	r4, r1, #4
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	bfb8      	it	lt
 800b90e:	18e4      	addlt	r4, r4, r3
 800b910:	f000 fa98 	bl	800be44 <__malloc_lock>
 800b914:	4a1c      	ldr	r2, [pc, #112]	; (800b988 <_free_r+0x8c>)
 800b916:	6813      	ldr	r3, [r2, #0]
 800b918:	b933      	cbnz	r3, 800b928 <_free_r+0x2c>
 800b91a:	6063      	str	r3, [r4, #4]
 800b91c:	6014      	str	r4, [r2, #0]
 800b91e:	4628      	mov	r0, r5
 800b920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b924:	f000 ba94 	b.w	800be50 <__malloc_unlock>
 800b928:	42a3      	cmp	r3, r4
 800b92a:	d908      	bls.n	800b93e <_free_r+0x42>
 800b92c:	6820      	ldr	r0, [r4, #0]
 800b92e:	1821      	adds	r1, r4, r0
 800b930:	428b      	cmp	r3, r1
 800b932:	bf01      	itttt	eq
 800b934:	6819      	ldreq	r1, [r3, #0]
 800b936:	685b      	ldreq	r3, [r3, #4]
 800b938:	1809      	addeq	r1, r1, r0
 800b93a:	6021      	streq	r1, [r4, #0]
 800b93c:	e7ed      	b.n	800b91a <_free_r+0x1e>
 800b93e:	461a      	mov	r2, r3
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	b10b      	cbz	r3, 800b948 <_free_r+0x4c>
 800b944:	42a3      	cmp	r3, r4
 800b946:	d9fa      	bls.n	800b93e <_free_r+0x42>
 800b948:	6811      	ldr	r1, [r2, #0]
 800b94a:	1850      	adds	r0, r2, r1
 800b94c:	42a0      	cmp	r0, r4
 800b94e:	d10b      	bne.n	800b968 <_free_r+0x6c>
 800b950:	6820      	ldr	r0, [r4, #0]
 800b952:	4401      	add	r1, r0
 800b954:	1850      	adds	r0, r2, r1
 800b956:	4283      	cmp	r3, r0
 800b958:	6011      	str	r1, [r2, #0]
 800b95a:	d1e0      	bne.n	800b91e <_free_r+0x22>
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4401      	add	r1, r0
 800b962:	6011      	str	r1, [r2, #0]
 800b964:	6053      	str	r3, [r2, #4]
 800b966:	e7da      	b.n	800b91e <_free_r+0x22>
 800b968:	d902      	bls.n	800b970 <_free_r+0x74>
 800b96a:	230c      	movs	r3, #12
 800b96c:	602b      	str	r3, [r5, #0]
 800b96e:	e7d6      	b.n	800b91e <_free_r+0x22>
 800b970:	6820      	ldr	r0, [r4, #0]
 800b972:	1821      	adds	r1, r4, r0
 800b974:	428b      	cmp	r3, r1
 800b976:	bf01      	itttt	eq
 800b978:	6819      	ldreq	r1, [r3, #0]
 800b97a:	685b      	ldreq	r3, [r3, #4]
 800b97c:	1809      	addeq	r1, r1, r0
 800b97e:	6021      	streq	r1, [r4, #0]
 800b980:	6063      	str	r3, [r4, #4]
 800b982:	6054      	str	r4, [r2, #4]
 800b984:	e7cb      	b.n	800b91e <_free_r+0x22>
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	200016f8 	.word	0x200016f8

0800b98c <sbrk_aligned>:
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	4e0e      	ldr	r6, [pc, #56]	; (800b9c8 <sbrk_aligned+0x3c>)
 800b990:	460c      	mov	r4, r1
 800b992:	6831      	ldr	r1, [r6, #0]
 800b994:	4605      	mov	r5, r0
 800b996:	b911      	cbnz	r1, 800b99e <sbrk_aligned+0x12>
 800b998:	f000 f9e8 	bl	800bd6c <_sbrk_r>
 800b99c:	6030      	str	r0, [r6, #0]
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f000 f9e3 	bl	800bd6c <_sbrk_r>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	d00a      	beq.n	800b9c0 <sbrk_aligned+0x34>
 800b9aa:	1cc4      	adds	r4, r0, #3
 800b9ac:	f024 0403 	bic.w	r4, r4, #3
 800b9b0:	42a0      	cmp	r0, r4
 800b9b2:	d007      	beq.n	800b9c4 <sbrk_aligned+0x38>
 800b9b4:	1a21      	subs	r1, r4, r0
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f000 f9d8 	bl	800bd6c <_sbrk_r>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	d101      	bne.n	800b9c4 <sbrk_aligned+0x38>
 800b9c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	200016fc 	.word	0x200016fc

0800b9cc <_malloc_r>:
 800b9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d0:	1ccd      	adds	r5, r1, #3
 800b9d2:	f025 0503 	bic.w	r5, r5, #3
 800b9d6:	3508      	adds	r5, #8
 800b9d8:	2d0c      	cmp	r5, #12
 800b9da:	bf38      	it	cc
 800b9dc:	250c      	movcc	r5, #12
 800b9de:	2d00      	cmp	r5, #0
 800b9e0:	4607      	mov	r7, r0
 800b9e2:	db01      	blt.n	800b9e8 <_malloc_r+0x1c>
 800b9e4:	42a9      	cmp	r1, r5
 800b9e6:	d905      	bls.n	800b9f4 <_malloc_r+0x28>
 800b9e8:	230c      	movs	r3, #12
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	603b      	str	r3, [r7, #0]
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f4:	4e2e      	ldr	r6, [pc, #184]	; (800bab0 <_malloc_r+0xe4>)
 800b9f6:	f000 fa25 	bl	800be44 <__malloc_lock>
 800b9fa:	6833      	ldr	r3, [r6, #0]
 800b9fc:	461c      	mov	r4, r3
 800b9fe:	bb34      	cbnz	r4, 800ba4e <_malloc_r+0x82>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4638      	mov	r0, r7
 800ba04:	f7ff ffc2 	bl	800b98c <sbrk_aligned>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	d14d      	bne.n	800baaa <_malloc_r+0xde>
 800ba0e:	6834      	ldr	r4, [r6, #0]
 800ba10:	4626      	mov	r6, r4
 800ba12:	2e00      	cmp	r6, #0
 800ba14:	d140      	bne.n	800ba98 <_malloc_r+0xcc>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	4631      	mov	r1, r6
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	eb04 0803 	add.w	r8, r4, r3
 800ba20:	f000 f9a4 	bl	800bd6c <_sbrk_r>
 800ba24:	4580      	cmp	r8, r0
 800ba26:	d13a      	bne.n	800ba9e <_malloc_r+0xd2>
 800ba28:	6821      	ldr	r1, [r4, #0]
 800ba2a:	3503      	adds	r5, #3
 800ba2c:	1a6d      	subs	r5, r5, r1
 800ba2e:	f025 0503 	bic.w	r5, r5, #3
 800ba32:	3508      	adds	r5, #8
 800ba34:	2d0c      	cmp	r5, #12
 800ba36:	bf38      	it	cc
 800ba38:	250c      	movcc	r5, #12
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	f7ff ffa5 	bl	800b98c <sbrk_aligned>
 800ba42:	3001      	adds	r0, #1
 800ba44:	d02b      	beq.n	800ba9e <_malloc_r+0xd2>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	442b      	add	r3, r5
 800ba4a:	6023      	str	r3, [r4, #0]
 800ba4c:	e00e      	b.n	800ba6c <_malloc_r+0xa0>
 800ba4e:	6822      	ldr	r2, [r4, #0]
 800ba50:	1b52      	subs	r2, r2, r5
 800ba52:	d41e      	bmi.n	800ba92 <_malloc_r+0xc6>
 800ba54:	2a0b      	cmp	r2, #11
 800ba56:	d916      	bls.n	800ba86 <_malloc_r+0xba>
 800ba58:	1961      	adds	r1, r4, r5
 800ba5a:	42a3      	cmp	r3, r4
 800ba5c:	6025      	str	r5, [r4, #0]
 800ba5e:	bf18      	it	ne
 800ba60:	6059      	strne	r1, [r3, #4]
 800ba62:	6863      	ldr	r3, [r4, #4]
 800ba64:	bf08      	it	eq
 800ba66:	6031      	streq	r1, [r6, #0]
 800ba68:	5162      	str	r2, [r4, r5]
 800ba6a:	604b      	str	r3, [r1, #4]
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f104 060b 	add.w	r6, r4, #11
 800ba72:	f000 f9ed 	bl	800be50 <__malloc_unlock>
 800ba76:	f026 0607 	bic.w	r6, r6, #7
 800ba7a:	1d23      	adds	r3, r4, #4
 800ba7c:	1af2      	subs	r2, r6, r3
 800ba7e:	d0b6      	beq.n	800b9ee <_malloc_r+0x22>
 800ba80:	1b9b      	subs	r3, r3, r6
 800ba82:	50a3      	str	r3, [r4, r2]
 800ba84:	e7b3      	b.n	800b9ee <_malloc_r+0x22>
 800ba86:	6862      	ldr	r2, [r4, #4]
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	bf0c      	ite	eq
 800ba8c:	6032      	streq	r2, [r6, #0]
 800ba8e:	605a      	strne	r2, [r3, #4]
 800ba90:	e7ec      	b.n	800ba6c <_malloc_r+0xa0>
 800ba92:	4623      	mov	r3, r4
 800ba94:	6864      	ldr	r4, [r4, #4]
 800ba96:	e7b2      	b.n	800b9fe <_malloc_r+0x32>
 800ba98:	4634      	mov	r4, r6
 800ba9a:	6876      	ldr	r6, [r6, #4]
 800ba9c:	e7b9      	b.n	800ba12 <_malloc_r+0x46>
 800ba9e:	230c      	movs	r3, #12
 800baa0:	4638      	mov	r0, r7
 800baa2:	603b      	str	r3, [r7, #0]
 800baa4:	f000 f9d4 	bl	800be50 <__malloc_unlock>
 800baa8:	e7a1      	b.n	800b9ee <_malloc_r+0x22>
 800baaa:	6025      	str	r5, [r4, #0]
 800baac:	e7de      	b.n	800ba6c <_malloc_r+0xa0>
 800baae:	bf00      	nop
 800bab0:	200016f8 	.word	0x200016f8

0800bab4 <__ssputs_r>:
 800bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	688e      	ldr	r6, [r1, #8]
 800baba:	4682      	mov	sl, r0
 800babc:	429e      	cmp	r6, r3
 800babe:	460c      	mov	r4, r1
 800bac0:	4690      	mov	r8, r2
 800bac2:	461f      	mov	r7, r3
 800bac4:	d838      	bhi.n	800bb38 <__ssputs_r+0x84>
 800bac6:	898a      	ldrh	r2, [r1, #12]
 800bac8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bacc:	d032      	beq.n	800bb34 <__ssputs_r+0x80>
 800bace:	6825      	ldr	r5, [r4, #0]
 800bad0:	6909      	ldr	r1, [r1, #16]
 800bad2:	3301      	adds	r3, #1
 800bad4:	eba5 0901 	sub.w	r9, r5, r1
 800bad8:	6965      	ldr	r5, [r4, #20]
 800bada:	444b      	add	r3, r9
 800badc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bae4:	106d      	asrs	r5, r5, #1
 800bae6:	429d      	cmp	r5, r3
 800bae8:	bf38      	it	cc
 800baea:	461d      	movcc	r5, r3
 800baec:	0553      	lsls	r3, r2, #21
 800baee:	d531      	bpl.n	800bb54 <__ssputs_r+0xa0>
 800baf0:	4629      	mov	r1, r5
 800baf2:	f7ff ff6b 	bl	800b9cc <_malloc_r>
 800baf6:	4606      	mov	r6, r0
 800baf8:	b950      	cbnz	r0, 800bb10 <__ssputs_r+0x5c>
 800bafa:	230c      	movs	r3, #12
 800bafc:	f04f 30ff 	mov.w	r0, #4294967295
 800bb00:	f8ca 3000 	str.w	r3, [sl]
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb10:	464a      	mov	r2, r9
 800bb12:	6921      	ldr	r1, [r4, #16]
 800bb14:	f7fe f81a 	bl	8009b4c <memcpy>
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb22:	81a3      	strh	r3, [r4, #12]
 800bb24:	6126      	str	r6, [r4, #16]
 800bb26:	444e      	add	r6, r9
 800bb28:	6026      	str	r6, [r4, #0]
 800bb2a:	463e      	mov	r6, r7
 800bb2c:	6165      	str	r5, [r4, #20]
 800bb2e:	eba5 0509 	sub.w	r5, r5, r9
 800bb32:	60a5      	str	r5, [r4, #8]
 800bb34:	42be      	cmp	r6, r7
 800bb36:	d900      	bls.n	800bb3a <__ssputs_r+0x86>
 800bb38:	463e      	mov	r6, r7
 800bb3a:	4632      	mov	r2, r6
 800bb3c:	4641      	mov	r1, r8
 800bb3e:	6820      	ldr	r0, [r4, #0]
 800bb40:	f000 f966 	bl	800be10 <memmove>
 800bb44:	68a3      	ldr	r3, [r4, #8]
 800bb46:	2000      	movs	r0, #0
 800bb48:	1b9b      	subs	r3, r3, r6
 800bb4a:	60a3      	str	r3, [r4, #8]
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	4433      	add	r3, r6
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	e7db      	b.n	800bb0c <__ssputs_r+0x58>
 800bb54:	462a      	mov	r2, r5
 800bb56:	f000 f981 	bl	800be5c <_realloc_r>
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d1e1      	bne.n	800bb24 <__ssputs_r+0x70>
 800bb60:	4650      	mov	r0, sl
 800bb62:	6921      	ldr	r1, [r4, #16]
 800bb64:	f7ff feca 	bl	800b8fc <_free_r>
 800bb68:	e7c7      	b.n	800bafa <__ssputs_r+0x46>
	...

0800bb6c <_svfiprintf_r>:
 800bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb70:	4698      	mov	r8, r3
 800bb72:	898b      	ldrh	r3, [r1, #12]
 800bb74:	4607      	mov	r7, r0
 800bb76:	061b      	lsls	r3, r3, #24
 800bb78:	460d      	mov	r5, r1
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	b09d      	sub	sp, #116	; 0x74
 800bb7e:	d50e      	bpl.n	800bb9e <_svfiprintf_r+0x32>
 800bb80:	690b      	ldr	r3, [r1, #16]
 800bb82:	b963      	cbnz	r3, 800bb9e <_svfiprintf_r+0x32>
 800bb84:	2140      	movs	r1, #64	; 0x40
 800bb86:	f7ff ff21 	bl	800b9cc <_malloc_r>
 800bb8a:	6028      	str	r0, [r5, #0]
 800bb8c:	6128      	str	r0, [r5, #16]
 800bb8e:	b920      	cbnz	r0, 800bb9a <_svfiprintf_r+0x2e>
 800bb90:	230c      	movs	r3, #12
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	f04f 30ff 	mov.w	r0, #4294967295
 800bb98:	e0d1      	b.n	800bd3e <_svfiprintf_r+0x1d2>
 800bb9a:	2340      	movs	r3, #64	; 0x40
 800bb9c:	616b      	str	r3, [r5, #20]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9309      	str	r3, [sp, #36]	; 0x24
 800bba2:	2320      	movs	r3, #32
 800bba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bba8:	2330      	movs	r3, #48	; 0x30
 800bbaa:	f04f 0901 	mov.w	r9, #1
 800bbae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd58 <_svfiprintf_r+0x1ec>
 800bbb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbba:	4623      	mov	r3, r4
 800bbbc:	469a      	mov	sl, r3
 800bbbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbc2:	b10a      	cbz	r2, 800bbc8 <_svfiprintf_r+0x5c>
 800bbc4:	2a25      	cmp	r2, #37	; 0x25
 800bbc6:	d1f9      	bne.n	800bbbc <_svfiprintf_r+0x50>
 800bbc8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbcc:	d00b      	beq.n	800bbe6 <_svfiprintf_r+0x7a>
 800bbce:	465b      	mov	r3, fp
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff ff6d 	bl	800bab4 <__ssputs_r>
 800bbda:	3001      	adds	r0, #1
 800bbdc:	f000 80aa 	beq.w	800bd34 <_svfiprintf_r+0x1c8>
 800bbe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbe2:	445a      	add	r2, fp
 800bbe4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80a2 	beq.w	800bd34 <_svfiprintf_r+0x1c8>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbfa:	f10a 0a01 	add.w	sl, sl, #1
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	9307      	str	r3, [sp, #28]
 800bc02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc06:	931a      	str	r3, [sp, #104]	; 0x68
 800bc08:	4654      	mov	r4, sl
 800bc0a:	2205      	movs	r2, #5
 800bc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc10:	4851      	ldr	r0, [pc, #324]	; (800bd58 <_svfiprintf_r+0x1ec>)
 800bc12:	f7ff facf 	bl	800b1b4 <memchr>
 800bc16:	9a04      	ldr	r2, [sp, #16]
 800bc18:	b9d8      	cbnz	r0, 800bc52 <_svfiprintf_r+0xe6>
 800bc1a:	06d0      	lsls	r0, r2, #27
 800bc1c:	bf44      	itt	mi
 800bc1e:	2320      	movmi	r3, #32
 800bc20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc24:	0711      	lsls	r1, r2, #28
 800bc26:	bf44      	itt	mi
 800bc28:	232b      	movmi	r3, #43	; 0x2b
 800bc2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc2e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc32:	2b2a      	cmp	r3, #42	; 0x2a
 800bc34:	d015      	beq.n	800bc62 <_svfiprintf_r+0xf6>
 800bc36:	4654      	mov	r4, sl
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f04f 0c0a 	mov.w	ip, #10
 800bc3e:	9a07      	ldr	r2, [sp, #28]
 800bc40:	4621      	mov	r1, r4
 800bc42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc46:	3b30      	subs	r3, #48	; 0x30
 800bc48:	2b09      	cmp	r3, #9
 800bc4a:	d94e      	bls.n	800bcea <_svfiprintf_r+0x17e>
 800bc4c:	b1b0      	cbz	r0, 800bc7c <_svfiprintf_r+0x110>
 800bc4e:	9207      	str	r2, [sp, #28]
 800bc50:	e014      	b.n	800bc7c <_svfiprintf_r+0x110>
 800bc52:	eba0 0308 	sub.w	r3, r0, r8
 800bc56:	fa09 f303 	lsl.w	r3, r9, r3
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	46a2      	mov	sl, r4
 800bc5e:	9304      	str	r3, [sp, #16]
 800bc60:	e7d2      	b.n	800bc08 <_svfiprintf_r+0x9c>
 800bc62:	9b03      	ldr	r3, [sp, #12]
 800bc64:	1d19      	adds	r1, r3, #4
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	9103      	str	r1, [sp, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	bfbb      	ittet	lt
 800bc6e:	425b      	neglt	r3, r3
 800bc70:	f042 0202 	orrlt.w	r2, r2, #2
 800bc74:	9307      	strge	r3, [sp, #28]
 800bc76:	9307      	strlt	r3, [sp, #28]
 800bc78:	bfb8      	it	lt
 800bc7a:	9204      	strlt	r2, [sp, #16]
 800bc7c:	7823      	ldrb	r3, [r4, #0]
 800bc7e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc80:	d10c      	bne.n	800bc9c <_svfiprintf_r+0x130>
 800bc82:	7863      	ldrb	r3, [r4, #1]
 800bc84:	2b2a      	cmp	r3, #42	; 0x2a
 800bc86:	d135      	bne.n	800bcf4 <_svfiprintf_r+0x188>
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	3402      	adds	r4, #2
 800bc8c:	1d1a      	adds	r2, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	9203      	str	r2, [sp, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfb8      	it	lt
 800bc96:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc9a:	9305      	str	r3, [sp, #20]
 800bc9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bd5c <_svfiprintf_r+0x1f0>
 800bca0:	2203      	movs	r2, #3
 800bca2:	4650      	mov	r0, sl
 800bca4:	7821      	ldrb	r1, [r4, #0]
 800bca6:	f7ff fa85 	bl	800b1b4 <memchr>
 800bcaa:	b140      	cbz	r0, 800bcbe <_svfiprintf_r+0x152>
 800bcac:	2340      	movs	r3, #64	; 0x40
 800bcae:	eba0 000a 	sub.w	r0, r0, sl
 800bcb2:	fa03 f000 	lsl.w	r0, r3, r0
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	3401      	adds	r4, #1
 800bcba:	4303      	orrs	r3, r0
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc2:	2206      	movs	r2, #6
 800bcc4:	4826      	ldr	r0, [pc, #152]	; (800bd60 <_svfiprintf_r+0x1f4>)
 800bcc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcca:	f7ff fa73 	bl	800b1b4 <memchr>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d038      	beq.n	800bd44 <_svfiprintf_r+0x1d8>
 800bcd2:	4b24      	ldr	r3, [pc, #144]	; (800bd64 <_svfiprintf_r+0x1f8>)
 800bcd4:	bb1b      	cbnz	r3, 800bd1e <_svfiprintf_r+0x1b2>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	3307      	adds	r3, #7
 800bcda:	f023 0307 	bic.w	r3, r3, #7
 800bcde:	3308      	adds	r3, #8
 800bce0:	9303      	str	r3, [sp, #12]
 800bce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce4:	4433      	add	r3, r6
 800bce6:	9309      	str	r3, [sp, #36]	; 0x24
 800bce8:	e767      	b.n	800bbba <_svfiprintf_r+0x4e>
 800bcea:	460c      	mov	r4, r1
 800bcec:	2001      	movs	r0, #1
 800bcee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcf2:	e7a5      	b.n	800bc40 <_svfiprintf_r+0xd4>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f04f 0c0a 	mov.w	ip, #10
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	3401      	adds	r4, #1
 800bcfe:	9305      	str	r3, [sp, #20]
 800bd00:	4620      	mov	r0, r4
 800bd02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd06:	3a30      	subs	r2, #48	; 0x30
 800bd08:	2a09      	cmp	r2, #9
 800bd0a:	d903      	bls.n	800bd14 <_svfiprintf_r+0x1a8>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0c5      	beq.n	800bc9c <_svfiprintf_r+0x130>
 800bd10:	9105      	str	r1, [sp, #20]
 800bd12:	e7c3      	b.n	800bc9c <_svfiprintf_r+0x130>
 800bd14:	4604      	mov	r4, r0
 800bd16:	2301      	movs	r3, #1
 800bd18:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd1c:	e7f0      	b.n	800bd00 <_svfiprintf_r+0x194>
 800bd1e:	ab03      	add	r3, sp, #12
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4638      	mov	r0, r7
 800bd26:	4b10      	ldr	r3, [pc, #64]	; (800bd68 <_svfiprintf_r+0x1fc>)
 800bd28:	a904      	add	r1, sp, #16
 800bd2a:	f7fd ffc3 	bl	8009cb4 <_printf_float>
 800bd2e:	1c42      	adds	r2, r0, #1
 800bd30:	4606      	mov	r6, r0
 800bd32:	d1d6      	bne.n	800bce2 <_svfiprintf_r+0x176>
 800bd34:	89ab      	ldrh	r3, [r5, #12]
 800bd36:	065b      	lsls	r3, r3, #25
 800bd38:	f53f af2c 	bmi.w	800bb94 <_svfiprintf_r+0x28>
 800bd3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd3e:	b01d      	add	sp, #116	; 0x74
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	ab03      	add	r3, sp, #12
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <_svfiprintf_r+0x1fc>)
 800bd4e:	a904      	add	r1, sp, #16
 800bd50:	f7fe fa4c 	bl	800a1ec <_printf_i>
 800bd54:	e7eb      	b.n	800bd2e <_svfiprintf_r+0x1c2>
 800bd56:	bf00      	nop
 800bd58:	0800cc74 	.word	0x0800cc74
 800bd5c:	0800cc7a 	.word	0x0800cc7a
 800bd60:	0800cc7e 	.word	0x0800cc7e
 800bd64:	08009cb5 	.word	0x08009cb5
 800bd68:	0800bab5 	.word	0x0800bab5

0800bd6c <_sbrk_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	2300      	movs	r3, #0
 800bd70:	4d05      	ldr	r5, [pc, #20]	; (800bd88 <_sbrk_r+0x1c>)
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	f7f5 fcd2 	bl	8001720 <_sbrk>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_sbrk_r+0x1a>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_sbrk_r+0x1a>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	20001700 	.word	0x20001700

0800bd8c <__assert_func>:
 800bd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd8e:	4614      	mov	r4, r2
 800bd90:	461a      	mov	r2, r3
 800bd92:	4b09      	ldr	r3, [pc, #36]	; (800bdb8 <__assert_func+0x2c>)
 800bd94:	4605      	mov	r5, r0
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68d8      	ldr	r0, [r3, #12]
 800bd9a:	b14c      	cbz	r4, 800bdb0 <__assert_func+0x24>
 800bd9c:	4b07      	ldr	r3, [pc, #28]	; (800bdbc <__assert_func+0x30>)
 800bd9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bda2:	9100      	str	r1, [sp, #0]
 800bda4:	462b      	mov	r3, r5
 800bda6:	4906      	ldr	r1, [pc, #24]	; (800bdc0 <__assert_func+0x34>)
 800bda8:	f000 f80e 	bl	800bdc8 <fiprintf>
 800bdac:	f000 faaa 	bl	800c304 <abort>
 800bdb0:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <__assert_func+0x38>)
 800bdb2:	461c      	mov	r4, r3
 800bdb4:	e7f3      	b.n	800bd9e <__assert_func+0x12>
 800bdb6:	bf00      	nop
 800bdb8:	2000017c 	.word	0x2000017c
 800bdbc:	0800cc85 	.word	0x0800cc85
 800bdc0:	0800cc92 	.word	0x0800cc92
 800bdc4:	0800ccc0 	.word	0x0800ccc0

0800bdc8 <fiprintf>:
 800bdc8:	b40e      	push	{r1, r2, r3}
 800bdca:	b503      	push	{r0, r1, lr}
 800bdcc:	4601      	mov	r1, r0
 800bdce:	ab03      	add	r3, sp, #12
 800bdd0:	4805      	ldr	r0, [pc, #20]	; (800bde8 <fiprintf+0x20>)
 800bdd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdd6:	6800      	ldr	r0, [r0, #0]
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	f000 f895 	bl	800bf08 <_vfiprintf_r>
 800bdde:	b002      	add	sp, #8
 800bde0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bde4:	b003      	add	sp, #12
 800bde6:	4770      	bx	lr
 800bde8:	2000017c 	.word	0x2000017c

0800bdec <__ascii_mbtowc>:
 800bdec:	b082      	sub	sp, #8
 800bdee:	b901      	cbnz	r1, 800bdf2 <__ascii_mbtowc+0x6>
 800bdf0:	a901      	add	r1, sp, #4
 800bdf2:	b142      	cbz	r2, 800be06 <__ascii_mbtowc+0x1a>
 800bdf4:	b14b      	cbz	r3, 800be0a <__ascii_mbtowc+0x1e>
 800bdf6:	7813      	ldrb	r3, [r2, #0]
 800bdf8:	600b      	str	r3, [r1, #0]
 800bdfa:	7812      	ldrb	r2, [r2, #0]
 800bdfc:	1e10      	subs	r0, r2, #0
 800bdfe:	bf18      	it	ne
 800be00:	2001      	movne	r0, #1
 800be02:	b002      	add	sp, #8
 800be04:	4770      	bx	lr
 800be06:	4610      	mov	r0, r2
 800be08:	e7fb      	b.n	800be02 <__ascii_mbtowc+0x16>
 800be0a:	f06f 0001 	mvn.w	r0, #1
 800be0e:	e7f8      	b.n	800be02 <__ascii_mbtowc+0x16>

0800be10 <memmove>:
 800be10:	4288      	cmp	r0, r1
 800be12:	b510      	push	{r4, lr}
 800be14:	eb01 0402 	add.w	r4, r1, r2
 800be18:	d902      	bls.n	800be20 <memmove+0x10>
 800be1a:	4284      	cmp	r4, r0
 800be1c:	4623      	mov	r3, r4
 800be1e:	d807      	bhi.n	800be30 <memmove+0x20>
 800be20:	1e43      	subs	r3, r0, #1
 800be22:	42a1      	cmp	r1, r4
 800be24:	d008      	beq.n	800be38 <memmove+0x28>
 800be26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be2e:	e7f8      	b.n	800be22 <memmove+0x12>
 800be30:	4601      	mov	r1, r0
 800be32:	4402      	add	r2, r0
 800be34:	428a      	cmp	r2, r1
 800be36:	d100      	bne.n	800be3a <memmove+0x2a>
 800be38:	bd10      	pop	{r4, pc}
 800be3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be42:	e7f7      	b.n	800be34 <memmove+0x24>

0800be44 <__malloc_lock>:
 800be44:	4801      	ldr	r0, [pc, #4]	; (800be4c <__malloc_lock+0x8>)
 800be46:	f000 bc19 	b.w	800c67c <__retarget_lock_acquire_recursive>
 800be4a:	bf00      	nop
 800be4c:	20001704 	.word	0x20001704

0800be50 <__malloc_unlock>:
 800be50:	4801      	ldr	r0, [pc, #4]	; (800be58 <__malloc_unlock+0x8>)
 800be52:	f000 bc14 	b.w	800c67e <__retarget_lock_release_recursive>
 800be56:	bf00      	nop
 800be58:	20001704 	.word	0x20001704

0800be5c <_realloc_r>:
 800be5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be60:	4680      	mov	r8, r0
 800be62:	4614      	mov	r4, r2
 800be64:	460e      	mov	r6, r1
 800be66:	b921      	cbnz	r1, 800be72 <_realloc_r+0x16>
 800be68:	4611      	mov	r1, r2
 800be6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be6e:	f7ff bdad 	b.w	800b9cc <_malloc_r>
 800be72:	b92a      	cbnz	r2, 800be80 <_realloc_r+0x24>
 800be74:	f7ff fd42 	bl	800b8fc <_free_r>
 800be78:	4625      	mov	r5, r4
 800be7a:	4628      	mov	r0, r5
 800be7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be80:	f000 fc64 	bl	800c74c <_malloc_usable_size_r>
 800be84:	4284      	cmp	r4, r0
 800be86:	4607      	mov	r7, r0
 800be88:	d802      	bhi.n	800be90 <_realloc_r+0x34>
 800be8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be8e:	d812      	bhi.n	800beb6 <_realloc_r+0x5a>
 800be90:	4621      	mov	r1, r4
 800be92:	4640      	mov	r0, r8
 800be94:	f7ff fd9a 	bl	800b9cc <_malloc_r>
 800be98:	4605      	mov	r5, r0
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d0ed      	beq.n	800be7a <_realloc_r+0x1e>
 800be9e:	42bc      	cmp	r4, r7
 800bea0:	4622      	mov	r2, r4
 800bea2:	4631      	mov	r1, r6
 800bea4:	bf28      	it	cs
 800bea6:	463a      	movcs	r2, r7
 800bea8:	f7fd fe50 	bl	8009b4c <memcpy>
 800beac:	4631      	mov	r1, r6
 800beae:	4640      	mov	r0, r8
 800beb0:	f7ff fd24 	bl	800b8fc <_free_r>
 800beb4:	e7e1      	b.n	800be7a <_realloc_r+0x1e>
 800beb6:	4635      	mov	r5, r6
 800beb8:	e7df      	b.n	800be7a <_realloc_r+0x1e>

0800beba <__sfputc_r>:
 800beba:	6893      	ldr	r3, [r2, #8]
 800bebc:	b410      	push	{r4}
 800bebe:	3b01      	subs	r3, #1
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	6093      	str	r3, [r2, #8]
 800bec4:	da07      	bge.n	800bed6 <__sfputc_r+0x1c>
 800bec6:	6994      	ldr	r4, [r2, #24]
 800bec8:	42a3      	cmp	r3, r4
 800beca:	db01      	blt.n	800bed0 <__sfputc_r+0x16>
 800becc:	290a      	cmp	r1, #10
 800bece:	d102      	bne.n	800bed6 <__sfputc_r+0x1c>
 800bed0:	bc10      	pop	{r4}
 800bed2:	f000 b949 	b.w	800c168 <__swbuf_r>
 800bed6:	6813      	ldr	r3, [r2, #0]
 800bed8:	1c58      	adds	r0, r3, #1
 800beda:	6010      	str	r0, [r2, #0]
 800bedc:	7019      	strb	r1, [r3, #0]
 800bede:	4608      	mov	r0, r1
 800bee0:	bc10      	pop	{r4}
 800bee2:	4770      	bx	lr

0800bee4 <__sfputs_r>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	4606      	mov	r6, r0
 800bee8:	460f      	mov	r7, r1
 800beea:	4614      	mov	r4, r2
 800beec:	18d5      	adds	r5, r2, r3
 800beee:	42ac      	cmp	r4, r5
 800bef0:	d101      	bne.n	800bef6 <__sfputs_r+0x12>
 800bef2:	2000      	movs	r0, #0
 800bef4:	e007      	b.n	800bf06 <__sfputs_r+0x22>
 800bef6:	463a      	mov	r2, r7
 800bef8:	4630      	mov	r0, r6
 800befa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befe:	f7ff ffdc 	bl	800beba <__sfputc_r>
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	d1f3      	bne.n	800beee <__sfputs_r+0xa>
 800bf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf08 <_vfiprintf_r>:
 800bf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0c:	460d      	mov	r5, r1
 800bf0e:	4614      	mov	r4, r2
 800bf10:	4698      	mov	r8, r3
 800bf12:	4606      	mov	r6, r0
 800bf14:	b09d      	sub	sp, #116	; 0x74
 800bf16:	b118      	cbz	r0, 800bf20 <_vfiprintf_r+0x18>
 800bf18:	6983      	ldr	r3, [r0, #24]
 800bf1a:	b90b      	cbnz	r3, 800bf20 <_vfiprintf_r+0x18>
 800bf1c:	f000 fb10 	bl	800c540 <__sinit>
 800bf20:	4b89      	ldr	r3, [pc, #548]	; (800c148 <_vfiprintf_r+0x240>)
 800bf22:	429d      	cmp	r5, r3
 800bf24:	d11b      	bne.n	800bf5e <_vfiprintf_r+0x56>
 800bf26:	6875      	ldr	r5, [r6, #4]
 800bf28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf2a:	07d9      	lsls	r1, r3, #31
 800bf2c:	d405      	bmi.n	800bf3a <_vfiprintf_r+0x32>
 800bf2e:	89ab      	ldrh	r3, [r5, #12]
 800bf30:	059a      	lsls	r2, r3, #22
 800bf32:	d402      	bmi.n	800bf3a <_vfiprintf_r+0x32>
 800bf34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf36:	f000 fba1 	bl	800c67c <__retarget_lock_acquire_recursive>
 800bf3a:	89ab      	ldrh	r3, [r5, #12]
 800bf3c:	071b      	lsls	r3, r3, #28
 800bf3e:	d501      	bpl.n	800bf44 <_vfiprintf_r+0x3c>
 800bf40:	692b      	ldr	r3, [r5, #16]
 800bf42:	b9eb      	cbnz	r3, 800bf80 <_vfiprintf_r+0x78>
 800bf44:	4629      	mov	r1, r5
 800bf46:	4630      	mov	r0, r6
 800bf48:	f000 f96e 	bl	800c228 <__swsetup_r>
 800bf4c:	b1c0      	cbz	r0, 800bf80 <_vfiprintf_r+0x78>
 800bf4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf50:	07dc      	lsls	r4, r3, #31
 800bf52:	d50e      	bpl.n	800bf72 <_vfiprintf_r+0x6a>
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295
 800bf58:	b01d      	add	sp, #116	; 0x74
 800bf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5e:	4b7b      	ldr	r3, [pc, #492]	; (800c14c <_vfiprintf_r+0x244>)
 800bf60:	429d      	cmp	r5, r3
 800bf62:	d101      	bne.n	800bf68 <_vfiprintf_r+0x60>
 800bf64:	68b5      	ldr	r5, [r6, #8]
 800bf66:	e7df      	b.n	800bf28 <_vfiprintf_r+0x20>
 800bf68:	4b79      	ldr	r3, [pc, #484]	; (800c150 <_vfiprintf_r+0x248>)
 800bf6a:	429d      	cmp	r5, r3
 800bf6c:	bf08      	it	eq
 800bf6e:	68f5      	ldreq	r5, [r6, #12]
 800bf70:	e7da      	b.n	800bf28 <_vfiprintf_r+0x20>
 800bf72:	89ab      	ldrh	r3, [r5, #12]
 800bf74:	0598      	lsls	r0, r3, #22
 800bf76:	d4ed      	bmi.n	800bf54 <_vfiprintf_r+0x4c>
 800bf78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf7a:	f000 fb80 	bl	800c67e <__retarget_lock_release_recursive>
 800bf7e:	e7e9      	b.n	800bf54 <_vfiprintf_r+0x4c>
 800bf80:	2300      	movs	r3, #0
 800bf82:	9309      	str	r3, [sp, #36]	; 0x24
 800bf84:	2320      	movs	r3, #32
 800bf86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf8a:	2330      	movs	r3, #48	; 0x30
 800bf8c:	f04f 0901 	mov.w	r9, #1
 800bf90:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c154 <_vfiprintf_r+0x24c>
 800bf98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf9c:	4623      	mov	r3, r4
 800bf9e:	469a      	mov	sl, r3
 800bfa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfa4:	b10a      	cbz	r2, 800bfaa <_vfiprintf_r+0xa2>
 800bfa6:	2a25      	cmp	r2, #37	; 0x25
 800bfa8:	d1f9      	bne.n	800bf9e <_vfiprintf_r+0x96>
 800bfaa:	ebba 0b04 	subs.w	fp, sl, r4
 800bfae:	d00b      	beq.n	800bfc8 <_vfiprintf_r+0xc0>
 800bfb0:	465b      	mov	r3, fp
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	f7ff ff94 	bl	800bee4 <__sfputs_r>
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	f000 80aa 	beq.w	800c116 <_vfiprintf_r+0x20e>
 800bfc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfc4:	445a      	add	r2, fp
 800bfc6:	9209      	str	r2, [sp, #36]	; 0x24
 800bfc8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 80a2 	beq.w	800c116 <_vfiprintf_r+0x20e>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfdc:	f10a 0a01 	add.w	sl, sl, #1
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	9307      	str	r3, [sp, #28]
 800bfe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfe8:	931a      	str	r3, [sp, #104]	; 0x68
 800bfea:	4654      	mov	r4, sl
 800bfec:	2205      	movs	r2, #5
 800bfee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff2:	4858      	ldr	r0, [pc, #352]	; (800c154 <_vfiprintf_r+0x24c>)
 800bff4:	f7ff f8de 	bl	800b1b4 <memchr>
 800bff8:	9a04      	ldr	r2, [sp, #16]
 800bffa:	b9d8      	cbnz	r0, 800c034 <_vfiprintf_r+0x12c>
 800bffc:	06d1      	lsls	r1, r2, #27
 800bffe:	bf44      	itt	mi
 800c000:	2320      	movmi	r3, #32
 800c002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c006:	0713      	lsls	r3, r2, #28
 800c008:	bf44      	itt	mi
 800c00a:	232b      	movmi	r3, #43	; 0x2b
 800c00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c010:	f89a 3000 	ldrb.w	r3, [sl]
 800c014:	2b2a      	cmp	r3, #42	; 0x2a
 800c016:	d015      	beq.n	800c044 <_vfiprintf_r+0x13c>
 800c018:	4654      	mov	r4, sl
 800c01a:	2000      	movs	r0, #0
 800c01c:	f04f 0c0a 	mov.w	ip, #10
 800c020:	9a07      	ldr	r2, [sp, #28]
 800c022:	4621      	mov	r1, r4
 800c024:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c028:	3b30      	subs	r3, #48	; 0x30
 800c02a:	2b09      	cmp	r3, #9
 800c02c:	d94e      	bls.n	800c0cc <_vfiprintf_r+0x1c4>
 800c02e:	b1b0      	cbz	r0, 800c05e <_vfiprintf_r+0x156>
 800c030:	9207      	str	r2, [sp, #28]
 800c032:	e014      	b.n	800c05e <_vfiprintf_r+0x156>
 800c034:	eba0 0308 	sub.w	r3, r0, r8
 800c038:	fa09 f303 	lsl.w	r3, r9, r3
 800c03c:	4313      	orrs	r3, r2
 800c03e:	46a2      	mov	sl, r4
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	e7d2      	b.n	800bfea <_vfiprintf_r+0xe2>
 800c044:	9b03      	ldr	r3, [sp, #12]
 800c046:	1d19      	adds	r1, r3, #4
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	9103      	str	r1, [sp, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	bfbb      	ittet	lt
 800c050:	425b      	neglt	r3, r3
 800c052:	f042 0202 	orrlt.w	r2, r2, #2
 800c056:	9307      	strge	r3, [sp, #28]
 800c058:	9307      	strlt	r3, [sp, #28]
 800c05a:	bfb8      	it	lt
 800c05c:	9204      	strlt	r2, [sp, #16]
 800c05e:	7823      	ldrb	r3, [r4, #0]
 800c060:	2b2e      	cmp	r3, #46	; 0x2e
 800c062:	d10c      	bne.n	800c07e <_vfiprintf_r+0x176>
 800c064:	7863      	ldrb	r3, [r4, #1]
 800c066:	2b2a      	cmp	r3, #42	; 0x2a
 800c068:	d135      	bne.n	800c0d6 <_vfiprintf_r+0x1ce>
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	3402      	adds	r4, #2
 800c06e:	1d1a      	adds	r2, r3, #4
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	9203      	str	r2, [sp, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	bfb8      	it	lt
 800c078:	f04f 33ff 	movlt.w	r3, #4294967295
 800c07c:	9305      	str	r3, [sp, #20]
 800c07e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c158 <_vfiprintf_r+0x250>
 800c082:	2203      	movs	r2, #3
 800c084:	4650      	mov	r0, sl
 800c086:	7821      	ldrb	r1, [r4, #0]
 800c088:	f7ff f894 	bl	800b1b4 <memchr>
 800c08c:	b140      	cbz	r0, 800c0a0 <_vfiprintf_r+0x198>
 800c08e:	2340      	movs	r3, #64	; 0x40
 800c090:	eba0 000a 	sub.w	r0, r0, sl
 800c094:	fa03 f000 	lsl.w	r0, r3, r0
 800c098:	9b04      	ldr	r3, [sp, #16]
 800c09a:	3401      	adds	r4, #1
 800c09c:	4303      	orrs	r3, r0
 800c09e:	9304      	str	r3, [sp, #16]
 800c0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a4:	2206      	movs	r2, #6
 800c0a6:	482d      	ldr	r0, [pc, #180]	; (800c15c <_vfiprintf_r+0x254>)
 800c0a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ac:	f7ff f882 	bl	800b1b4 <memchr>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d03f      	beq.n	800c134 <_vfiprintf_r+0x22c>
 800c0b4:	4b2a      	ldr	r3, [pc, #168]	; (800c160 <_vfiprintf_r+0x258>)
 800c0b6:	bb1b      	cbnz	r3, 800c100 <_vfiprintf_r+0x1f8>
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	3307      	adds	r3, #7
 800c0bc:	f023 0307 	bic.w	r3, r3, #7
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	9303      	str	r3, [sp, #12]
 800c0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c6:	443b      	add	r3, r7
 800c0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ca:	e767      	b.n	800bf9c <_vfiprintf_r+0x94>
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0d4:	e7a5      	b.n	800c022 <_vfiprintf_r+0x11a>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f04f 0c0a 	mov.w	ip, #10
 800c0dc:	4619      	mov	r1, r3
 800c0de:	3401      	adds	r4, #1
 800c0e0:	9305      	str	r3, [sp, #20]
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0e8:	3a30      	subs	r2, #48	; 0x30
 800c0ea:	2a09      	cmp	r2, #9
 800c0ec:	d903      	bls.n	800c0f6 <_vfiprintf_r+0x1ee>
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0c5      	beq.n	800c07e <_vfiprintf_r+0x176>
 800c0f2:	9105      	str	r1, [sp, #20]
 800c0f4:	e7c3      	b.n	800c07e <_vfiprintf_r+0x176>
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0fe:	e7f0      	b.n	800c0e2 <_vfiprintf_r+0x1da>
 800c100:	ab03      	add	r3, sp, #12
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	462a      	mov	r2, r5
 800c106:	4630      	mov	r0, r6
 800c108:	4b16      	ldr	r3, [pc, #88]	; (800c164 <_vfiprintf_r+0x25c>)
 800c10a:	a904      	add	r1, sp, #16
 800c10c:	f7fd fdd2 	bl	8009cb4 <_printf_float>
 800c110:	4607      	mov	r7, r0
 800c112:	1c78      	adds	r0, r7, #1
 800c114:	d1d6      	bne.n	800c0c4 <_vfiprintf_r+0x1bc>
 800c116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c118:	07d9      	lsls	r1, r3, #31
 800c11a:	d405      	bmi.n	800c128 <_vfiprintf_r+0x220>
 800c11c:	89ab      	ldrh	r3, [r5, #12]
 800c11e:	059a      	lsls	r2, r3, #22
 800c120:	d402      	bmi.n	800c128 <_vfiprintf_r+0x220>
 800c122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c124:	f000 faab 	bl	800c67e <__retarget_lock_release_recursive>
 800c128:	89ab      	ldrh	r3, [r5, #12]
 800c12a:	065b      	lsls	r3, r3, #25
 800c12c:	f53f af12 	bmi.w	800bf54 <_vfiprintf_r+0x4c>
 800c130:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c132:	e711      	b.n	800bf58 <_vfiprintf_r+0x50>
 800c134:	ab03      	add	r3, sp, #12
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	462a      	mov	r2, r5
 800c13a:	4630      	mov	r0, r6
 800c13c:	4b09      	ldr	r3, [pc, #36]	; (800c164 <_vfiprintf_r+0x25c>)
 800c13e:	a904      	add	r1, sp, #16
 800c140:	f7fe f854 	bl	800a1ec <_printf_i>
 800c144:	e7e4      	b.n	800c110 <_vfiprintf_r+0x208>
 800c146:	bf00      	nop
 800c148:	0800cdec 	.word	0x0800cdec
 800c14c:	0800ce0c 	.word	0x0800ce0c
 800c150:	0800cdcc 	.word	0x0800cdcc
 800c154:	0800cc74 	.word	0x0800cc74
 800c158:	0800cc7a 	.word	0x0800cc7a
 800c15c:	0800cc7e 	.word	0x0800cc7e
 800c160:	08009cb5 	.word	0x08009cb5
 800c164:	0800bee5 	.word	0x0800bee5

0800c168 <__swbuf_r>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	460e      	mov	r6, r1
 800c16c:	4614      	mov	r4, r2
 800c16e:	4605      	mov	r5, r0
 800c170:	b118      	cbz	r0, 800c17a <__swbuf_r+0x12>
 800c172:	6983      	ldr	r3, [r0, #24]
 800c174:	b90b      	cbnz	r3, 800c17a <__swbuf_r+0x12>
 800c176:	f000 f9e3 	bl	800c540 <__sinit>
 800c17a:	4b21      	ldr	r3, [pc, #132]	; (800c200 <__swbuf_r+0x98>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	d12b      	bne.n	800c1d8 <__swbuf_r+0x70>
 800c180:	686c      	ldr	r4, [r5, #4]
 800c182:	69a3      	ldr	r3, [r4, #24]
 800c184:	60a3      	str	r3, [r4, #8]
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	071a      	lsls	r2, r3, #28
 800c18a:	d52f      	bpl.n	800c1ec <__swbuf_r+0x84>
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	b36b      	cbz	r3, 800c1ec <__swbuf_r+0x84>
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	6820      	ldr	r0, [r4, #0]
 800c194:	b2f6      	uxtb	r6, r6
 800c196:	1ac0      	subs	r0, r0, r3
 800c198:	6963      	ldr	r3, [r4, #20]
 800c19a:	4637      	mov	r7, r6
 800c19c:	4283      	cmp	r3, r0
 800c19e:	dc04      	bgt.n	800c1aa <__swbuf_r+0x42>
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f000 f938 	bl	800c418 <_fflush_r>
 800c1a8:	bb30      	cbnz	r0, 800c1f8 <__swbuf_r+0x90>
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	60a3      	str	r3, [r4, #8]
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	6022      	str	r2, [r4, #0]
 800c1b8:	701e      	strb	r6, [r3, #0]
 800c1ba:	6963      	ldr	r3, [r4, #20]
 800c1bc:	4283      	cmp	r3, r0
 800c1be:	d004      	beq.n	800c1ca <__swbuf_r+0x62>
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	d506      	bpl.n	800c1d4 <__swbuf_r+0x6c>
 800c1c6:	2e0a      	cmp	r6, #10
 800c1c8:	d104      	bne.n	800c1d4 <__swbuf_r+0x6c>
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f000 f923 	bl	800c418 <_fflush_r>
 800c1d2:	b988      	cbnz	r0, 800c1f8 <__swbuf_r+0x90>
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d8:	4b0a      	ldr	r3, [pc, #40]	; (800c204 <__swbuf_r+0x9c>)
 800c1da:	429c      	cmp	r4, r3
 800c1dc:	d101      	bne.n	800c1e2 <__swbuf_r+0x7a>
 800c1de:	68ac      	ldr	r4, [r5, #8]
 800c1e0:	e7cf      	b.n	800c182 <__swbuf_r+0x1a>
 800c1e2:	4b09      	ldr	r3, [pc, #36]	; (800c208 <__swbuf_r+0xa0>)
 800c1e4:	429c      	cmp	r4, r3
 800c1e6:	bf08      	it	eq
 800c1e8:	68ec      	ldreq	r4, [r5, #12]
 800c1ea:	e7ca      	b.n	800c182 <__swbuf_r+0x1a>
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f000 f81a 	bl	800c228 <__swsetup_r>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d0cb      	beq.n	800c190 <__swbuf_r+0x28>
 800c1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800c1fc:	e7ea      	b.n	800c1d4 <__swbuf_r+0x6c>
 800c1fe:	bf00      	nop
 800c200:	0800cdec 	.word	0x0800cdec
 800c204:	0800ce0c 	.word	0x0800ce0c
 800c208:	0800cdcc 	.word	0x0800cdcc

0800c20c <__ascii_wctomb>:
 800c20c:	4603      	mov	r3, r0
 800c20e:	4608      	mov	r0, r1
 800c210:	b141      	cbz	r1, 800c224 <__ascii_wctomb+0x18>
 800c212:	2aff      	cmp	r2, #255	; 0xff
 800c214:	d904      	bls.n	800c220 <__ascii_wctomb+0x14>
 800c216:	228a      	movs	r2, #138	; 0x8a
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	4770      	bx	lr
 800c220:	2001      	movs	r0, #1
 800c222:	700a      	strb	r2, [r1, #0]
 800c224:	4770      	bx	lr
	...

0800c228 <__swsetup_r>:
 800c228:	4b32      	ldr	r3, [pc, #200]	; (800c2f4 <__swsetup_r+0xcc>)
 800c22a:	b570      	push	{r4, r5, r6, lr}
 800c22c:	681d      	ldr	r5, [r3, #0]
 800c22e:	4606      	mov	r6, r0
 800c230:	460c      	mov	r4, r1
 800c232:	b125      	cbz	r5, 800c23e <__swsetup_r+0x16>
 800c234:	69ab      	ldr	r3, [r5, #24]
 800c236:	b913      	cbnz	r3, 800c23e <__swsetup_r+0x16>
 800c238:	4628      	mov	r0, r5
 800c23a:	f000 f981 	bl	800c540 <__sinit>
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <__swsetup_r+0xd0>)
 800c240:	429c      	cmp	r4, r3
 800c242:	d10f      	bne.n	800c264 <__swsetup_r+0x3c>
 800c244:	686c      	ldr	r4, [r5, #4]
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c24c:	0719      	lsls	r1, r3, #28
 800c24e:	d42c      	bmi.n	800c2aa <__swsetup_r+0x82>
 800c250:	06dd      	lsls	r5, r3, #27
 800c252:	d411      	bmi.n	800c278 <__swsetup_r+0x50>
 800c254:	2309      	movs	r3, #9
 800c256:	6033      	str	r3, [r6, #0]
 800c258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	81a3      	strh	r3, [r4, #12]
 800c262:	e03e      	b.n	800c2e2 <__swsetup_r+0xba>
 800c264:	4b25      	ldr	r3, [pc, #148]	; (800c2fc <__swsetup_r+0xd4>)
 800c266:	429c      	cmp	r4, r3
 800c268:	d101      	bne.n	800c26e <__swsetup_r+0x46>
 800c26a:	68ac      	ldr	r4, [r5, #8]
 800c26c:	e7eb      	b.n	800c246 <__swsetup_r+0x1e>
 800c26e:	4b24      	ldr	r3, [pc, #144]	; (800c300 <__swsetup_r+0xd8>)
 800c270:	429c      	cmp	r4, r3
 800c272:	bf08      	it	eq
 800c274:	68ec      	ldreq	r4, [r5, #12]
 800c276:	e7e6      	b.n	800c246 <__swsetup_r+0x1e>
 800c278:	0758      	lsls	r0, r3, #29
 800c27a:	d512      	bpl.n	800c2a2 <__swsetup_r+0x7a>
 800c27c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c27e:	b141      	cbz	r1, 800c292 <__swsetup_r+0x6a>
 800c280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c284:	4299      	cmp	r1, r3
 800c286:	d002      	beq.n	800c28e <__swsetup_r+0x66>
 800c288:	4630      	mov	r0, r6
 800c28a:	f7ff fb37 	bl	800b8fc <_free_r>
 800c28e:	2300      	movs	r3, #0
 800c290:	6363      	str	r3, [r4, #52]	; 0x34
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	2300      	movs	r3, #0
 800c29c:	6063      	str	r3, [r4, #4]
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	f043 0308 	orr.w	r3, r3, #8
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	6923      	ldr	r3, [r4, #16]
 800c2ac:	b94b      	cbnz	r3, 800c2c2 <__swsetup_r+0x9a>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2b8:	d003      	beq.n	800c2c2 <__swsetup_r+0x9a>
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f000 fa05 	bl	800c6cc <__smakebuf_r>
 800c2c2:	89a0      	ldrh	r0, [r4, #12]
 800c2c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2c8:	f010 0301 	ands.w	r3, r0, #1
 800c2cc:	d00a      	beq.n	800c2e4 <__swsetup_r+0xbc>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60a3      	str	r3, [r4, #8]
 800c2d2:	6963      	ldr	r3, [r4, #20]
 800c2d4:	425b      	negs	r3, r3
 800c2d6:	61a3      	str	r3, [r4, #24]
 800c2d8:	6923      	ldr	r3, [r4, #16]
 800c2da:	b943      	cbnz	r3, 800c2ee <__swsetup_r+0xc6>
 800c2dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2e0:	d1ba      	bne.n	800c258 <__swsetup_r+0x30>
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	0781      	lsls	r1, r0, #30
 800c2e6:	bf58      	it	pl
 800c2e8:	6963      	ldrpl	r3, [r4, #20]
 800c2ea:	60a3      	str	r3, [r4, #8]
 800c2ec:	e7f4      	b.n	800c2d8 <__swsetup_r+0xb0>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	e7f7      	b.n	800c2e2 <__swsetup_r+0xba>
 800c2f2:	bf00      	nop
 800c2f4:	2000017c 	.word	0x2000017c
 800c2f8:	0800cdec 	.word	0x0800cdec
 800c2fc:	0800ce0c 	.word	0x0800ce0c
 800c300:	0800cdcc 	.word	0x0800cdcc

0800c304 <abort>:
 800c304:	2006      	movs	r0, #6
 800c306:	b508      	push	{r3, lr}
 800c308:	f000 fa50 	bl	800c7ac <raise>
 800c30c:	2001      	movs	r0, #1
 800c30e:	f7f5 f994 	bl	800163a <_exit>
	...

0800c314 <__sflush_r>:
 800c314:	898a      	ldrh	r2, [r1, #12]
 800c316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c318:	4605      	mov	r5, r0
 800c31a:	0710      	lsls	r0, r2, #28
 800c31c:	460c      	mov	r4, r1
 800c31e:	d457      	bmi.n	800c3d0 <__sflush_r+0xbc>
 800c320:	684b      	ldr	r3, [r1, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	dc04      	bgt.n	800c330 <__sflush_r+0x1c>
 800c326:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dc01      	bgt.n	800c330 <__sflush_r+0x1c>
 800c32c:	2000      	movs	r0, #0
 800c32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c332:	2e00      	cmp	r6, #0
 800c334:	d0fa      	beq.n	800c32c <__sflush_r+0x18>
 800c336:	2300      	movs	r3, #0
 800c338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c33c:	682f      	ldr	r7, [r5, #0]
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	d032      	beq.n	800c3a8 <__sflush_r+0x94>
 800c342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	075a      	lsls	r2, r3, #29
 800c348:	d505      	bpl.n	800c356 <__sflush_r+0x42>
 800c34a:	6863      	ldr	r3, [r4, #4]
 800c34c:	1ac0      	subs	r0, r0, r3
 800c34e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c350:	b10b      	cbz	r3, 800c356 <__sflush_r+0x42>
 800c352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c354:	1ac0      	subs	r0, r0, r3
 800c356:	2300      	movs	r3, #0
 800c358:	4602      	mov	r2, r0
 800c35a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c35c:	4628      	mov	r0, r5
 800c35e:	6a21      	ldr	r1, [r4, #32]
 800c360:	47b0      	blx	r6
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	d106      	bne.n	800c376 <__sflush_r+0x62>
 800c368:	6829      	ldr	r1, [r5, #0]
 800c36a:	291d      	cmp	r1, #29
 800c36c:	d82c      	bhi.n	800c3c8 <__sflush_r+0xb4>
 800c36e:	4a29      	ldr	r2, [pc, #164]	; (800c414 <__sflush_r+0x100>)
 800c370:	40ca      	lsrs	r2, r1
 800c372:	07d6      	lsls	r6, r2, #31
 800c374:	d528      	bpl.n	800c3c8 <__sflush_r+0xb4>
 800c376:	2200      	movs	r2, #0
 800c378:	6062      	str	r2, [r4, #4]
 800c37a:	6922      	ldr	r2, [r4, #16]
 800c37c:	04d9      	lsls	r1, r3, #19
 800c37e:	6022      	str	r2, [r4, #0]
 800c380:	d504      	bpl.n	800c38c <__sflush_r+0x78>
 800c382:	1c42      	adds	r2, r0, #1
 800c384:	d101      	bne.n	800c38a <__sflush_r+0x76>
 800c386:	682b      	ldr	r3, [r5, #0]
 800c388:	b903      	cbnz	r3, 800c38c <__sflush_r+0x78>
 800c38a:	6560      	str	r0, [r4, #84]	; 0x54
 800c38c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c38e:	602f      	str	r7, [r5, #0]
 800c390:	2900      	cmp	r1, #0
 800c392:	d0cb      	beq.n	800c32c <__sflush_r+0x18>
 800c394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c398:	4299      	cmp	r1, r3
 800c39a:	d002      	beq.n	800c3a2 <__sflush_r+0x8e>
 800c39c:	4628      	mov	r0, r5
 800c39e:	f7ff faad 	bl	800b8fc <_free_r>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	6360      	str	r0, [r4, #52]	; 0x34
 800c3a6:	e7c2      	b.n	800c32e <__sflush_r+0x1a>
 800c3a8:	6a21      	ldr	r1, [r4, #32]
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	47b0      	blx	r6
 800c3b0:	1c41      	adds	r1, r0, #1
 800c3b2:	d1c7      	bne.n	800c344 <__sflush_r+0x30>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c4      	beq.n	800c344 <__sflush_r+0x30>
 800c3ba:	2b1d      	cmp	r3, #29
 800c3bc:	d001      	beq.n	800c3c2 <__sflush_r+0xae>
 800c3be:	2b16      	cmp	r3, #22
 800c3c0:	d101      	bne.n	800c3c6 <__sflush_r+0xb2>
 800c3c2:	602f      	str	r7, [r5, #0]
 800c3c4:	e7b2      	b.n	800c32c <__sflush_r+0x18>
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3cc:	81a3      	strh	r3, [r4, #12]
 800c3ce:	e7ae      	b.n	800c32e <__sflush_r+0x1a>
 800c3d0:	690f      	ldr	r7, [r1, #16]
 800c3d2:	2f00      	cmp	r7, #0
 800c3d4:	d0aa      	beq.n	800c32c <__sflush_r+0x18>
 800c3d6:	0793      	lsls	r3, r2, #30
 800c3d8:	bf18      	it	ne
 800c3da:	2300      	movne	r3, #0
 800c3dc:	680e      	ldr	r6, [r1, #0]
 800c3de:	bf08      	it	eq
 800c3e0:	694b      	ldreq	r3, [r1, #20]
 800c3e2:	1bf6      	subs	r6, r6, r7
 800c3e4:	600f      	str	r7, [r1, #0]
 800c3e6:	608b      	str	r3, [r1, #8]
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	dd9f      	ble.n	800c32c <__sflush_r+0x18>
 800c3ec:	4633      	mov	r3, r6
 800c3ee:	463a      	mov	r2, r7
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	6a21      	ldr	r1, [r4, #32]
 800c3f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c3f8:	47e0      	blx	ip
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	dc06      	bgt.n	800c40c <__sflush_r+0xf8>
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f04f 30ff 	mov.w	r0, #4294967295
 800c404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c408:	81a3      	strh	r3, [r4, #12]
 800c40a:	e790      	b.n	800c32e <__sflush_r+0x1a>
 800c40c:	4407      	add	r7, r0
 800c40e:	1a36      	subs	r6, r6, r0
 800c410:	e7ea      	b.n	800c3e8 <__sflush_r+0xd4>
 800c412:	bf00      	nop
 800c414:	20400001 	.word	0x20400001

0800c418 <_fflush_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	690b      	ldr	r3, [r1, #16]
 800c41c:	4605      	mov	r5, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	b913      	cbnz	r3, 800c428 <_fflush_r+0x10>
 800c422:	2500      	movs	r5, #0
 800c424:	4628      	mov	r0, r5
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	b118      	cbz	r0, 800c432 <_fflush_r+0x1a>
 800c42a:	6983      	ldr	r3, [r0, #24]
 800c42c:	b90b      	cbnz	r3, 800c432 <_fflush_r+0x1a>
 800c42e:	f000 f887 	bl	800c540 <__sinit>
 800c432:	4b14      	ldr	r3, [pc, #80]	; (800c484 <_fflush_r+0x6c>)
 800c434:	429c      	cmp	r4, r3
 800c436:	d11b      	bne.n	800c470 <_fflush_r+0x58>
 800c438:	686c      	ldr	r4, [r5, #4]
 800c43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0ef      	beq.n	800c422 <_fflush_r+0xa>
 800c442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c444:	07d0      	lsls	r0, r2, #31
 800c446:	d404      	bmi.n	800c452 <_fflush_r+0x3a>
 800c448:	0599      	lsls	r1, r3, #22
 800c44a:	d402      	bmi.n	800c452 <_fflush_r+0x3a>
 800c44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c44e:	f000 f915 	bl	800c67c <__retarget_lock_acquire_recursive>
 800c452:	4628      	mov	r0, r5
 800c454:	4621      	mov	r1, r4
 800c456:	f7ff ff5d 	bl	800c314 <__sflush_r>
 800c45a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c45c:	4605      	mov	r5, r0
 800c45e:	07da      	lsls	r2, r3, #31
 800c460:	d4e0      	bmi.n	800c424 <_fflush_r+0xc>
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	059b      	lsls	r3, r3, #22
 800c466:	d4dd      	bmi.n	800c424 <_fflush_r+0xc>
 800c468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c46a:	f000 f908 	bl	800c67e <__retarget_lock_release_recursive>
 800c46e:	e7d9      	b.n	800c424 <_fflush_r+0xc>
 800c470:	4b05      	ldr	r3, [pc, #20]	; (800c488 <_fflush_r+0x70>)
 800c472:	429c      	cmp	r4, r3
 800c474:	d101      	bne.n	800c47a <_fflush_r+0x62>
 800c476:	68ac      	ldr	r4, [r5, #8]
 800c478:	e7df      	b.n	800c43a <_fflush_r+0x22>
 800c47a:	4b04      	ldr	r3, [pc, #16]	; (800c48c <_fflush_r+0x74>)
 800c47c:	429c      	cmp	r4, r3
 800c47e:	bf08      	it	eq
 800c480:	68ec      	ldreq	r4, [r5, #12]
 800c482:	e7da      	b.n	800c43a <_fflush_r+0x22>
 800c484:	0800cdec 	.word	0x0800cdec
 800c488:	0800ce0c 	.word	0x0800ce0c
 800c48c:	0800cdcc 	.word	0x0800cdcc

0800c490 <std>:
 800c490:	2300      	movs	r3, #0
 800c492:	b510      	push	{r4, lr}
 800c494:	4604      	mov	r4, r0
 800c496:	e9c0 3300 	strd	r3, r3, [r0]
 800c49a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c49e:	6083      	str	r3, [r0, #8]
 800c4a0:	8181      	strh	r1, [r0, #12]
 800c4a2:	6643      	str	r3, [r0, #100]	; 0x64
 800c4a4:	81c2      	strh	r2, [r0, #14]
 800c4a6:	6183      	str	r3, [r0, #24]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	2208      	movs	r2, #8
 800c4ac:	305c      	adds	r0, #92	; 0x5c
 800c4ae:	f7fd fb5b 	bl	8009b68 <memset>
 800c4b2:	4b05      	ldr	r3, [pc, #20]	; (800c4c8 <std+0x38>)
 800c4b4:	6224      	str	r4, [r4, #32]
 800c4b6:	6263      	str	r3, [r4, #36]	; 0x24
 800c4b8:	4b04      	ldr	r3, [pc, #16]	; (800c4cc <std+0x3c>)
 800c4ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4bc:	4b04      	ldr	r3, [pc, #16]	; (800c4d0 <std+0x40>)
 800c4be:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4c0:	4b04      	ldr	r3, [pc, #16]	; (800c4d4 <std+0x44>)
 800c4c2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4c4:	bd10      	pop	{r4, pc}
 800c4c6:	bf00      	nop
 800c4c8:	0800c7e5 	.word	0x0800c7e5
 800c4cc:	0800c807 	.word	0x0800c807
 800c4d0:	0800c83f 	.word	0x0800c83f
 800c4d4:	0800c863 	.word	0x0800c863

0800c4d8 <_cleanup_r>:
 800c4d8:	4901      	ldr	r1, [pc, #4]	; (800c4e0 <_cleanup_r+0x8>)
 800c4da:	f000 b8af 	b.w	800c63c <_fwalk_reent>
 800c4de:	bf00      	nop
 800c4e0:	0800c419 	.word	0x0800c419

0800c4e4 <__sfmoreglue>:
 800c4e4:	2268      	movs	r2, #104	; 0x68
 800c4e6:	b570      	push	{r4, r5, r6, lr}
 800c4e8:	1e4d      	subs	r5, r1, #1
 800c4ea:	4355      	muls	r5, r2
 800c4ec:	460e      	mov	r6, r1
 800c4ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4f2:	f7ff fa6b 	bl	800b9cc <_malloc_r>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	b140      	cbz	r0, 800c50c <__sfmoreglue+0x28>
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	e9c0 1600 	strd	r1, r6, [r0]
 800c500:	300c      	adds	r0, #12
 800c502:	60a0      	str	r0, [r4, #8]
 800c504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c508:	f7fd fb2e 	bl	8009b68 <memset>
 800c50c:	4620      	mov	r0, r4
 800c50e:	bd70      	pop	{r4, r5, r6, pc}

0800c510 <__sfp_lock_acquire>:
 800c510:	4801      	ldr	r0, [pc, #4]	; (800c518 <__sfp_lock_acquire+0x8>)
 800c512:	f000 b8b3 	b.w	800c67c <__retarget_lock_acquire_recursive>
 800c516:	bf00      	nop
 800c518:	20001705 	.word	0x20001705

0800c51c <__sfp_lock_release>:
 800c51c:	4801      	ldr	r0, [pc, #4]	; (800c524 <__sfp_lock_release+0x8>)
 800c51e:	f000 b8ae 	b.w	800c67e <__retarget_lock_release_recursive>
 800c522:	bf00      	nop
 800c524:	20001705 	.word	0x20001705

0800c528 <__sinit_lock_acquire>:
 800c528:	4801      	ldr	r0, [pc, #4]	; (800c530 <__sinit_lock_acquire+0x8>)
 800c52a:	f000 b8a7 	b.w	800c67c <__retarget_lock_acquire_recursive>
 800c52e:	bf00      	nop
 800c530:	20001706 	.word	0x20001706

0800c534 <__sinit_lock_release>:
 800c534:	4801      	ldr	r0, [pc, #4]	; (800c53c <__sinit_lock_release+0x8>)
 800c536:	f000 b8a2 	b.w	800c67e <__retarget_lock_release_recursive>
 800c53a:	bf00      	nop
 800c53c:	20001706 	.word	0x20001706

0800c540 <__sinit>:
 800c540:	b510      	push	{r4, lr}
 800c542:	4604      	mov	r4, r0
 800c544:	f7ff fff0 	bl	800c528 <__sinit_lock_acquire>
 800c548:	69a3      	ldr	r3, [r4, #24]
 800c54a:	b11b      	cbz	r3, 800c554 <__sinit+0x14>
 800c54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c550:	f7ff bff0 	b.w	800c534 <__sinit_lock_release>
 800c554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c558:	6523      	str	r3, [r4, #80]	; 0x50
 800c55a:	4b13      	ldr	r3, [pc, #76]	; (800c5a8 <__sinit+0x68>)
 800c55c:	4a13      	ldr	r2, [pc, #76]	; (800c5ac <__sinit+0x6c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	62a2      	str	r2, [r4, #40]	; 0x28
 800c562:	42a3      	cmp	r3, r4
 800c564:	bf08      	it	eq
 800c566:	2301      	moveq	r3, #1
 800c568:	4620      	mov	r0, r4
 800c56a:	bf08      	it	eq
 800c56c:	61a3      	streq	r3, [r4, #24]
 800c56e:	f000 f81f 	bl	800c5b0 <__sfp>
 800c572:	6060      	str	r0, [r4, #4]
 800c574:	4620      	mov	r0, r4
 800c576:	f000 f81b 	bl	800c5b0 <__sfp>
 800c57a:	60a0      	str	r0, [r4, #8]
 800c57c:	4620      	mov	r0, r4
 800c57e:	f000 f817 	bl	800c5b0 <__sfp>
 800c582:	2200      	movs	r2, #0
 800c584:	2104      	movs	r1, #4
 800c586:	60e0      	str	r0, [r4, #12]
 800c588:	6860      	ldr	r0, [r4, #4]
 800c58a:	f7ff ff81 	bl	800c490 <std>
 800c58e:	2201      	movs	r2, #1
 800c590:	2109      	movs	r1, #9
 800c592:	68a0      	ldr	r0, [r4, #8]
 800c594:	f7ff ff7c 	bl	800c490 <std>
 800c598:	2202      	movs	r2, #2
 800c59a:	2112      	movs	r1, #18
 800c59c:	68e0      	ldr	r0, [r4, #12]
 800c59e:	f7ff ff77 	bl	800c490 <std>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	61a3      	str	r3, [r4, #24]
 800c5a6:	e7d1      	b.n	800c54c <__sinit+0xc>
 800c5a8:	0800ca54 	.word	0x0800ca54
 800c5ac:	0800c4d9 	.word	0x0800c4d9

0800c5b0 <__sfp>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	4607      	mov	r7, r0
 800c5b4:	f7ff ffac 	bl	800c510 <__sfp_lock_acquire>
 800c5b8:	4b1e      	ldr	r3, [pc, #120]	; (800c634 <__sfp+0x84>)
 800c5ba:	681e      	ldr	r6, [r3, #0]
 800c5bc:	69b3      	ldr	r3, [r6, #24]
 800c5be:	b913      	cbnz	r3, 800c5c6 <__sfp+0x16>
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7ff ffbd 	bl	800c540 <__sinit>
 800c5c6:	3648      	adds	r6, #72	; 0x48
 800c5c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	d503      	bpl.n	800c5d8 <__sfp+0x28>
 800c5d0:	6833      	ldr	r3, [r6, #0]
 800c5d2:	b30b      	cbz	r3, 800c618 <__sfp+0x68>
 800c5d4:	6836      	ldr	r6, [r6, #0]
 800c5d6:	e7f7      	b.n	800c5c8 <__sfp+0x18>
 800c5d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5dc:	b9d5      	cbnz	r5, 800c614 <__sfp+0x64>
 800c5de:	4b16      	ldr	r3, [pc, #88]	; (800c638 <__sfp+0x88>)
 800c5e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5e4:	60e3      	str	r3, [r4, #12]
 800c5e6:	6665      	str	r5, [r4, #100]	; 0x64
 800c5e8:	f000 f847 	bl	800c67a <__retarget_lock_init_recursive>
 800c5ec:	f7ff ff96 	bl	800c51c <__sfp_lock_release>
 800c5f0:	2208      	movs	r2, #8
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5fc:	6025      	str	r5, [r4, #0]
 800c5fe:	61a5      	str	r5, [r4, #24]
 800c600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c604:	f7fd fab0 	bl	8009b68 <memset>
 800c608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c60c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c610:	4620      	mov	r0, r4
 800c612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c614:	3468      	adds	r4, #104	; 0x68
 800c616:	e7d9      	b.n	800c5cc <__sfp+0x1c>
 800c618:	2104      	movs	r1, #4
 800c61a:	4638      	mov	r0, r7
 800c61c:	f7ff ff62 	bl	800c4e4 <__sfmoreglue>
 800c620:	4604      	mov	r4, r0
 800c622:	6030      	str	r0, [r6, #0]
 800c624:	2800      	cmp	r0, #0
 800c626:	d1d5      	bne.n	800c5d4 <__sfp+0x24>
 800c628:	f7ff ff78 	bl	800c51c <__sfp_lock_release>
 800c62c:	230c      	movs	r3, #12
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	e7ee      	b.n	800c610 <__sfp+0x60>
 800c632:	bf00      	nop
 800c634:	0800ca54 	.word	0x0800ca54
 800c638:	ffff0001 	.word	0xffff0001

0800c63c <_fwalk_reent>:
 800c63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c640:	4606      	mov	r6, r0
 800c642:	4688      	mov	r8, r1
 800c644:	2700      	movs	r7, #0
 800c646:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c64a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c64e:	f1b9 0901 	subs.w	r9, r9, #1
 800c652:	d505      	bpl.n	800c660 <_fwalk_reent+0x24>
 800c654:	6824      	ldr	r4, [r4, #0]
 800c656:	2c00      	cmp	r4, #0
 800c658:	d1f7      	bne.n	800c64a <_fwalk_reent+0xe>
 800c65a:	4638      	mov	r0, r7
 800c65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c660:	89ab      	ldrh	r3, [r5, #12]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d907      	bls.n	800c676 <_fwalk_reent+0x3a>
 800c666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c66a:	3301      	adds	r3, #1
 800c66c:	d003      	beq.n	800c676 <_fwalk_reent+0x3a>
 800c66e:	4629      	mov	r1, r5
 800c670:	4630      	mov	r0, r6
 800c672:	47c0      	blx	r8
 800c674:	4307      	orrs	r7, r0
 800c676:	3568      	adds	r5, #104	; 0x68
 800c678:	e7e9      	b.n	800c64e <_fwalk_reent+0x12>

0800c67a <__retarget_lock_init_recursive>:
 800c67a:	4770      	bx	lr

0800c67c <__retarget_lock_acquire_recursive>:
 800c67c:	4770      	bx	lr

0800c67e <__retarget_lock_release_recursive>:
 800c67e:	4770      	bx	lr

0800c680 <__swhatbuf_r>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	460e      	mov	r6, r1
 800c684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c688:	4614      	mov	r4, r2
 800c68a:	2900      	cmp	r1, #0
 800c68c:	461d      	mov	r5, r3
 800c68e:	b096      	sub	sp, #88	; 0x58
 800c690:	da08      	bge.n	800c6a4 <__swhatbuf_r+0x24>
 800c692:	2200      	movs	r2, #0
 800c694:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c698:	602a      	str	r2, [r5, #0]
 800c69a:	061a      	lsls	r2, r3, #24
 800c69c:	d410      	bmi.n	800c6c0 <__swhatbuf_r+0x40>
 800c69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a2:	e00e      	b.n	800c6c2 <__swhatbuf_r+0x42>
 800c6a4:	466a      	mov	r2, sp
 800c6a6:	f000 f903 	bl	800c8b0 <_fstat_r>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	dbf1      	blt.n	800c692 <__swhatbuf_r+0x12>
 800c6ae:	9a01      	ldr	r2, [sp, #4]
 800c6b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6b8:	425a      	negs	r2, r3
 800c6ba:	415a      	adcs	r2, r3
 800c6bc:	602a      	str	r2, [r5, #0]
 800c6be:	e7ee      	b.n	800c69e <__swhatbuf_r+0x1e>
 800c6c0:	2340      	movs	r3, #64	; 0x40
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	b016      	add	sp, #88	; 0x58
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6cc <__smakebuf_r>:
 800c6cc:	898b      	ldrh	r3, [r1, #12]
 800c6ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6d0:	079d      	lsls	r5, r3, #30
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	d507      	bpl.n	800c6e8 <__smakebuf_r+0x1c>
 800c6d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	6123      	str	r3, [r4, #16]
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	6163      	str	r3, [r4, #20]
 800c6e4:	b002      	add	sp, #8
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	466a      	mov	r2, sp
 800c6ea:	ab01      	add	r3, sp, #4
 800c6ec:	f7ff ffc8 	bl	800c680 <__swhatbuf_r>
 800c6f0:	9900      	ldr	r1, [sp, #0]
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7ff f969 	bl	800b9cc <_malloc_r>
 800c6fa:	b948      	cbnz	r0, 800c710 <__smakebuf_r+0x44>
 800c6fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c700:	059a      	lsls	r2, r3, #22
 800c702:	d4ef      	bmi.n	800c6e4 <__smakebuf_r+0x18>
 800c704:	f023 0303 	bic.w	r3, r3, #3
 800c708:	f043 0302 	orr.w	r3, r3, #2
 800c70c:	81a3      	strh	r3, [r4, #12]
 800c70e:	e7e3      	b.n	800c6d8 <__smakebuf_r+0xc>
 800c710:	4b0d      	ldr	r3, [pc, #52]	; (800c748 <__smakebuf_r+0x7c>)
 800c712:	62b3      	str	r3, [r6, #40]	; 0x28
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	6020      	str	r0, [r4, #0]
 800c718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	9b00      	ldr	r3, [sp, #0]
 800c720:	6120      	str	r0, [r4, #16]
 800c722:	6163      	str	r3, [r4, #20]
 800c724:	9b01      	ldr	r3, [sp, #4]
 800c726:	b15b      	cbz	r3, 800c740 <__smakebuf_r+0x74>
 800c728:	4630      	mov	r0, r6
 800c72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c72e:	f000 f8d1 	bl	800c8d4 <_isatty_r>
 800c732:	b128      	cbz	r0, 800c740 <__smakebuf_r+0x74>
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	f023 0303 	bic.w	r3, r3, #3
 800c73a:	f043 0301 	orr.w	r3, r3, #1
 800c73e:	81a3      	strh	r3, [r4, #12]
 800c740:	89a0      	ldrh	r0, [r4, #12]
 800c742:	4305      	orrs	r5, r0
 800c744:	81a5      	strh	r5, [r4, #12]
 800c746:	e7cd      	b.n	800c6e4 <__smakebuf_r+0x18>
 800c748:	0800c4d9 	.word	0x0800c4d9

0800c74c <_malloc_usable_size_r>:
 800c74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c750:	1f18      	subs	r0, r3, #4
 800c752:	2b00      	cmp	r3, #0
 800c754:	bfbc      	itt	lt
 800c756:	580b      	ldrlt	r3, [r1, r0]
 800c758:	18c0      	addlt	r0, r0, r3
 800c75a:	4770      	bx	lr

0800c75c <_raise_r>:
 800c75c:	291f      	cmp	r1, #31
 800c75e:	b538      	push	{r3, r4, r5, lr}
 800c760:	4604      	mov	r4, r0
 800c762:	460d      	mov	r5, r1
 800c764:	d904      	bls.n	800c770 <_raise_r+0x14>
 800c766:	2316      	movs	r3, #22
 800c768:	6003      	str	r3, [r0, #0]
 800c76a:	f04f 30ff 	mov.w	r0, #4294967295
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c772:	b112      	cbz	r2, 800c77a <_raise_r+0x1e>
 800c774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c778:	b94b      	cbnz	r3, 800c78e <_raise_r+0x32>
 800c77a:	4620      	mov	r0, r4
 800c77c:	f000 f830 	bl	800c7e0 <_getpid_r>
 800c780:	462a      	mov	r2, r5
 800c782:	4601      	mov	r1, r0
 800c784:	4620      	mov	r0, r4
 800c786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c78a:	f000 b817 	b.w	800c7bc <_kill_r>
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d00a      	beq.n	800c7a8 <_raise_r+0x4c>
 800c792:	1c59      	adds	r1, r3, #1
 800c794:	d103      	bne.n	800c79e <_raise_r+0x42>
 800c796:	2316      	movs	r3, #22
 800c798:	6003      	str	r3, [r0, #0]
 800c79a:	2001      	movs	r0, #1
 800c79c:	e7e7      	b.n	800c76e <_raise_r+0x12>
 800c79e:	2400      	movs	r4, #0
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7a6:	4798      	blx	r3
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	e7e0      	b.n	800c76e <_raise_r+0x12>

0800c7ac <raise>:
 800c7ac:	4b02      	ldr	r3, [pc, #8]	; (800c7b8 <raise+0xc>)
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	6818      	ldr	r0, [r3, #0]
 800c7b2:	f7ff bfd3 	b.w	800c75c <_raise_r>
 800c7b6:	bf00      	nop
 800c7b8:	2000017c 	.word	0x2000017c

0800c7bc <_kill_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	2300      	movs	r3, #0
 800c7c0:	4d06      	ldr	r5, [pc, #24]	; (800c7dc <_kill_r+0x20>)
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	4608      	mov	r0, r1
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	f7f4 ff26 	bl	800161a <_kill>
 800c7ce:	1c43      	adds	r3, r0, #1
 800c7d0:	d102      	bne.n	800c7d8 <_kill_r+0x1c>
 800c7d2:	682b      	ldr	r3, [r5, #0]
 800c7d4:	b103      	cbz	r3, 800c7d8 <_kill_r+0x1c>
 800c7d6:	6023      	str	r3, [r4, #0]
 800c7d8:	bd38      	pop	{r3, r4, r5, pc}
 800c7da:	bf00      	nop
 800c7dc:	20001700 	.word	0x20001700

0800c7e0 <_getpid_r>:
 800c7e0:	f7f4 bf14 	b.w	800160c <_getpid>

0800c7e4 <__sread>:
 800c7e4:	b510      	push	{r4, lr}
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ec:	f000 f894 	bl	800c918 <_read_r>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	bfab      	itete	ge
 800c7f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c7f8:	181b      	addge	r3, r3, r0
 800c7fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7fe:	bfac      	ite	ge
 800c800:	6563      	strge	r3, [r4, #84]	; 0x54
 800c802:	81a3      	strhlt	r3, [r4, #12]
 800c804:	bd10      	pop	{r4, pc}

0800c806 <__swrite>:
 800c806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80a:	461f      	mov	r7, r3
 800c80c:	898b      	ldrh	r3, [r1, #12]
 800c80e:	4605      	mov	r5, r0
 800c810:	05db      	lsls	r3, r3, #23
 800c812:	460c      	mov	r4, r1
 800c814:	4616      	mov	r6, r2
 800c816:	d505      	bpl.n	800c824 <__swrite+0x1e>
 800c818:	2302      	movs	r3, #2
 800c81a:	2200      	movs	r2, #0
 800c81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c820:	f000 f868 	bl	800c8f4 <_lseek_r>
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	4632      	mov	r2, r6
 800c828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c82c:	81a3      	strh	r3, [r4, #12]
 800c82e:	4628      	mov	r0, r5
 800c830:	463b      	mov	r3, r7
 800c832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c83a:	f000 b817 	b.w	800c86c <_write_r>

0800c83e <__sseek>:
 800c83e:	b510      	push	{r4, lr}
 800c840:	460c      	mov	r4, r1
 800c842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c846:	f000 f855 	bl	800c8f4 <_lseek_r>
 800c84a:	1c43      	adds	r3, r0, #1
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	bf15      	itete	ne
 800c850:	6560      	strne	r0, [r4, #84]	; 0x54
 800c852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c85a:	81a3      	strheq	r3, [r4, #12]
 800c85c:	bf18      	it	ne
 800c85e:	81a3      	strhne	r3, [r4, #12]
 800c860:	bd10      	pop	{r4, pc}

0800c862 <__sclose>:
 800c862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c866:	f000 b813 	b.w	800c890 <_close_r>
	...

0800c86c <_write_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4604      	mov	r4, r0
 800c870:	4608      	mov	r0, r1
 800c872:	4611      	mov	r1, r2
 800c874:	2200      	movs	r2, #0
 800c876:	4d05      	ldr	r5, [pc, #20]	; (800c88c <_write_r+0x20>)
 800c878:	602a      	str	r2, [r5, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7f4 ff04 	bl	8001688 <_write>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_write_r+0x1e>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_write_r+0x1e>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20001700 	.word	0x20001700

0800c890 <_close_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	2300      	movs	r3, #0
 800c894:	4d05      	ldr	r5, [pc, #20]	; (800c8ac <_close_r+0x1c>)
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f7f4 ff10 	bl	80016c0 <_close>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_close_r+0x1a>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_close_r+0x1a>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	20001700 	.word	0x20001700

0800c8b0 <_fstat_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	4d06      	ldr	r5, [pc, #24]	; (800c8d0 <_fstat_r+0x20>)
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f7f4 ff0a 	bl	80016d6 <_fstat>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d102      	bne.n	800c8cc <_fstat_r+0x1c>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	b103      	cbz	r3, 800c8cc <_fstat_r+0x1c>
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20001700 	.word	0x20001700

0800c8d4 <_isatty_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	4d05      	ldr	r5, [pc, #20]	; (800c8f0 <_isatty_r+0x1c>)
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	602b      	str	r3, [r5, #0]
 800c8e0:	f7f4 ff08 	bl	80016f4 <_isatty>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_isatty_r+0x1a>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_isatty_r+0x1a>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	20001700 	.word	0x20001700

0800c8f4 <_lseek_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4d05      	ldr	r5, [pc, #20]	; (800c914 <_lseek_r+0x20>)
 800c900:	602a      	str	r2, [r5, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	f7f4 ff00 	bl	8001708 <_lseek>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_lseek_r+0x1e>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_lseek_r+0x1e>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	20001700 	.word	0x20001700

0800c918 <_read_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	4611      	mov	r1, r2
 800c920:	2200      	movs	r2, #0
 800c922:	4d05      	ldr	r5, [pc, #20]	; (800c938 <_read_r+0x20>)
 800c924:	602a      	str	r2, [r5, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	f7f4 fe91 	bl	800164e <_read>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d102      	bne.n	800c936 <_read_r+0x1e>
 800c930:	682b      	ldr	r3, [r5, #0]
 800c932:	b103      	cbz	r3, 800c936 <_read_r+0x1e>
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	20001700 	.word	0x20001700

0800c93c <_init>:
 800c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93e:	bf00      	nop
 800c940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c942:	bc08      	pop	{r3}
 800c944:	469e      	mov	lr, r3
 800c946:	4770      	bx	lr

0800c948 <_fini>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	bf00      	nop
 800c94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94e:	bc08      	pop	{r3}
 800c950:	469e      	mov	lr, r3
 800c952:	4770      	bx	lr
